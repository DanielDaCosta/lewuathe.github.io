<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The first cry of Atom]]></title>
  <link href="http://lewuathe.github.io/atom.xml" rel="self"/>
  <link href="http://lewuathe.github.io/"/>
  <updated>2014-05-26T21:35:33+09:00</updated>
  <id>http://lewuathe.github.io/</id>
  <author>
    <name><![CDATA[Kai Sasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hack NHK]]></title>
    <link href="http://lewuathe.github.io/blog/2014/05/26/hack-nhk/"/>
    <updated>2014-05-26T19:38:04+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/05/26/hack-nhk</id>
    <content type="html"><![CDATA[<p>Recently, there are a lot of hackathon in Japan. This word &ldquo;Hackathon&rdquo; also have been
familiar word to non programmers. People want to use this type of event in order to solve
any problems they have at office, home and life.</p>

<p>NHK is Japan&rsquo;s national public broadcasting organization. The name is abbreviation of &ldquo;Nippon Housou Kyoukai&rdquo;.
This organization keeps focusing to improve the quality of news broadcasting in terms of equality, accuracy and deepness.
In this weekend, Hakathon is applied to the field of broadcasting. I attended.</p>

<p><a href="http://www.nhk.or.jp/kokusaihoudou/hackathon/">http://www.nhk.or.jp/kokusaihoudou/hackathon/</a></p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-05-26-nhk-hackathon/board.jpg" />
</div>




<!-- more -->


<p>The purpose of this event is to answer how to let the youngs see news programs such as <a href="http://www.nhk.or.jp/kokusaihoudou/">&ldquo;Kokusai Houdou 2014&rdquo;</a>.
To promote the rating of thie program and furthermore the rating of whole news programs, our ideas as hacker, I think, will also help new field
which is different from our daily life.</p>

<p>Our team developes vizualizing tool for your interest to the news program. While you are watching TV program, you might not want to have trouble with
recording any captures, time or tracking tweets about target program. All you have to do with our tool is watching TV. The image sensing hardware made by <a href="http://www.omron.co.jp/">omron</a> tracks your emotion toward program automatically. At the end of the program you can review the list of emotions showed by you while you were watching TV.
With that list of emotion and captures, you can look back inside yourself, your emotions. This leads the new possibility of the style of watching TV and our emotions.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-05-26-nhk-hackathon/members.jpg" />
</div>


<p>As a geek, the most impressive factor I can use in this time was <a href="http://www.nhk.or.jp/hybridcast/online/">Hybridcast</a>. With this technology, I can develop &ldquo;TV&rdquo; application
like developing web application. I constructed API server, started HTTP proxy server and wrote HTML5 source codes. It was the time when I realised the new technology of TV brought us sufficient generality of web technology even paradoxically. The future is getting around the corner.</p>

<p>To be honest, I don&rsquo;t usually watch TV programs except for NHK. Even NHK, the frequency of watching cannot be necessarily high. I am a resident of internet.</p>

<p>However I can see a little bright future on TV device and contents. I hope to help TV get the power of internet with the explosion of high technologies.
So from today, I think watching TV is not bad as much as I expected. Oops, <a href="http://www.nhk.or.jp/professional/">&ldquo;The professional&rdquo;</a> starts soon, it&rsquo;s monday.
Here I close my laptop and watching the future showed on TV calmly.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is the Essential Factor of Autoencoder?]]></title>
    <link href="http://lewuathe.github.io/blog/2014/05/20/what-is-the-essential-factor-of-autoencoder/"/>
    <updated>2014-05-20T21:08:45+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/05/20/what-is-the-essential-factor-of-autoencoder</id>
    <content type="html"><![CDATA[<p>The other day, I wrote neural network which implements backpropagation algorithm.
Following this program I write denoised autoencoder program by inheriting previous neural network.
Backpropagation algorithm is generally good performance in spite of the simplicity. With this code,
I can be ranked in at the <a href="http://www.kaggle.com/c/digit-recognizer/leaderboard">266th(May 20th, 2014)</a>.
So I think this implementation has no bugs. However when I use this program as autoencoder the same is not true.
With autoencoder, you should reduce dimension of input vector in order to extract essential characteristics.
These essential characteristics might be also reduced so it cannot reconstruct the same vector to input vector.
In fact after over-completed this network, I can better performance in terms of the number of accurate answers.</p>

<p>This is code.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">lewuathe</span><span class="o">.</span><span class="na">magi</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.ujmp.core.Matrix</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by sasakiumi on 5/8/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DenoisedAutoencoder</span> <span class="kd">extends</span> <span class="n">NeuralNetwork</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="n">corruptionLevel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DenoisedAutoencoder</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numLayers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">numLayers</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DenoisedAutoencoder</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numLayers</span><span class="o">,</span> <span class="n">Matrix</span> <span class="n">w</span><span class="o">,</span> <span class="n">Matrix</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">numLayers</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">w</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">biases</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">corruptionLevel</span> <span class="o">=</span> <span class="mf">0.2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCorruptionLevel</span><span class="o">(</span><span class="kt">double</span> <span class="n">corruptionLevel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">corruptionLevel</span> <span class="o">=</span> <span class="n">corruptionLevel</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * update</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param x</span>
</span><span class='line'><span class="cm">     * @param y</span>
</span><span class='line'><span class="cm">     * @param lr</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>     <span class="nd">@Override</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="kt">double</span><span class="o">[][]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">double</span><span class="o">[][]</span> <span class="n">y</span><span class="o">,</span> <span class="kt">double</span> <span class="n">lr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="o">[]</span> <span class="n">nablaB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>          <span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>          <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="o">[]</span> <span class="n">nablaW</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>          <span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>          <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">assert</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">y</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Matrix</span> <span class="n">xMat</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>              <span class="n">Matrix</span> <span class="n">yMat</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">xMat</span><span class="o">.</span><span class="na">setAsDouble</span><span class="o">(</span><span class="n">corrupt</span><span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">],</span> <span class="n">corruptionLevel</span><span class="o">),</span> <span class="n">j</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">yMat</span><span class="o">.</span><span class="na">setAsDouble</span><span class="o">(</span><span class="n">y</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">],</span> <span class="n">j</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">Matrix</span><span class="o">[][]</span> <span class="n">delta</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">backprod</span><span class="o">(</span><span class="n">xMat</span><span class="o">,</span> <span class="n">yMat</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">// delta[0]: nablaB</span>
</span><span class='line'>              <span class="c1">// delta[1]: nablaW</span>
</span><span class='line'>              <span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">plus</span><span class="o">(</span><span class="n">delta</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>              <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">plus</span><span class="o">(</span><span class="n">delta</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>                <span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">plus</span><span class="o">(</span><span class="n">delta</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>              <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">plus</span><span class="o">(</span><span class="n">delta</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Update biases and weights with gradient descent</span>
</span><span class='line'>          <span class="n">biases</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">biases</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">minus</span><span class="o">(</span><span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">mtimes</span><span class="o">(</span><span class="n">lr</span><span class="o">));</span>
</span><span class='line'>          <span class="n">biases</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">biases</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">minus</span><span class="o">(</span><span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">mtimes</span><span class="o">(</span><span class="n">lr</span><span class="o">));</span>
</span><span class='line'>          <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">minus</span><span class="o">(</span><span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">mtimes</span><span class="o">(</span><span class="n">lr</span><span class="o">));</span>
</span><span class='line'>            <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">minus</span><span class="o">(</span><span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">transpose</span><span class="o">().</span><span class="na">mtimes</span><span class="o">(</span><span class="n">lr</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Matrix</span><span class="o">[][]</span> <span class="nf">backprod</span><span class="o">(</span><span class="n">Matrix</span> <span class="n">x</span><span class="o">,</span> <span class="n">Matrix</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Matrix</span><span class="o">[]</span> <span class="n">nablaB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Matrix</span><span class="o">[]</span> <span class="n">nablaW</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>        <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// In case of denoised autoencoder, no use of 1st weight layer</span>
</span><span class='line'>        <span class="n">weights</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">transpose</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// Activation of each layer</span>
</span><span class='line'>        <span class="n">Matrix</span> <span class="n">activation</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// Collection of activation values of each layer including input</span>
</span><span class='line'>        <span class="n">Matrix</span><span class="o">[]</span> <span class="n">activations</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>        <span class="c1">// Set input activation</span>
</span><span class='line'>        <span class="n">activations</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// Row values before activating</span>
</span><span class='line'>        <span class="n">Matrix</span> <span class="n">zs</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">zs</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">mtimes</span><span class="o">(</span><span class="n">activation</span><span class="o">).</span><span class="na">plus</span><span class="o">(</span><span class="n">biases</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">activation</span> <span class="o">=</span> <span class="n">Activation</span><span class="o">.</span><span class="na">sigmoid</span><span class="o">(</span><span class="n">zs</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">activations</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">activation</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Calculate output layer error</span>
</span><span class='line'>          <span class="n">Matrix</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">costDerivative</span><span class="o">(</span><span class="n">activations</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="n">delta</span> <span class="o">=</span> <span class="n">Util</span><span class="o">.</span><span class="na">eachMul</span><span class="o">(</span><span class="n">delta</span><span class="o">,</span> <span class="n">Activation</span><span class="o">.</span><span class="na">sigmoidPrime</span><span class="o">(</span><span class="n">zs</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>          <span class="n">Matrix</span> <span class="n">L_vbias</span> <span class="o">=</span> <span class="n">delta</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>          <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">delta</span><span class="o">;</span>
</span><span class='line'>            <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">delta</span><span class="o">.</span><span class="na">mtimes</span><span class="o">(</span><span class="n">activations</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">transpose</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Back propagation of output layer error to hidden layers</span>
</span><span class='line'>              <span class="n">delta</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">transpose</span><span class="o">().</span><span class="na">mtimes</span><span class="o">(</span><span class="n">delta</span><span class="o">);</span>
</span><span class='line'>                <span class="n">delta</span> <span class="o">=</span> <span class="n">Util</span><span class="o">.</span><span class="na">eachMul</span><span class="o">(</span><span class="n">delta</span><span class="o">,</span> <span class="n">Activation</span><span class="o">.</span><span class="na">sigmoidPrime</span><span class="o">(</span><span class="n">zs</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>              <span class="n">nablaB</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">delta</span><span class="o">;</span>
</span><span class='line'>                <span class="n">nablaW</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">delta</span><span class="o">.</span><span class="na">mtimes</span><span class="o">(</span><span class="n">activations</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="na">transpose</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Matrix</span><span class="o">[][]</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">{</span><span class="n">nablaB</span><span class="o">,</span> <span class="n">nablaW</span><span class="o">};</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">corrupt</span><span class="o">(</span><span class="kt">double</span> <span class="n">input</span><span class="o">,</span> <span class="kt">double</span> <span class="n">level</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">noise</span> <span class="o">=</span> <span class="n">level</span> <span class="o">*</span> <span class="o">(</span><span class="mf">2.0</span> <span class="o">*</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">-</span> <span class="mf">1.0</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">input</span> <span class="o">*</span> <span class="o">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">noise</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Complete code is <a href="https://github.com/Lewuathe/magi">here</a>
While I contemplates about any bugs or errors hidden in this program, I received good clue.</p>

<div style="text-align:center" markdown="1">
<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/Lewuathe">@Lewuathe</a> over-complete autoencoders can often recover interesting structures of the data if regularized (e.g. sparsity constraint)</p>&mdash; Vincent Spruyt (@esurior) <a href="https://twitter.com/esurior/statuses/468730252798492672">2014, 5月 20</a></blockquote>
<script async src="http://lewuathe.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>


<p>I will try it with this clue a little more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dear, O]]></title>
    <link href="http://lewuathe.github.io/blog/2014/04/18/dear-o/"/>
    <updated>2014-04-18T21:05:36+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/04/18/dear-o</id>
    <content type="html"><![CDATA[<p>Hello, nice to meet you. I am a novice software engineer who has worked for about 2 years. An ordinary man. I have no honor, no fame and no wealth. Of course you don&rsquo;t know who I am. There is no connection between us such as email, facebook and twitter. The reason why I can mate your name and your face is no more than watching on TV. That&rsquo;s all. So in this time I dare to say that I am not familiar with you completely. Unexpectedly I don&rsquo;t know who you are in spite of writing this letter. For whom? I would like to tell the reason why I wrote this letter.</p>

<div style="text-align:center" markdown="1">
<figure>
<img src="http://lewuathe.github.io/images/posts/2014-04-18-dearo/letter.jpg" />
<figcaption>letters by liz west on <a href="https://www.flickr.com/photos/calliope/234447967/in/photolist-mHBdk-5RPqQV-cXh1DL-2vhsbs-j7Tba3-776vPa-ajZyEo-fQmgi-5RhQdM-fKfTWx-3REdmZ-hjbY9-2C7pEL-6rX2oN-6ynR77-bD67q-Dv9uJ-dyhzBQ-82qcDP-6eQC2X-mUJC9-XStsi-DVwCv-6BKZNZ-sYMMN-8513JQ-6xQCFC-jzJhbe-8a2fw8-6tgbpA-2WigS-7ksF4s-yu5k-rMGa6-iM7AYV-jDEv9H-5rC746-5RWx65-4gr9Am-6qpt9-6Cbi7S-567fwu-94A6G9-dRwBoG-brHgHq-8EdPak-82em44-asWNj-bVUz1W-4HAhxX/">flickr</a></figcaption>
</figure>
</div>


<p></br></p>

<!-- more -->


<p>In fact, I have written some blog entries in these weeks that has went up in flames. These entries are accessed and seen by many more people than I expected. Mainly the majority of the reaction was positive to me, but there were also negative speeches in no small way. I experienced this type of online flame for the first time. I knew what that is as external knowledge, but I have not felt of that with my skin. Even I used the internet for 10 years, I found I don&rsquo;t know such a simple thing. It was very small scale in comparison with the case when general &ldquo;flame&rdquo; word is used. However it was enough to dispirit me toward all things which I was engaged into previously. It was stressful situation and different from the previous case I have experienced in my lifetime. I have not received so many negative feedbacks from unfamiliar people. It was a tough situation for me but I was able to realise new insight about celebrities such as athletes and scholars especially who doesn&rsquo;t earn money with showing themselves to audience.</p>

<p>What do you think that day? You received many flush lights on your face. You received many strict questions from the audience. It might be far more tough situation than I experienced. I cannot imagine your feelings. The life is always difficult to live for those who want to be happy, only be happy. In this world, there are a lot of people who tend to hurt others without knowing it. This is not the world what it should be at all.</p>

<p>Today I realised these phenomenon is not uncommon things. Ordinary people, including me, can easily hurt others and attack external world around him unconsciously. This is destructive world where I don&rsquo;t hope. All people always destruct this world by using offensive words on the internet. If I look back myself, there were many times when I said or wrote thoughtless words to others.  He might be hurt by my words that time more than I think he would be. This is painful for me, but this is tiny thing in comparison with the feelings of the sufferers.</p>

<p>So I don&rsquo;t know who you are. I haven&rsquo;t talked with you. I haven&rsquo;t met you in face to face. I haven&rsquo;t had some meal with each other. With this presupposition, can I criticise you whom I don&rsquo;t know so much such as your background, your favorite music and the most impressive place you have been to? I cannot. I don&rsquo;t want. Above all, I must not.</p>

<p>Let you be what you are. The voices will not decrease drastically and keep affect your life. But all these voices are irrelevant to your background and your life. The advocates don&rsquo;t know who you are completely. In addition to this, we must be quiet about what we don&rsquo;t know. Our voices are not based on the further details about your life. So please let you be as you are.</p>

<p>Everytime anyone makes voices about other people, someone must be hurt by your voices.
We should keep this in mind for us and myself. Helping other people leads helping yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns About BFS in Competitive Programming]]></title>
    <link href="http://lewuathe.github.io/blog/2014/04/10/patterns-about-bfs-in-commetitive-programming/"/>
    <updated>2014-04-10T20:24:26+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/04/10/patterns-about-bfs-in-commetitive-programming</id>
    <content type="html"><![CDATA[<p>So let&rsquo;s go back to English from today :)</p>

<p>I solved SRM612 Div1 for practice. This problem is <a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=10543">this</a>
In this post, I left out the detail of this problem because main topic of this post is pattern of <a href="http://en.wikipedia.org/wiki/Breadth-first_search">BFS</a>.
First I tried to solve this problem with some dynamic programming algorithm. But after trying, I found BFS is sufficient algorithm
to solve. So now I rewrote my program as below.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmoticonsDiv1</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">decode</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="n">ret</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">code</span> <span class="o">/</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ret</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">code</span> <span class="o">%</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">printSmiles</span><span class="o">(</span><span class="kt">int</span> <span class="n">smiles</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[][]</span> <span class="n">state</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">][</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//        state[i][j] : i = message, j = clipboard</span>
</span><span class='line'>        <span class="n">state</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">decode</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">message</span> <span class="o">=</span> <span class="n">ret</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">clipboard</span> <span class="o">=</span> <span class="n">ret</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">message</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">message</span><span class="o">]</span> <span class="o">=</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">message</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span> <span class="o">&lt;</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">=</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span> <span class="o">==</span> <span class="n">smiles</span><span class="o">)</span> <span class="k">return</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">][</span><span class="n">clipboard</span><span class="o">];</span>
</span><span class='line'>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">)</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">=</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">smiles</span><span class="o">)</span> <span class="k">return</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">clipboard</span><span class="o">];</span>
</span><span class='line'>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The computing complexity of this code is O(S<sup>2</sup>). Could solve in time. After writing, I realized there are some patterns about writing BFS
in competitive programming. I want to put together these patterns in this port for the future contest.</p>

<h2>State encoding, decoding</h2>

<p>In general, BFS uses a queue data strucure. The elements of queue has to keep each state to search. In this case, each <code>message</code> and <code>clipboard</code>.
When you write software on long-term basis, you should write state class for keeping <code>message</code> and <code>clipboard</code>. But this is competitive programming.
Defining adhoc class will take you some more time to complete writing code. So you should avoid this pattern as possible.</p>

<p>The solution is encoding, decoding pattern. Default queue can only keep one <code>Integer</code> or <code>String</code>, therefore let two variables put into this one variable.
Specifically, this is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Decode one integer to two interger that composes state</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">decode</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>    <span class="n">ret</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">code</span> <span class="o">/</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ret</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">code</span> <span class="o">%</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">decode</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
</span><span class='line'><span class="kt">int</span> <span class="n">message</span> <span class="o">=</span> <span class="n">ret</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">clipboard</span> <span class="o">=</span> <span class="n">ret</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="c1">// Encode two variables into one variable</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">message</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this pattern you don&rsquo;t have to write your own state class. But this pattern has a fault. If there are more variables in a state,
decoding and encoding code becomes more complex and hard to debug. In addition to this problem, you should also know the range of input variable.
In this case, I use 10000 number to encoding and decoding, bacause input variables are included in [0, 1000]. So <code>message</code> and <code>clipboard</code> can be
separated. The selection of this base integer will be difficult as the number of state varibales are increasing.</p>

<h2>Optimization value</h2>

<p>Above case, optimization value to be submit as answer is the count of manipulation <code>state[i][j]</code>. If you can write state class, you don&rsquo;t need to
this 2 dimension array. But you couldn&rsquo;t. So with this <code>state</code>, I can realize that if I want to keep more values such as optimization value,
I can prepair external third variable instead. With this variable, you can keep more values corresponding to each state.</p>

<h2>Last but not least</h2>

<p>You should not write such codes in production software!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heart Bleedを読んだ]]></title>
    <link href="http://lewuathe.github.io/blog/2014/04/08/opensslfalsecui-ruo-xing-wodu-nta/"/>
    <updated>2014-04-08T21:06:12+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/04/08/opensslfalsecui-ruo-xing-wodu-nta</id>
    <content type="html"><![CDATA[<p>今日の日本時間13:00頃、OpenSSLに致命的なバグがあることがわかった。全世界で動いているSSLプロセスが影響を受ける。
簡単に言うと、メモリ上にある任意のデータを漏洩する可能性があるバグだ。
このバグはもう2年も前からあったらしいがGoogle Security TeamのNeel Mentaに見つけられたのはつい最近で、パッチがあたったのは十数時間前だ。</p>

<p><a href="https://github.com/openssl/openssl/commit/96db9023b881d7cd9f379b0c154650d6c108e9a3">Add heartbeat extension bounds check.</a></p>

<p>基本的には<a href="http://heartbleed.com/">heartbleed.com</a>に詳細が記載されていて、危険なOpenSSLのバージョン、ディストリビューションが書いてある。
対応方法も書いてある。今回はエンジニアとして、コードを読んでどういうバグだったのか理解してみたかったので書いてみる。</p>

<!-- more -->


<h2>問題の箇所</h2>

<p>修正箇所である<code>ssl/d1_both.c</code>の該当関数を見てみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">dtls1_process_heartbeat</span><span class="p">(</span><span class="n">SSL</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">*</span><span class="n">pl</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">hbtype</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">payload</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">padding</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span> <span class="cm">/* Use minimum padding */</span>
</span></code></pre></td></tr></table></div></figure>


<p>heartbeatという機能の詳しいことは調べられていないけれどどうやらクライアントーサーバ型の機能を提供するものらしい。
つまり何らかのリクエストを受け取ってレスポンスを返すようなサービスを提供するものらしい。<code>dtls1_process_heartbeat</code>で大事なのは
ポインタ<code>p</code>だ。これはリクエストデータを受け取って格納している。このリクエストデータは構造体になっていて、以下のように記述されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">ssl3_record_st</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">type</span><span class="p">;</span>               <span class="cm">/* type of record */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>    <span class="cm">/* How many bytes available */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">off</span><span class="p">;</span>       <span class="cm">/* read/write offset into &#39;buf&#39; */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>    <span class="cm">/* pointer to the record data */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">;</span>   <span class="cm">/* where the decode bytes are */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">comp</span><span class="p">;</span>    <span class="cm">/* only used with decompression - malloc()ed */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">epoch</span><span class="p">;</span>    <span class="cm">/* epoch number, needed by DTLS1 */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">seq_num</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span> <span class="cm">/* sequence number, needed by DTLS1 */</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">SSL3_RECORD</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>data</code>が実際の受け取っているデータ。このデータは先頭1byteがheart beatのtypeを表し、次の2byteがそのリクエストの長さを表すような
データになっている。これを処理するコードが以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Read type and payload length first */</span>
</span><span class='line'><span class="n">hbtype</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">n2s</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span><span class='line'><span class="n">pl</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>hbtype</code>に先頭1byteのheart beatのtypeが格納される。そしてn2sは次の2byteを格納するためのマクロで以下のように定義されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* straight from the openssl source */</span>
</span><span class='line'><span class="cp">#define n2s(c,s)    ((s=(((unsigned int)(c[0]))&lt;&lt; 8)| (((unsigned int)(c[1]))   )),c+=2)</span>
</span><span class='line'><span class="cp">#define s2n(s,c)    ((c[0]=(unsigned char)(((s)&gt;&gt; 8)&amp;0xff), c[1]=(unsigned char)(((s)    )&amp;0xff)),c+=2)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>s2n</code>も後で使うことになる。つまり変数<code>payload</code>にはクライアントから受け取ったデータに設定されている、<code>length</code>を読み取って格納している。
ここでpayloadには実際に受け取ったデータの長さをチェックして格納されたわけではなく、あくまでもユーザクライアントが送ってきたlengthをそのまま設定していることを覚えておいてほしい。</p>

<p>さて次にレスポンスを返す部分のコードだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="o">*</span><span class="n">bp</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Allocate memory for the response, size is 1 byte</span>
</span><span class='line'><span class="cm"> * message type, plus 2 bytes payload length, plus</span>
</span><span class='line'><span class="cm"> * payload, plus padding</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">buffer</span> <span class="o">=</span> <span class="n">OPENSSL_malloc</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">padding</span><span class="p">);</span>
</span><span class='line'><span class="n">bp</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>bufferはレスポンスを返すための実体となるが、ここでの大きさはtype用の1byteとlength用の2byte、そして実データの長さpayloadで設定された大きさ
に余白(これは16byteに設定されている)を合わせて大きさを確保している。実際に走査するときは<code>bp</code>を通してとなる。
これに対してレスポンスデータを構築してやる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Enter response type, length and copy payload */</span>
</span><span class='line'><span class="o">*</span><span class="n">bp</span><span class="o">++</span> <span class="o">=</span> <span class="n">TLS1_HB_RESPONSE</span><span class="p">;</span>
</span><span class='line'><span class="n">s2n</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">bp</span><span class="p">);</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>リクエストデータと同じようにまず先頭1byteにheart beatのtypeを設定してやる。<code>TLS1_HB_RESPONSE</code>だ。そして先程の <code>n2s</code>の逆を行うマクロ<code>s2n</code>を利用する。
つまり<code>payload</code>に設定されている値を<code>bp</code>の次の2byteに設定する。そして最後の行がキモだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>先ほどのリクエストから得た<code>payload</code>分の長さのデータを<code>pl</code>から<code>bp</code>にコピーしている。これでレスポンスデータを構築したことになる。
これをユーザクライアントに返すことになるわけだ。</p>

<p>さて今回見つかったバグは既にここまでのコードの中にある。</p>

<h2>バグ</h2>

<p>注意して欲しいのは変数<code>payload</code>は<strong>ユーザから与えられたデータ</strong>ということだ。つまりだれでも勝手に設定できるため、<strong>正しい値が入っていない</strong>可能性がある。
この場合の正しさというのはリクエストデータの大きさを正しく反映しているかどうかということだ。
もしこの<code>payload</code>変数(受け取ったデータの先頭から2byteの値)がデータの長さを正しく反映していない、特に実際のデータ長よりも
長い値が<code>payload</code>に設定されているとしたらどうだろう。レスポンスデータを作る以下のコードは正しく動作するだろうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>正しく動作しない。正確にいうと動作に特に影響はないが、余計なものを送ってしまう可能性がある。ここに脆弱性が生まれる。実際の<code>pl</code>に入っているデータは<code>payload</code>に設定されている値よりも短いため、<code>pl</code>から連続したメモリ領域を<code>bp</code>に
コピーしてしまう。そして、このあふれた領域にSSL秘密鍵のデータが載っていたらどうだろうか。OpenSSLプロセスであれば秘密鍵のデータをプロセスメモリ上に乗せているのは
十分考えられることだ。
このコピーされてしまったSSL秘密鍵のデータは<code>bp</code>を経由してそのままクライアントの手にわたってしまうことになる。
もちろん、最近のコンピュータはプロセスあたりのヒープ領域が大きいため、ただちに秘密鍵の値をコピーしてしまうことにはならないが、やはり可能性はゼロではない。
OpenSSLチームは以下のような修正を加えたパッチを配布している。</p>

<h2>修正</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Read type and payload length first */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">16</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* silently discard */</span>
</span><span class='line'>  <span class="n">hbtype</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n2s</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="mi">16</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* silently discard per RFC 6520 sec. 4 */</span>
</span><span class='line'>  <span class="n">pl</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>安易にユーザの設定したpayload lengthを信用するのではなくチェックをおこなってる。読み取るまえにそもそもデータ長がゼロであれば捨てる。
読み取ったあとも、実際のデータ長さよりも設定されているpayload lengthの方が大きい場合はリクエストを破棄するようにしている。
これで本来読み取られてはいけない部分のデータがレスポンスとして返ることはない。
至ってシンプルなFixだけれど、こういったものでも見逃すことはある。今回のように世界的に影響力のあるソフトウェアに対して優れたエンジニア達が
メンテを行っていてもそうなのだ。自分がコードを書くときの戒めともしたい。</p>

<p>以下を教訓としておこう。</p>

<ul>
<li>ちゃんと単体テストを書こう</li>
<li>Cよりももっとsecureな言語を使おう</li>
</ul>


<p>参考: <a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html">Diagnosis of the OpenSSL Heartbleed Bug</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[温泉津にて]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/29/wen-quan-jin-nite/"/>
    <updated>2014-03-29T22:19:19+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/29/wen-quan-jin-nite</id>
    <content type="html"><![CDATA[<p>「おやすみなさい」</p>

<p>なるほど、みんな地元の人達か。温泉津で過ごす夜は少し僕を戸惑わせた。
旅館に付属していない外湯と呼ばれる湯に入りにきたため、地元の人達の憩いの場にお邪魔してしまったようだ。</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-03-29-yunotsu/cat.jpg" />
</div>


<br>


<p>「じゃ、お先です」
「おやすみなさい」</p>

<p>そんなやりとりをして、みんな湯を上がっていく。僕はというとまだ湯につま先さえつけていない。何しろアツいのだ。
よくよく見てみるとみんな10秒くらいで出たり入ったりじゃないか。とりあえず入ってみるか。</p>

<p>少し鉄の味が残るアツい湯は体にいいらしいが、僕の頭にも強い刺激を与えたようだ。
この二、三日もやもやしていた気持ちが露わになってきた。</p>

<!-- more -->


<p>三月は別れの季節という。そうだ多くの学生は卒業をし、新生活の準備をする。進学する者、就職する者、地方に行く者、上京する者、海外に行く者。
特に僕の同級生は大学院に進んだ人が多いから僕のTLは卒業の話題でここしばらく埋められている。行き先は様々だけれど、今ある環境を捨てて新しい
土地にいくという意味では変わらない。</p>

<p>二年前、僕も歩んだ道だ。社会人にとっては「卒業」という機会は当然のことながら黙っているとやってこない。二年前住み始めた家に今も住み、二年前働き始めた会社で今も働いている。
僕は２年前決断をしていた。それは大学院に進学せずに就職するという決断だ。その決断は今でも間違っていたとは思わない。二年前できていなかったことでできるようになったことは数多い。
二年前出会えなかった人とも出会うことができたし、二年間働いた経験というのは自分にとって非常に濃い。そしてなにより僕には新しい家族がいる。実家とは異なる帰るべき家があるのだ。
二年前の自分と、なりたい自分をならべた時に今の自分はその間にいるとそう断言できる。それくらい毎日を大切に生きてきたし、昨日の自分よりも今日の自分の方が「なりたい自分」であるよう
心がけてきた。そんなことは分かっているんだ。だとしてもだ。自分が机を並べた友人達がまた自分と同じように社会に出て働きにでるこの交差点のようなこの二年後の三月になって感じざるを得ない。</p>

<p>あのとき選択しなかったすべての決断を超えてなお余りある成長をしただろうか</p>

<p>大学院に進学することを決断したあとの二年間以上の二年間だっただろうか。留学することを決意したあとの二年間以上の二年間だっただろうか。
他の会社に入るという決意をしたあとの二年間以上の二年間だっただろうか。自分で事業を起こしてみるという決意をしたあとの二年間以上の二年間だっただろうか。</p>

<p>あげればきりがない。自分が選ぶことのできた選択肢、そうだなかった選択肢様々ある。けれども自分が選ばなかった選択肢をとった人たちを羨む気持ちがどこかにあることは確かだ。
社会に出てからも出遅れないように、大学に残った人たちに負けないように、自分で前に進もうと努力をした。そのことは報われただろうか。二年前はそのことが二年後分かると信じていた。</p>

<p>湯を上がるときに口にしようと思っていた言葉があった。</p>

<p>「お先に失礼します」</p>

<p>すると、変わらないトーンで背中から聞こえてきた。</p>

<p>「おやすみなさい」</p>

<p>脱衣所で浴衣を着たけれど、自分の心は丸裸にすることができた。</p>

<p>なりたい自分がいつの間にか見られたい自分になっていた。
どこに進むかよりも前に進むことばかりに目がいく自分になっていた。</p>

<p>火照った体を冷ます三月の風にはどことなく鉄の香りがのっていた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[禅と手段と目的と]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/25/shan-toshou-duan-tomu-de-to/"/>
    <updated>2014-03-25T21:01:59+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/25/shan-toshou-duan-tomu-de-to</id>
    <content type="html"><![CDATA[<p>久しぶりに日本語で書いてみる。
言葉のリズムが日本語でないと掴めない箇所があるので、やっぱり自分の母国語は日本語なんだとつくづく感じた。
言葉のリズムというのはなかなか掴みづらくて、僕の中では「つい口ずさんでみたくなる言葉」が最もリズムのいい言葉だと思っている。一昔前でいうと『<a href="http://www.amazon.co.jp/%E5%A3%B0%E3%81%AB%E5%87%BA%E3%81%97%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84%E6%97%A5%E6%9C%AC%E8%AA%9E-%E6%96%8E%E8%97%A4-%E5%AD%9D/dp/4794210493">声に出して読みたい日本語</a>』なんていうのが流行ったけれど、あれに近いかもしれない。ただ僕の感覚はもっと俗っぽくて巷で流れているくだらないCMソングなんかはわかりやすい「つい口ずさんでみたくなる言葉」なんじゃないかと。</p>

<p>さて、手段の目的化と禅のお話。</p>

<!-- more -->


<p>大抵の場合は生きていく上でそれが長期的であれ、短期的であれ何らかの目的を持っている場合が多い。この大学に入ろう、この大会で優勝を目指そう、会社で出世しよう、お金持ちになろう。
まず目的があって、それを達成するための手段がある。僕は学校や家庭でそれを教わってきたし、友達の横顔や先輩の背中からそれを感じとっていたかもしれない。なんにせよその考えは今でも僕の頭に染み付いている。</p>

<p>特に「練習と本番」は人生の初期において最も端的に「手段と目的」を具体化させてくれるもののひとつだと僕は思う。今まで生きてきて何度もこの「練習と本番」のサイクルを味わったし、それは今でも変わっていない。何か自分にとって特別な「本番」を用意して、それに向かって具体的に「練習」をしていくというのは、何をしていいかわからない自分のような子供にとっては生き方の答えを教えてくれるような黄金のサイクルに見えた。</p>

<p><strong>ただ僕は本番が嫌いだった。</strong></p>

<p>僕にとっては本番は二の次だった。結果を出すためのプレッシャーや緊張、結果を見届けて興奮や挫折を味わうこともある。いい結果が出れば嬉しいし、そうでなければ落ち込んだりもする。
<strong>そのことが嫌だった。</strong> 結果を出すことよりも、毎日続けられたことが楽しかったし自分にとって最も充実した時間になっていた。結果なんかでてしまってその毎日が終わってしまうことが残念でならない。もちろん毎日続けられたのは「本番」という締め切りがあったからであって、先の見えないイバラの道を血を滴らせながら進む勇気は僕にはない。終わりが分かっていたから続けられた。毎日、何時間も勉強できたり、練習できたのは本番が用意されていていつか終わることが分かっていたからだ。自らの体力や気力に限りがあることが分かっていて、それが本番まで持つと分かっていたからだ。</p>

<p>だからこそ、本番で結果を与えられるという形ではなく僕は僕自身にこれからのための気力やバイタリティーを与えるという形で毎日の練習が報われて欲しかった。</p>

<p>僕にとっての練習は本番で成果を出すための手段ではなく、毎日それ自体が本番だった。練習それ自体が目的だった。毎日机に向かうこと、毎日楽器を吹くこと、毎日泳ぐこと。
といっても練習している時に本番なんて来ないでほしいと思って練習しているわけではなく、本番で自分の臨んだ通りのパフォーマンスが出せるように毎日努力してきた。<strong>ただその事自体が楽しかった。</strong> 結果が出た時も楽しい。ただそれは特別その瞬間が幸福というわけではないような気がする。練習から本番までに感じる幸福は本当はずっと一様なんじゃないだろうか。毎日が同様に楽しいらしい。もし本番で結果がでた瞬間が一番幸福に感じられたとしたらそれは今まで頑張ってきたからじゃないだろうか。一様分布の累積密度関数の値は本番直前に最大値をとる。</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-03-25-zen/graph2.png" />
</div>


<p>実は答えは800年も前から出ていたのかもしれない。<a href="http://www.amazon.co.jp/%E7%A6%85%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89-%E3%83%93%E3%82%AE%E3%83%8A%E3%83%BC%E3%82%BA%E3%83%BB%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89-%E3%82%B5%E3%83%B3%E3%82%AC%E6%96%B0%E6%9B%B8-%E9%88%B4%E6%9C%A8%E4%BF%8A%E9%9A%86/dp/4905425166]">禅マインド ビギナーズ・マインド</a>は以前読んだ<a href="http://wired.jp/2013/12/29/enlightenment-engineers-vol9/">Wiredの記事</a>に興味を持って手にとってみた本。</p>

<p>そこにはこんなことが書いてあった。</p>

<blockquote><p><strong>坐禅とはなにかのためになにかをするわけではありません</strong></p></blockquote>

<p>只管打座はただ座るという意味。禅の教えのひとつだ。何か目的があってそれを達成するために何かを行うというわけではなく、ただ何かをするということ自体に価値をおく考えが禅の根底にある。ただご飯を食べる、ただ歩く、ただ本を読む、ただ座る。こんな考え古臭いなと思うとそうとも思えない。<a href="http://mirakui-diary.hatenablog.com/entry/2014/03/14/145448">わくわくパンダさん</a>は「人生の本番は人生のどの瞬間においても常にその瞬間にしかない」と言っているし、<a href="http://blog.livedoor.jp/kensuu/archives/54215643.html">けんすうさん</a>も日本には「手段のためなら目的を選ばない」というような考えがあると書いてる。こういった考えが大勢占めてきたとも思わないし、正解だとも思わない。ただその逆もそうなんだ。目的があってそこに向かってひたすら努力するという生き方が正解というわけでもない。ただ毎日を真剣に生きる。それが何につながるという考えもなしに生きてみてもいい。僕自身はハイブリッドに生きてみたい。目的はあってもいいし、なくてもいい。目的地がある旅も、ぶらぶら散歩もきっと両方楽しめるだろう。けれど人生で過ごす大半の時間は「練習時間」だ。</p>

<p>楽しい練習ができるに越したことはない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next Tile on Tempai]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/19/next-tile-on-tempai/"/>
    <updated>2014-03-19T22:57:59+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/19/next-tile-on-tempai</id>
    <content type="html"><![CDATA[<p>I tried <a href="http://www.itmedia.co.jp/enterprise/articles/1004/03/news002_2.html">this problem</a>.</p>

<p>Your program receives the hand of mahjong. Returns the &ldquo;Waiting style&rdquo; of this hand.
But there are some conditions as below.</p>

<ul>
<li>There are no <em>Jihai</em>, only <em>Manzu</em></li>
<li>Make <em>Juntsu</em>, <em>Kohtsu</em> and <em>Head</em></li>
<li>Regard different order waiting as the same</li>
<li>If there are no waiting, no output</li>
</ul>


<!-- more -->


<p>My source code are pushed <a href="https://github.com/Lewuathe/java-GoF/blob/master/AtCoder/MahjongWait/src/Main.java">this repository</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by Kai Sasaki on 3/19/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span> <span class="n">tiles</span><span class="o">[],</span> <span class="kt">boolean</span> <span class="n">isHead</span><span class="o">,</span> <span class="n">String</span> <span class="n">ans</span><span class="o">,</span> <span class="kt">int</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// In order to remove practical same hands,</span>
</span><span class='line'>              <span class="c1">// this operation should be done before bigger values</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// In order to remove practical same hands,</span>
</span><span class='line'>              <span class="c1">// this operation should be done before finding head</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">isHead</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Find *Kohtsu*</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tmp</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tiles</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>                                                                                                                                                                                               <span class="n">String</span> <span class="n">tmpAns</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">+</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;(%d%d%d)&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="n">search</span><span class="o">(</span><span class="n">tmp</span><span class="o">,</span> <span class="n">isHead</span><span class="o">,</span> <span class="n">tmpAns</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// In order to remove practical same hands,</span>
</span><span class='line'>              <span class="c1">// this operation should be done before bigger values</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// In order to remove practical same hands,</span>
</span><span class='line'>              <span class="c1">// this operation should be done before finding head</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">isHead</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Find *Juntsu*</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tmp</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tiles</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">tmpAns</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">+</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;(%d%d%d)&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>                <span class="n">search</span><span class="o">(</span><span class="n">tmp</span><span class="o">,</span> <span class="n">isHead</span><span class="o">,</span> <span class="n">tmpAns</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isHead</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Find head</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tmp</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tiles</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">tmpAns</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">+</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;(%d%d)&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="n">search</span><span class="o">(</span><span class="n">tmp</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">tmpAns</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// No more mentsu</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">oneCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">twoCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">sum</span> <span class="o">+=</span> <span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">oneCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">twoCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 000100000</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oneCount</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;[%d]&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 000001100</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oneCount</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="s">&quot;[12]&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="s">&quot;[89]&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;[%d%d]&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">twoCount</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;[%d%d]&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Receive string that represents hand values</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">tiles</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">9</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Initialization</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Setting tiles array</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">tile</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">hand</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>            <span class="n">tiles</span><span class="o">[</span><span class="n">tile</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">search</span><span class="o">(</span><span class="n">tiles</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the simple depth first search algorithm. Ths main point of this code is in the
main method. I expressed the data structure that represents <em>Hand</em> as the interger array.
Each integer corresponds to the count of each tile. So in order to calculate the waiting tile,
in this case, all you have to know is the count of each tile. With this data structure, you don&rsquo;t
need to retain complex structure. And also the operation such as finding <em>Juntsu</em> and so on is easy
to execute bacause only increment or decrement of each value of this array.</p>

<p>It took me a long time but thanks to this training, a search algorithm such as <a href="http://en.wikipedia.org/wiki/Depth-first_search">DFS</a>
is no more alien to me. It&rsquo;s friend!</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marble Problem]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/18/marble-problem/"/>
    <updated>2014-03-18T21:45:14+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/18/marble-problem</id>
    <content type="html"><![CDATA[<p>I tried this problem.</p>

<h2>Marble</h2>

<p>There are boxes infinitely in a straight line. Each box is labeled from left side &hellip;,-2,-1,0,1,2,&hellip; to the right side.
Now <em>R</em> red marbles are in the -100th box. In the same way, <em>G</em> green mables are in the 0th box and <em>B</em> blue mables are in the 100th box.
There no other marbles in all boxes. All boxes should have one marble at most.
Repeat below process and make the number of marbles of each each at most one.</p>

<ul>
<li>Select one marble, move it left box or right box.</li>
<li>However one box must not have more than two marbles that has different colors each other</li>
</ul>


<p>Calculate minimum required steps.</p>

<!-- more -->


<p>I wrote below code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by sasakiumi on 3/18/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">g</span><span class="o">),</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">steps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">steps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">pre</span> <span class="o">=</span> <span class="n">steps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">steps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pre</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">steps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">r</span><span class="o">)</span> <span class="o">+</span> <span class="n">steps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">g</span><span class="o">)</span> <span class="o">+</span> <span class="n">steps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK. I understand this code does not put the case of 100 marbles that is same color into consideration.
If there are 200 red marbles, this code does not work properly. But I have not found effective way to solve all cases.
I will update this problem later. If you have any good idea, please let me know.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM144 Div1]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/17/srm144-div1/"/>
    <updated>2014-03-17T21:57:38+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/17/srm144-div1</id>
    <content type="html"><![CDATA[<p>After a long time, I returned to <a href="http://www.topcoder.com/">TopCoder</a>.
I forgot to write algorithm for programming contest such as TopCoder. But previously
I realized that it is so important for me to write accurate and fast algorithm within finite time.
In order to improve my programming skill again, I returned back to the TopCoder.</p>

<!-- more -->


<p>SRM is a little hart to me, as first, I tried some practices. Today I solved SRM144 binary code problem.
This problem decode messages recursively. For example, when you get the message <code>"123210122"</code>, this is encode of
<code>"011100011"</code>. Suppose the first message is P, and second is Q. Now below equation is realized.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P[i] = Q[i-1] + Q[i] + Q[i+1]</span></code></pre></td></tr></table></div></figure>


<p>With this recusive rule, you have to decode given message. My code is below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryCode</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">decode</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Two answers should be solved</span>
</span><span class='line'>      <span class="c1">// Each answer is correspond to Q[0] = 0 and Q[0] = 1 case.</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">Integer</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Boolean</span> <span class="n">isOut</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Calculate two cases</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// In the case of negative value is received, answer should be &quot;NONE&quot;</span>
</span><span class='line'>            <span class="n">isOut</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// For improve speed performance, I use StringBuffer</span>
</span><span class='line'>            <span class="n">StringBuffer</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// First and second factor cannot be put on inside loop bacause these are not the sum of three factors</span>
</span><span class='line'>            <span class="n">p</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">start</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">))</span> <span class="o">-</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>            <span class="n">p</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">p1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Decode each digit</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">message</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Integer</span> <span class="n">d</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span> <span class="o">-</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span> <span class="o">-</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">j</span><span class="o">));</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;NONE&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">isOut</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">p</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">d</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Last digit is not need to retained</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(!</span><span class="n">isOut</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// This is guard. But I am not satisfied with this line :(</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;2&#39;</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;3&#39;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;NONE&quot;</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrote this code about 30 minutes. It is not enough to fight on SRM. And in addition to this, I am not satisfied with my algorithm expecially
last clause. I don&rsquo;t want to write exceptional logic as possible. If anyone write code about this problem, please inform me and give me a chance to
look into your code.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forget Grief, Keep Data]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/11/forget-grief-keep-data/"/>
    <updated>2014-03-11T19:48:31+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/11/forget-grief-keep-data</id>
    <content type="html"><![CDATA[<p>Three years ago, I walked around Shinjuku at Tokyo.
I had not yet obtained informal decision from current company for which I now work. So I walked around Shinjuku
for job hunting as pre-graduate student called &ldquo;Shukatsu-sei&rdquo; in Japanese.</p>

<p>First I wondered what happened. Then I escaped from the building shook violently.
In spite of the pleasant friday always, those who were enjoying before the weekend were not the same to the ones
of ordinary day. 2011 Tōhoku earthquake and tsunami struck Japan, my homeland.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-03-11-forget-grief/eye_catch.jpg" />
</div>


<br>




<!-- more -->


<p>All media in Japan are filled with the memorial of that disaster today.
They said &ldquo;Never forget <em>that day</em>&rdquo; or &ldquo;Hang over the memory to the next generation&rdquo;.
These real intentions seem to me as the power that does not allow me to forget the grief of <em>that day</em>.
Of course from the point of view of disaster prevention, information obtained through such misery disaster has to be kept in our society.
But all needed to be kept for the future are concrete data, aren&rsquo;t it?</p>

<p>I think grief doesn&rsquo;t help us recovering from the mental injury completely. Furthermore, it is infectious
to all over our country. So this anniversary compelled us be in deep sorrow. Never allows us to laugh, smile
and joy. Of course I understand that the victims cannot avoid sinking to sorrow. But is this emotion need to be spread through
radio, TV and internet? If anything, it is better to make them smile to recovering from deep sorrow as much as possible.</p>

<p>It is very important for progressing to the future to laugh. Above all recovering from this cruel
disaster. As well as grief, a smile is also infectious. It has the power of making our country better place
for the future. So I want to spread smile rather than grief.</p>

<p>The media might has the intention of keeping the memory in order to develop the disaster prevention system or making people
keep doing support affected area for a long time. I agree with this attempt somewhat because all people tend to forget anything.
But all what is necessary for developing disaster prevention system to keep might concrete data obtained from the situation of those days, isn&rsquo;t it?</p>

<p>How high the <em>tsunami</em> was?</p>

<p>How many building were collapsed by quake?</p>

<p>What kind of resources became a shortage just after the disaster?</p>

<p>Which nuclear reactor was more fault-torerant, <a href="http://en.wikipedia.org/wiki/Boiling_water_reactor">BWR</a> or <a href="http://en.wikipedia.org/wiki/Pressurized_water_reactor">PWR</a>?</p>

<p>These data can be used for making the scheme to stand up to the disaster that has same scale to 3.11.
Such research is now ongoing and will be kept going. These big data should be stored in the reusable state
and be opened to all people who are not affected by this disaster.
So keep data in your mind not grief. Whole my country should turn
toward the bright future where all people are smile. I think this future is not what comes to us as the result of all
recovery process, but it exists on the way to the future. So it is now.
Smile is not what came to us someday but what should be kept spreading whole my country today. So it is now.</p>

<p>Three years has passed after that 3.11 earthquake. It is the time to forget all grief from our heart.
What should be kept in our heart is only data. With these practical data, we can construct the country that is unafraid
of next disaster which might come to our homeland again. Let&rsquo;s spread these knowledge all over the world. Disasters occur on a daily basis.
While I do it this way, People affected by misery disasters currently are seeking these knowledge today.
This is urgent. We have no time to spread grief and weaken our life force.</p>

<p>Forget grief, Keep data.</p>

<p>Our country surely gets better with smile.
Our world surely gets better with smile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference Between PCA and dA]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/10/difference-between-pca-and-da/"/>
    <updated>2014-03-10T22:08:40+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/10/difference-between-pca-and-da</id>
    <content type="html"><![CDATA[<p>Today I gave a presentation about Deep Learning in my office. Through this presentation, I felt
the difficulty of explanation about mathematic notion without equations. Complex concept should
be attached with some equations. Simplicity was one of the biggest purpose of my presentaion.</p>

<p>Anyway, there is a question I cannot answer clearly.</p>

<blockquote><p>What&rsquo;s the difference between <a href="http://en.wikipedia.org/wiki/Principal_component_analysis">PCA</a> and <a href="http://en.wikipedia.org/wiki/Nonlinear_dimensionality_reduction#Autoencoders">Denoised Autoencoder</a>?</p></blockquote>

<p>It was a difficult question for me. So I studied what distinguished PCA and dA primaly.</p>

<!-- more -->


<h2>PCA</h2>

<p>PCA is an abbreviation of principal component analysis. This algorithm is used when you want to reduce the degree of the input data.
Machine learning algorithms might work faster with low degree data. If you don&rsquo;t have a firm reason for using original data, it is better
to reduce the degree from a point of view of performance. In order to work properly with reduced data, processed data should be sparse because
each data point keeps original characteristics for training a valid model. There are two ways mainly, one is the based on maximizing of variance
of original data. This method maximizes below covariance matrix.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-03-10-pca-and-sda/covariance.png" />
</div>


<p>This optimization calculation is achieved by obtaining eigenvectors. It is a little slow because of handling matrix.
The second method is based on error minimization way. In advance you define degree reduced data and minimize its difference.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-03-10-pca-and-sda/error.png" />
</div>


<p>Both method have below features.</p>

<ul>
<li>Making straight projection</li>
<li>Irreversible</li>
<li>Extracting characteristics</li>
<li>O(D<sup>3</sup>)</li>
</ul>


<h2>Denoised autoencoder</h2>

<p>Denoised autoencoder is a kind of autoencoder which adds some noise on original data delibarately. Through this process this model
is capable obtaining proper weight for restoring original data. This model is used mainly the field of deep learning.
This autoencoder has below characteristics.</p>

<ul>
<li>Making model parameter</li>
<li>Reversible</li>
<li>Extracting characteristics</li>
<li>O(D<sup>2</sup>)</li>
</ul>


<h2>Conclusion</h2>

<p>I think the most essential difference between PCA and denoised autoencoder is reversibility. PCA cannot restore original data bacause
it losts the distance from the <a href="http://users.ics.aalto.fi/praiko/papers/pca_iconip/node3.html">principal subspace</a>. On the other hands,
denoised autoencoder keeps its weight matrix inside own model. So it requires only adding transpose matrix of this weight for restoring.
Please let there be no misunderstanding of usability of PCA, the purpose of PCA is not restoring original data. It is improving calculation cost through
degree reduction. Denoised autoencoder must have weight parameter for restoring original data because its output become the input of next layer.
So it has the ability to restore original data.</p>

<p>Though these two algorithms looks same at the first sight, the purposes are different. This produces the different features between PCA and denoised
autoencoder.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logistics Regression With Sparse Vector]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/09/logistics-regression-with-sparse-vector/"/>
    <updated>2014-03-09T19:54:25+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/09/logistics-regression-with-sparse-vector</id>
    <content type="html"><![CDATA[<p>In my project I have to develop a model that is capable of predicting the count of page view
from sparse vector data such as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
</span><span class='line'> 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]</span></code></pre></td></tr></table></div></figure>


<p>However I found it was difficult to make a model which can be applied to practical use case. From sparse vector, my current model
doesn&rsquo;t look trained sufficiently. I used <a href="http://scikit-learn.org/stable/index.html">scikit-learn</a> in python.</p>

<!-- more -->


<p>My current code is below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">svm</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">rand</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">RandomState</span><span class="p">(</span><span class="mi">1234</span><span class="p">)</span>
</span><span class='line'>    <span class="n">xs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">ys</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Train&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">30</span><span class="p">):</span>
</span><span class='line'>      <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">      x is a sparse vector generated from binomial distribution</span>
</span><span class='line'><span class="sd">      x has a 1 vector generally speaking</span>
</span><span class='line'><span class="sd">     &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">rand</span><span class="o">.</span><span class="n">binomial</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>        <span class="n">xs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">      y is obtained from gaussian distribution which has 0.7 as mean value</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="n">rand</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">clf</span> <span class="o">=</span> <span class="n">svm</span><span class="o">.</span><span class="n">SVR</span><span class="p">()</span>
</span><span class='line'>  <span class="c"># Train data</span>
</span><span class='line'>    <span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Test&quot;</span>
</span><span class='line'>    <span class="n">ts</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">rand</span><span class="o">.</span><span class="n">binomial</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="o">=</span><span class="mf">0.01</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Through this process I can only get these results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span> <span class="mf">0.7507838</span>   <span class="mf">0.7507838</span>   <span class="mf">0.75058871</span>  <span class="mf">0.7507838</span>   <span class="mf">0.75058871</span>  <span class="mf">0.75058871</span>
</span><span class='line'>  <span class="mf">0.73136874</span>  <span class="mf">0.7507838</span>   <span class="mf">0.75058871</span>  <span class="mf">0.75058871</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this result doesn&rsquo;t have valid significance for predicting. All values look the same to me!
Simple support vector machine might not be suitable to predict with sparse vector data. But I have no idea
how to make alternate model that can be constructed with sparse vectors. Is there anyone who have a good idea or
a paper which has proper algorithm for this case? I want to know the algorithm which can construct better regression
model from sparse vector. Please let me know that.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memento Pattern in Java]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/08/memento-pattern-in-java/"/>
    <updated>2014-03-08T00:02:29+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/08/memento-pattern-in-java</id>
    <content type="html"><![CDATA[<p>Recently, I implemented some design patterns following <a href="http://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797327030">this book</a>. This book introduces 23 design patterns that all programmers should know when you write according to OOP instructions. So now I want to write this article about some of these patterns and explain these. All codes that used in this article are put <a href="https://github.com/Lewuathe/java-GoF/tree/master/Memento">here</a></p>

<!-- more -->


<h2>What is Memento pattern?</h2>

<p>Memento pattern is used for recording past statuses and for recovering susequently. For example when you use text editor such as vim or emacs, do you use <code>undo</code>?
Why do you think this <code>undo</code> command can perform? As one way, all statuses(sometimes not all) are recorded as a type of object. Then you can recover this object
to use this recovered data in your application. Let&rsquo;s picking up game example, examine the structure of memento pattern.</p>

<h2>Main</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">game.Gamer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">game.Memento</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Gamer</span> <span class="n">gamer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gamer</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Memento</span> <span class="n">memento</span> <span class="o">=</span> <span class="n">gamer</span><span class="o">.</span><span class="na">createMemento</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;=== &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Current: &quot;</span> <span class="o">+</span> <span class="n">gamer</span><span class="o">);</span>
</span><span class='line'>            <span class="n">gamer</span><span class="o">.</span><span class="na">bet</span><span class="o">();</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Money: ¥&quot;</span> <span class="o">+</span> <span class="n">gamer</span><span class="o">.</span><span class="na">getMoney</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">gamer</span><span class="o">.</span><span class="na">getMoney</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">memento</span><span class="o">.</span><span class="na">getMoney</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Save current state&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">memento</span> <span class="o">=</span> <span class="n">gamer</span><span class="o">.</span><span class="na">createMemento</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">gamer</span><span class="o">.</span><span class="na">getMoney</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">memento</span><span class="o">.</span><span class="na">getMoney</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Restore previous state&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">gamer</span><span class="o">.</span><span class="na">restoreMemento</span><span class="o">(</span><span class="n">memento</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On every turn, a gamer bets and gets money or some fruits. If you get more money at the last of game you win. It&rsquo;s very simple.
Please pay attention to line 7. Mement pattern is used there. This memento object is used when gamer can get more money or reduce
his money to half of previous one. For saving, call <code>gamer.createMemento()</code> and for restoring, call <code>gamer.restoreMemento()</code>.
All concepts that are included in memento pattern are these. It is easy to understand this pattern. Do you think you can write this pattern
in your production code tomorrow? Please try it.</p>

<p>As a reference, memento class is also placed here. But it is not core concept of memento pattern. You can arrange this concrete logic for your use
if you could only save and restore statuses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">game</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Memento</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">money</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ArrayList</span> <span class="n">fruits</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMoney</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">money</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Memento</span><span class="o">(</span><span class="kt">int</span> <span class="n">money</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">money</span> <span class="o">=</span> <span class="n">money</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fruits</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addFruit</span><span class="o">(</span><span class="n">String</span> <span class="n">fruit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fruits</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">fruit</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span> <span class="nf">getFruits</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">List</span><span class="o">)</span><span class="n">fruits</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is there any unclear stuff? Please look into <a href="https://github.com/Lewuathe/java-GoF/tree/master/Memento">this codes</a>.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Is HashMap Written in Java]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/06/how-is-hashtable-written-in-java/"/>
    <updated>2014-03-06T22:22:04+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/06/how-is-hashtable-written-in-java</id>
    <content type="html"><![CDATA[<p>Here recently, I have a chance to read Java core API, expecially <em>HashMap</em>.
Usually, I use HashMap paying no attention to, but this code reading brought many things to me.
I can understand that how HashMap is written in Java and more this is very simple than I expected.
So in this post, I&rsquo;d like to introduce some ideas and code used in <code>java.util.HashMap</code>.</p>

<!-- more -->


<h2>Constructor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">HashMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// DEFAULT_INITIAL_CAPACITY is 16</span>
</span><span class='line'>      <span class="c1">// DEFAULT_LOAD_FACTOR is 0.75f</span>
</span><span class='line'>      <span class="k">this</span><span class="o">(</span><span class="n">DEFAULT_INITIAL_CAPACITY</span><span class="o">,</span> <span class="n">DEFAULT_LOAD_FACTOR</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is <code>HashMap</code> constructor. <code>DEFAULT_INITIAL_CAPACITY</code> is the default size of array. This value is set as below.
<code>DEFAULT_LOAD_FACTOR</code> is the ratio of the number of put items to maximum capacity of hash table. Default value is 0.75f.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="c1">// aka 16</span>
</span></code></pre></td></tr></table></div></figure>


<p>Only 16 items can be retained in HashMap. What happen if this size become insufficient for your use?
In every code of adding item, this line was added.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">((</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">resize</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">key</span><span class="o">)</span> <span class="o">?</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">bucketIndex</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Threshold means the next size to which this table will resized. So if there are more items than an array can keep,
array is resized by <code>resize</code> and hash value is calculated based on the new table size. <code>resize</code> is defined as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">newCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Entry</span><span class="o">[]</span> <span class="n">oldTable</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">oldCapacity</span> <span class="o">=</span> <span class="n">oldTable</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">==</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Setting next size to max</span>
</span><span class='line'>        <span class="n">threshold</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Entry</span><span class="o">[]</span> <span class="n">newTable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">[</span><span class="n">newCapacity</span><span class="o">];</span>
</span><span class='line'>  <span class="c1">// move all items to new hash table</span>
</span><span class='line'>    <span class="n">transfer</span><span class="o">(</span><span class="n">newTable</span><span class="o">,</span> <span class="n">initHashSeedAsNeeded</span><span class="o">(</span><span class="n">newCapacity</span><span class="o">));</span>
</span><span class='line'>    <span class="n">table</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class='line'>    <span class="n">threshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">newCapacity</span> <span class="o">*</span> <span class="n">loadFactor</span><span class="o">,</span> <span class="n">MAXIMUM_CAPACITY</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create new table, and transfer all items to new table. It is simple, isn&rsquo;t it?
So keep going to <code>put</code>. the core algorithm of this method is hashing key.</p>

<h2>Put</h2>

<p>Put code is written as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">table</span> <span class="o">==</span> <span class="n">EMPTY_TABLE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">inflateTable</span><span class="o">(</span><span class="n">threshold</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>       <span class="k">return</span> <span class="nf">putForNullKey</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// Get hash value of this key object</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// Get index in the hash table, so called bucket</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">// Search the item that has same key object</span>
</span><span class='line'>       <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">recordAccess</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If there no item that match the given key, create new entry.</span>
</span><span class='line'>    <span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'>    <span class="n">addEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If table is not created yet, make it by using <code>inflateTable</code>. Then hasing with <code>hash</code>. <code>hash</code> is defined as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="n">Object</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hashSeed</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">h</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">sun</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">Hashing</span><span class="o">.</span><span class="na">stringHash32</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">h</span> <span class="o">^=</span> <span class="n">k</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This function ensures that hashCodes that differ only by</span>
</span><span class='line'>    <span class="c1">// constant multiples at each bit position have a bounded</span>
</span><span class='line'>    <span class="c1">// number of collisions (approximately 8 at default load factor).</span>
</span><span class='line'>    <span class="n">h</span> <span class="o">^=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">12</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">h</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the key object is <code>String</code>, <code>sum.misc.Hashing.stringHash32</code> is used as hashing algorithm. In the other case, make use of <code>Object.hashCode()</code>.
This method is declared in <code>Object</code> class. So all objects in Java should implements this method or defined already super classes.
In both cases, <code>k.hashCode()</code> can be called safely. In order to make sure that hash value is unique in hash table, some bit calculations
are operated on <code>h</code>. So now, you can get hash value correspond to key object.</p>

<p>Please pay attention to the data structure used for storing items. This is implemented as chaining pattern.
Back to <code>put</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">recordAccess</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'><span class="n">addEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After getting index for hash value with <code>indexFor(hash, table.length)</code>, take a chain from correspond bucket item.
<code>table[i]</code> is the first item of this linked list. In the case of existing the value which has same key, update value.
If there are overlapped items in this table, linked list has multiple items. To reduce calculation cost, new item is prepend to this list in <code>addEntry</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">addEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resize</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">key</span><span class="o">)</span> <span class="o">?</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">bucketIndex</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">createEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">bucketIndex</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>createEntry</code> prepends this put value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">createEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">];</span>
</span><span class='line'>  <span class="c1">// hash: hash value that belongs to new entry</span>
</span><span class='line'>  <span class="c1">// key: key object that belongs to new entry</span>
</span><span class='line'>  <span class="c1">// value: content value that belongs to new entry</span>
</span><span class='line'>  <span class="c1">// e: next node that is append to new entry item</span>
</span><span class='line'>    <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">&lt;&gt;(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="n">size</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Entry</code> constructor receives its hash value, key value, content value and next node for linked list.
So in this line, new object which is put on the hash table is prepend to the line of linked list.
It will be the first object of the list.</p>

<h2>Get</h2>

<p>When you want to get target item that is correspond to your key, how is it works?</p>

<p>Now, <code>getEntry</code> is called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">getEntry</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">)];</span>
</span><span class='line'>      <span class="c1">// Search through linked list</span>
</span><span class='line'>        <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">))))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Under given key, this code do linear search through linear list in the bucket item. Inside the list,
returns the item which matches a given key object. This is simpler than I expected, but thanks to this code
I can understand how <code>HashMap</code> works in Java programming language.</p>

<p>This code reading is so fun to me that I want to keep this activity as possible.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TopCoder With IntelliJ IDEA]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/03/topcoder-with-intellij-idea/"/>
    <updated>2014-03-03T21:45:57+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/03/topcoder-with-intellij-idea</id>
    <content type="html"><![CDATA[<p>When you try <a href="http://www.topcoder.com/">TopCoder</a>, as you know, IDE is one of the most efficient options
to write accurate code very fast. So far, <a href="https://www.eclipse.org/">Eclipse</a> is the most famous IDE in this field.
However today, I know <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> can also be the great editor to fight it out.
So I try to install TopCoder plugin into my IntelliJ IDEA which is called <a href="https://github.com/fadeyev/intellijcoder">IntelliJCoder</a>.</p>

<!-- more -->


<h2>Install</h2>

<p>By using plugin manager embedded to IntelliJ IDEA, you install IntelliJCoder. Today, its version is v1.6.
And restart your IDE.</p>

<p><img src="http://lewuathe.github.io/images/posts/2014-03-03-intellijcoder/plugin_install.png" alt="plugin_install" /></p>

<h2>Launch Arena</h2>

<p><img src="http://lewuathe.github.io/images/posts/2014-03-03-intellijcoder/topcoder_icon.png" alt="plugin_install" /></p>

<p>You can see TopCoder icon inside the toolbar. If you cannot see toolbar itself, click view menu and select toolbar.
Click this icon, and TopCoder arena will be launched. It might takes some minutes.</p>

<p><img src="http://lewuathe.github.io/images/posts/2014-03-03-intellijcoder/toolbar.png" alt="toolbar" />
<img src="http://lewuathe.github.io/images/posts/2014-03-03-intellijcoder/launch_arena.png" alt="launch_arena" /></p>

<h2>Open problems</h2>

<p>Ok now, let&rsquo;s solve any problems. In the proactive room, select one problem as you like from SRM.
Select problem, then you can see TopCoder simple editor. If you use any language except for Java, you should select Java.
And sckelton codes are written into your IntelliJ IDEA automatically. Now it&rsquo;s the time to solve problem. Hack it!</p>

<p><img src="http://lewuathe.github.io/images/posts/2014-03-03-intellijcoder/open_problem.png" alt="open_problem" /></p>

<h2>Test and Submit</h2>

<p>Suprisingly, you can also run test codes generated from this plugin. When you build this code in IntelliJ IDEA, the test codes based on problem examples
are run. So it is easy to confirm whether your code are correct or not before submitting it.
Compiling and Submitting is the same way to ordinary one. Definitely you can solve problems faster than your rivals with this plugin.</p>

<p><img src="http://lewuathe.github.io/images/posts/2014-03-03-intellijcoder/run_test.png" alt="run_test" /></p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Handler Cannot Be Called in Php Extension]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/02/oobject-handler-cannot-be-called-in-php-extension/"/>
    <updated>2014-03-02T00:38:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/02/oobject-handler-cannot-be-called-in-php-extension</id>
    <content type="html"><![CDATA[<p>I have a problem.</p>

<p><a href="http://stackoverflow.com/questions/22113672/object-handler-cannot-be-called-in-php-extension">object handler cannot be called in php extension</a></p>

<p>I am developing PHP extension. However, I am not sufficient familiar with PHP extension.
So in this time, I have no answer how to solve this problem by myself.</p>

<!-- more -->


<p>I cannot call destructor of my class written in C++(in below code, <code>foo</code> is that. In my inspection, I know PHP_MINIT_FUNCTION was called definitely. Inside of PHP_MINIT_FUNCTION, set code for create_object might not be done properly. When deleting foo, foo_free_strage should be called, but not called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">static</span> <span class="nx">zend_class_entry</span><span class="o">*</span> <span class="nx">foo_ce</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="nx">zend_object_handlers</span> <span class="nx">foo_object_handlers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">void</span> <span class="nx">foo_free_storage</span><span class="p">(</span><span class="nx">void</span> <span class="o">*</span><span class="nx">object</span> <span class="nx">TSRMLS_DC</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">std</span><span class="o">::</span><span class="na">cout</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;php_foo destracter&quot;</span> <span class="o">&lt;&lt;</span> <span class="nx">std</span><span class="o">::</span><span class="na">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo_object</span><span class="o">*</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">(</span><span class="nx">foo_object</span><span class="o">*</span><span class="p">)</span><span class="nx">object</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">delete</span> <span class="nx">obj</span><span class="o">-&gt;</span><span class="na">foo_pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">efree</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">zend_object_value</span> <span class="nx">foo_create_handler</span><span class="p">(</span><span class="nx">zend_class_entry</span> <span class="o">*</span><span class="nx">type</span> <span class="nx">TSRMLS_DC</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">std</span><span class="o">::</span><span class="na">cout</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;php_foo handler&quot;</span> <span class="o">&lt;&lt;</span> <span class="nx">std</span><span class="o">::</span><span class="na">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">zval</span> <span class="o">*</span><span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">zend_object_value</span> <span class="nx">retval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">foo_object</span> <span class="o">*</span><span class="nx">obj</span> <span class="o">=</span> <span class="p">(</span><span class="nx">foo_object</span> <span class="o">*</span><span class="p">)</span><span class="nx">emalloc</span><span class="p">(</span><span class="nb">sizeof</span><span class="p">(</span><span class="nx">foo_object</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">memset</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">sizeof</span><span class="p">(</span><span class="nx">foo_object</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">obj</span><span class="o">-&gt;</span><span class="na">std</span><span class="o">.</span><span class="nx">ce</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">retval</span><span class="o">.</span><span class="nx">handle</span> <span class="o">=</span> <span class="nx">zend_objects_store_put</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="k">NULL</span><span class="p">,</span> <span class="nx">foo_free_storage</span><span class="p">,</span> <span class="k">NULL</span> <span class="nx">TSRMLS</span>    <span class="nx">_CC</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">retval</span><span class="o">.</span><span class="nx">handlers</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">foo_object_handlers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">retval</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initialization</span>
</span><span class='line'><span class="nx">PHP_MINIT_FUNCTION</span><span class="p">(</span><span class="nx">bar</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">zend_class_entry</span> <span class="nx">ce</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">INIT_CLASS_ENTRY</span><span class="p">(</span><span class="nx">ce</span><span class="p">,</span> <span class="s2">&quot;Foo&quot;</span><span class="p">,</span> <span class="nx">foo_functions</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">foo_ce</span> <span class="o">=</span> <span class="nx">zend_register_internal_class</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ce</span> <span class="nx">TSRMLS_CC</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">foo_ce</span><span class="o">-&gt;</span><span class="na">create_object</span> <span class="o">=</span> <span class="nx">foo_create_handler</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">foo_object_handlers</span><span class="p">,</span> <span class="nx">zend_get_std_object_handlers</span><span class="p">(),</span> <span class="nb">sizeof</span><span class="p">(</span><span class="nx">zend_object</span>    <span class="nx">_handlers</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">foo_object_handlers</span><span class="o">.</span><span class="nx">clone_obj</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>My development enviromnment is as listed below.</p>

<ul>
<li>CentOS [x86_64]</li>
<li>gcc 4.4.7</li>
</ul>


<p>Could someone lets me know the solution of this problem?
If someone has any advice to me, please inform <a href="https://twitter.com/Lewuathe">@Lewuathe</a>.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Actor Model With Node Cluster]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/01/actor-model-with-node-cluster/"/>
    <updated>2014-03-01T02:19:34+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/01/actor-model-with-node-cluster</id>
    <content type="html"><![CDATA[<p>If you want to implement asynchronous parallel system with nodejs, the best and easiest way might be using <a href="http://nodejs.org/api/cluster.html">cluster</a>.
Cluster module is easy to use and provides you faster implementation. I wrote somewhat Actor like code that uses cluster module.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">cluster</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cluster&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the number of core of your CPU</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">numCPUs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;os&#39;</span><span class="p">).</span><span class="nx">cpus</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">isWorker</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Starting worker process</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;I am worker &quot;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">pid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Send master process a message</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="nx">chat</span><span class="o">:</span> <span class="s2">&quot;I am + &quot;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">pid</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Event handler that is called when this worker get a message</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Thank you receiving: &#39;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">chat</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">isMaster</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Starting master process</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">numCPUs</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Create worker process</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="nx">cluster</span><span class="p">.</span><span class="nx">fork</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;worker forked: pid=&quot;</span> <span class="o">+</span> <span class="nx">worker</span><span class="p">.</span><span class="nx">process</span><span class="p">.</span><span class="nx">pid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Catch the timing of worker death</span>
</span><span class='line'>        <span class="nx">worker</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;death&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">worker</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;worker &#39;</span> <span class="o">+</span> <span class="nx">worker</span><span class="p">.</span><span class="nx">process</span><span class="p">.</span><span class="nx">pid</span> <span class="o">+</span> <span class="s1">&#39; died&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Event hander that is called when the master get a message</span>
</span><span class='line'>        <span class="nx">worker</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;master received: &#39;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">chat</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">worker</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">chat</span><span class="o">:</span> <span class="s1">&#39;Hi, I received: &#39;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">chat</span><span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// In order to kill all process, you shouldn&#39; forget below part</span>
</span><span class='line'><span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;SIGINT&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">isMaster</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;master is killed: pid=&#39;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">pid</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;worker is killed pid=&#39;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">pid</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>With cluster, there are two types of actors. One is master process, and the others are worker processes.
You can let master process and worker process send message respectively. To sending worker a message from master,
use <code>worker.send({text:"From master to worker"})</code>. On the other hand to sending master a message from worker process,
use <code>process.send({text:"From worker to master"})</code>.</p>

<p>This asynchronous model looks like Actor and message model. In this model, it is not necessary to implement exclusive control
because all processes acts harmoniously with only messages. If I can take this model nicely into nodejs, <a href="https://github.com/Lewuathe/n42">n42</a>
will get better running performance. I&rsquo;ll try it.</p>

<p>Thank you</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tokyo Node Gakuen 11th Period]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/27/tokyo-node-gakuen-11th-period/"/>
    <updated>2014-02-27T21:34:24+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/27/tokyo-node-gakuen-11th-period</id>
    <content type="html"><![CDATA[<p>Yesterday, I took part in <a href="http://connpass.com/event/5071/">Tokyo Node Gakuen 11th period</a> for the first time.
Though I want to attend this meeting to be a node hacker for a long time, I have not been able to get a chance to do so.
About two weeks ago, I semi-completed <a href="https://github.com/Lewuathe/n42">n42</a> that implements some deep learning algorithms,
stacked denoised autoencoder, deep belief network. So time has come, and I realized that I have something to tell and
where I can convey my passions through one software stack, nodejs.</p>

<!-- more -->


<h2><strong>Talk about the future of nodejs</strong></h2>

<p>Presented by <a href="https://twitter.com/yosuke_furukawa">@yosuke_furukawa</a>. He is the next representative of nodejs Japan community.
He is young and so vital, passionate that I believe that future of nodejs.jp must be bright. Please go for it!</p>

<div style="width: 65%;text-align:center;" markdown="1">
<script async class="speakerdeck-embed" data-id="a753718081010131e5751252e28d83c2" data-ratio="1.33333333333333" src="http://lewuathe.github.io//speakerdeck.com/assets/embed.js"></script>
</div>


<p>He introduced some new features of nodejs v0.12 and hot libraries supported by nodejs community such as <a href="http://koajs.com/">koa</a> (Official site is so cool!) and <a href="http://primus.io/">Primus</a>. These libraries were unfamiliar to me this time. So this introduction was good to me in order to understand the current situation of nodejs roughtly. Thank you.</p>

<h2><strong>Getting started browserify</strong></h2>

<p>Next presenter was <a href="https://twitter.com/hitsujiwool">@hitsujiwool</a>. He looks very familiar with client JavaScript technologies. Especially in this session, he talked about the overview of <a href="http://browserify.org/">browserify</a>. This tool converts the codes written in <a href="http://en.wikipedia.org/wiki/CommonJS">CommonJS</a> style into the executable code in web browser. I cannot understand easily at that time. And unfortunately, this situation does not change now.</p>

<div style="width: 65%;text-align:center;" markdown="1">
<script async class="speakerdeck-embed" data-id="d0609f0080f90131e5751252e28d83c2" data-ratio="1.29456384323641" src="http://lewuathe.github.io//speakerdeck.com/assets/embed.js"></script>
</div>


<p>However, roma was not built in a day. I understand sufficiently the necessity of study client JavaScript technology stacks and trend. So I won&rsquo;t lose this chance. Even if it takes some month, I have a desire to grasp the concept of this technology at last.</p>

<p>And below is LT session.</p>

<h2><strong>Deep learning with nodejs</strong></h2>

<p>This is my session. As I said previously, I developed deep learning module in nodejs called <a href="https://www.npmjs.org/package/n42">n42</a>. n42 was named after <a href="http://en.wikipedia.org/wiki/The_Hitchhiker's_Guide_to_the_Galaxy">The Hitchhiker&rsquo;s Guide to the Galaxy</a>. A super computer called &ldquo;deep thought&rdquo; enters in this movie. People asked one diffucult question to this computer bacause this computer is so smart that it can always answer any questions. The question was this.</p>

<blockquote><p>the Answer to the Ultimate Question of Life, the Universe, and Everything</p></blockquote>

<p>After 750million years, deep thought answered.</p>

<blockquote><p>42</p></blockquote>

<p>What? The answer of every thing is really only 42? I also doubt the validity of this answer, but I like this story very much. I want to see the day when n42 can give me the answer of everything :)</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31651520" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/lewuathe/deeplearning-with-node" title="Deeplearning with node" target="_blank">Deeplearning with node</a> </strong> from <strong><a href="http://www.slideshare.net/lewuathe" target="_blank">Kai Sasaki</a></strong> </div></p>

<h2><strong>node.js as Gips for training asynchronous programming</strong></h2>

<p>I&rsquo;m afraid to say, but I could not find the presentation slide.
The presenter was <a href="https://twitter.com/niryuu">@niryuu</a>. His presentation was exciting.
The most impressive word I can remember is</p>

<blockquote><p>Do it properly</p></blockquote>

<p>Asynchronous programming in nodejs becomes sometimes very halmful such as callback hell.
He solved this problem simple concept. Return values properly. Using Primise etc.
These motivations had stimulated me to write code properly in any situation.
I feel that I can make use of this phrase when I was discouraged. Thank you.</p>

<h2><strong>With node.js, a novice programmer can make online fighting game easily</strong></h2>

<p>This session was given by <a href="https://twitter.com/pegass85">@pegass85</a>. He was so passionate that I enjoy his presentaion profoundly. He seems that he loves games very much. So he intruduced some games that released about a decade ago. Through his talking, I can feel that he really enjoy programming and games. It reminded me of the importance of enjoying programming as a hobbiest not a worker. I am looking forward the day when his game of &ldquo;paper, stone and scissors&rdquo; running properly online.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31621477" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yuusuketakeuchi96/nodejs-31621477" title="Node.jsなら日曜プログラマーでも簡単に通信対戦ゲームが作れる" target="_blank">Node.jsなら日曜プログラマーでも簡単に通信対戦ゲームが作れる</a> </strong> from <strong><a href="http://www.slideshare.net/yuusuketakeuchi96" target="_blank">Yuusuke Takeuchi</a></strong> </div></p>

<h2>Last but not least</h2>

<p>Throught these sessions, I can see the potential of nodejs in a new light.
By the huge power of community, these softwares are given its futures.
I was forced to realize that fact by these passionate developers of nodejs.
The main theme of this seminor was</p>

<blockquote><p>Talk about the future of nodejs</p></blockquote>

<p>I have a desire of the bright future of nodejs when a lot of developers and users
make world better place helping each other with this software.
After meeting these passionate developers, this desire changed to confidence.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimize Octopress for Facebook Post]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/24/optimize-octopress-for-facebook-post/"/>
    <updated>2014-02-24T20:25:45+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/24/optimize-octopress-for-facebook-post</id>
    <content type="html"><![CDATA[<p>This blog made by <a href="http://octopress.org/">octopress</a>, ruby CMS tool.
As many others do, I also combined this tool with <a href="http://pages.github.com/">GitHub pages</a>
But this method has one fault about posting on facebook. Octopress doesn&rsquo;t include ogp properties as default. Ogp properties privide facebook meta information such as title, author, description and url. So without this meta information, you cannot get proper images when you write a post on facebook. In order to attach thumbtail image to your post, you have to write some configuration on octopress.</p>

<!-- more -->




<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-02-24-octopress-ogp/before.png" />
</div>


<h2>Write appid and locale</h2>

<p>Append below configuration in your <code>_config.yml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>facebook_app_id: YOUR_APP_ID
</span><span class='line'>facebook_locale: ja_JP</span></code></pre></td></tr></table></div></figure>


<p>YOUR_APP_ID might be listed on <code>/source/_include/facebook_like.html</code> Paste that number.</p>

<h2>Change facebook like action</h2>

<p>Edit <code>/source/_include/facebook_like.html</code> like below. This modification makes this JavaScript code get app_id and locale from <code>_config.yml</code> file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;div id="fb-root"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script&gt;(function(d, s, id) {
</span><span class='line'>  var js, fjs = d.getElementsByTagName(s)[0];
</span><span class='line'>  if (d.getElementById(id)) {return;}
</span><span class='line'>  js = d.createElement(s); js.id = id; js.async = true;
</span><span class='line'>  js.src = "//connect.facebook.net/ja_JP/all.js#appId=212934732101925&xfbml=1";
</span><span class='line'>  fjs.parentNode.insertBefore(js, fjs);
</span><span class='line'>}(document, 'script', 'facebook-jssdk'));&lt;/script&gt;
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<h2>Add top page flag</h2>

<p>To ditinguish post articles and top page, add this flag to <code>source/index.html</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: default
</span><span class='line'>index: true  
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<h2>Configuration for ogp meta informations</h2>

<p>Write below meta tags to <code>source/_includes/custom/facebook_ogp.html</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat source/_includes/custom/facebook_ogp.html
</span><span class='line'>&lt;meta property="og:title" content="Optimize octopress for facebook post - The first cry of Atom" &gt;
</span><span class='line'>&lt;meta property="og:description" content="" /&gt;
</span><span class='line'>&lt;meta property="og:url" content="http://lewuathe.com" /&gt;
</span><span class='line'>&lt;meta property="og:image" content="http://lewuathe.github.io/images/site_image.png" /&gt;
</span><span class='line'>&lt;meta property="og:author" content="lewuathe" /&gt;
</span><span class='line'>&lt;meta property="og:site_name" content="The first cry of Atom" /&gt;
</span><span class='line'>&lt;meta property="og:locale" content="ja_JP" /&gt;
</span><span class='line'>&lt;meta property="og:type" content="article" /&gt;
</span><span class='line'>&lt;meta property="fb:app_id" content="212934732101925" /&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Include meta tags</h2>

<p>At last, make header include these meta tags. Write below on <code>source/_include/head.html</code></p>

<p><img src="http://lewuathe.github.io/images/posts/2014-02-24-octopress-ogp/code.png" /></p>

<p>So that&rsquo;s all. It&rsquo;s ok. Deploy this site and post any entry to facebook.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-02-24-octopress-ogp/after.png" />
</div>


<p>Good, you can see your thumbnail. A research shows that the post that has thumbnail images attracts more people than
the post that has no image can. If you are using octopress for writing your own blog, it must be the good option for increasing
the access from facebook.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
</feed>
