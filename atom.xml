<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The first cry of Atom]]></title>
  <link href="http://lewuathe.com/atom.xml" rel="self"/>
  <link href="http://lewuathe.com/"/>
  <updated>2014-10-12T21:50:29+09:00</updated>
  <id>http://lewuathe.com/</id>
  <author>
    <name><![CDATA[Kai Sasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Write Octopress Article on Two Machines]]></title>
    <link href="http://lewuathe.com/blog/2014/10/12/write-octopress-article-on-two-machine/"/>
    <updated>2014-10-12T20:38:47+09:00</updated>
    <id>http://lewuathe.com/blog/2014/10/12/write-octopress-article-on-two-machine</id>
    <content type="html"><![CDATA[<p>By accident, I got <a href="https://www.apple.com/jp/mac-pro/">MacPro</a>. This is my first desktop machine in my life. I usually use notebook or laptop machine because
there were a lot of time to bring my machine outside. But now I found it is very confortable to use it, large size display, high spec for processing and sufficient amount of capacity.</p>

<p><img src="http://lewuathe.com/images/posts/2014-10-12-macpro/macpro.jpg" alt="MacPro" /></p>

<!-- more -->


<p>I want to write Octopress article on MacPro. I wrote this on MacBookPro previously. So this time, I&rsquo;d like to record how to achieve this goal.</p>

<h1>Clone source</h1>

<p>First clone your octopress original source.</p>

<pre><code>$ git clone -b source git@github.com:username/username.github.com.git octopress
</code></pre>

<p>Then octopress has a built site under <code>_deploy</code> directory. You have to pull master branch into this directory.</p>

<pre><code>$ git clone  git@github.com:username/username.github.com.git _deploy
</code></pre>

<h1>Setup</h1>

<p>Before setting up, you have to install <a href="http://bundler.io/">bundler</a>.</p>

<pre><code>$ gem install bundler
$ rbenv rehash
$ bundle install
</code></pre>

<p>And setup your github pages url.</p>

<pre><code>$ bundle exec rake setup_github_pages
</code></pre>

<p>Last but not least, update all sources and built files.</p>

<pre><code>$ git pull origin source
$ cd _deploy
$ git pull origin master
</code></pre>

<p>OK this time you can deploy from this new machine. So I wrote this article on my new MacPro. Through this process, I want to say thank you to <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Robert Anderson</a>.
From now I will keep update my blog on super MacPro.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Hadoop on MacOSX]]></title>
    <link href="http://lewuathe.com/blog/2014/09/29/build-hadoop-on-macosx/"/>
    <updated>2014-09-29T20:59:22+09:00</updated>
    <id>http://lewuathe.com/blog/2014/09/29/build-hadoop-on-macosx</id>
    <content type="html"><![CDATA[<p>I am not a veteran Java developer. I don&rsquo;t understand the detail of Java development environment such as build tool or some type of libraries.
Today, I realised that I need to develop or understand architecture of Hadoop. Hadoop seems to use some kind of Java development tools. Maven, ProtocolBuffer, CMake and so on.
So in this article I want to record my environment for building hadoop projects on MacOSX.</p>

<!-- more -->


<h1>Prerequisites</h1>

<ul>
<li>JDK 1.6+</li>
<li>Maven 3.0 or later</li>
<li>ProtocolBuffer 2.5.0</li>
<li>CMake 2.6 or newer (if compiling native code)</li>
<li>Zlib devel (if compiling native code)</li>
<li>openssl devel ( if compiling native hadoop-pipes )</li>
<li>Internet connection for first build (to fetch all Maven and Hadoop dependencies)</li>
</ul>


<p>You also can see this list on <a href="https://github.com/apache/hadoop/blob/trunk/BUILDING.txt">BUILDING.txt</a>. On MacOSX, you don&rsquo;t need to install JDK and openssl.
Within this list, all you need to install are CMake and ProtocolBuffer.</p>

<h2>ProtocolBuffer</h2>

<p>Download from <a href="https://code.google.com/p/protobuf/downloads/list">here</a>. After unziping it, you can walk ordinal steps.</p>

<pre><code>$ ./configure
$ make
$ make install
</code></pre>

<h2>CMake</h2>

<p>You can install CMake with Homebrew. It is the easiest way.</p>

<pre><code>$ brew install cmake
</code></pre>

<p>All dependencies are installed on your machine now. Let&rsquo;s checkout hadoop source code.</p>

<h1>Hadoop Project</h1>

<pre><code>$ svn checkout http://svn.apache.org/repos/asf/hadoop/common/trunk/
</code></pre>

<p>Notice: I tried hadoop GitHub repository, but it was very slow to download it. I recommend you to checkout from svn repository.</p>

<p>And build it.</p>

<pre><code>$ mvn package -DskipTests -Pdist -Dtar
</code></pre>

<p>Because of some broken tests, you have to write <code>skipTests</code> option. With this command you can command line tools and jar files in <code>hadoop-dist/target/hadoop-X.X.X-SNAPSHOT</code></p>

<pre><code>$ bin/hadoop version
Hadoop X.X.X-SNAPSHOT
Subversion https://svn.apache.org/repos/asf/hadoop/common -r 1511192
Compiled by hadoopworld on 2013-08-07T07:01Z
From source with checksum c8f4bd45ac25c31b815f311b32ef17
This command was run using ~/work/trunk/hadoop-dist/target/hadoop-X.X.X-SNAPSHOT
</code></pre>

<p>All configuration files are under hadoop-dist directory. You can rewrite xml files to change Pseudo distributed mode from stand alone mode.
After finishing all tasks, I found nothing was hard. I want study the detail of architecture and codebase of hadoop and start writing some patches for hadoop project.
Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noblesse Oblige in Silicon Valley]]></title>
    <link href="http://lewuathe.com/blog/2014/09/13/noblesse-oblige-in-silicon-valley/"/>
    <updated>2014-09-13T13:09:59+09:00</updated>
    <id>http://lewuathe.com/blog/2014/09/13/noblesse-oblige-in-silicon-valley</id>
    <content type="html"><![CDATA[<p>To be honest, I don&rsquo;t know <a href="http://salesforce.com">salesforce.com</a> clearly because it&rsquo;s B2B company and I cannot see that existence
on daily work. Though now I cannot grasp whole picture of this company yet, I want to write about charity and donation in US.</p>

<!-- more -->


<p>I think social security policy in US is worse than that in Japan. Especially, cost of medical care looks very expensive to me. How many people can they pay that high cost? I don&rsquo;t know accurate number of sufferers of medical care, but that is not small number. That might be the reason why there are a lot of billionaires who donate some kind of charities in US. <a href="https://twitter.com/Benioff">Marc Benioff</a> is one of them. I listend his talk at <a href="http://techcrunch.com/2014/09/09/marc-benioffs-plans-more-investing-more-donating-more-political-demands/">TechCrunch Disrupt SF</a>. And I found this tweet on my TL today.</p>

<blockquote class="twitter-tweet" lang="en"><p>Were announ phase 2 of our <a href="https://twitter.com/sfusdedtech">@sfusdedtech</a> program today with <a href="https://twitter.com/SFUSD_Supe">@SFUSD_Supe</a> and <a href="https://twitter.com/mayoredlee">@mayoredlee</a>! A new grant for our schools. <a href="http://t.co/TG7JEBrUzk">http://t.co/TG7JEBrUzk</a></p>&mdash; Marc Benioff (@Benioff) <a href="https://twitter.com/Benioff/status/510421230634020864">September 12, 2014</a></blockquote>


<script async src="http://lewuathe.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The seminar hole where TCDisrupt was held was filled with the sound of clap toward Marc Benioff. He talked about his charity activities toward education. People who attended looeked so impresed and expressed their pure applause. So purely. Is it same thing is true in Japan? I doubted.</p>

<p>Of cource, I cannot decide according to only this tiny sample. But I cannot help being envy of the pureness which attendeed of TCDisrupt showed. In Japan, people will show their skeptical view or jealousy toward billionaire. &ldquo;Is that only for advertisement?&rdquo; &ldquo;Is that just hipocrisy!&rdquo; Yes, that might be true. But is that halm to ordinary people? There must be a lot of people who are helped by these donations. Is it just ok, isn&rsquo;t it? Why can&rsquo;t they express applause toward the people who use their money that is got by their own efforts? For disadvantages. I think it is necessary to say thank you at first regardless their reasons.</p>

<p>Pureness supports the power of noblesse oblige in Silicon Valley, I felt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Living in Silicon Valley]]></title>
    <link href="http://lewuathe.com/blog/2014/09/12/living-in-silicon-valley/"/>
    <updated>2014-09-12T06:06:34+09:00</updated>
    <id>http://lewuathe.com/blog/2014/09/12/living-in-silicon-valley</id>
    <content type="html"><![CDATA[<p>I am not living in SF. My house is at Tokyo, Japan now. Moreover it’s the first time to visit Silicon Valley. I don’t know what I can understand from what I saw, what I felt and who I met. So it’s my review time for this trip and make use of this to know how I should live. There are 3 points.</p>

<!-- more -->


<h2>We were all only users</h2>

<p>In Japan, the number of tech startups are growing. The quality of software can, I think, compete with world class softwares. Living in Japan as a software engineer didn’t look so bad to me. But this trip changed me totally.</p>

<p>Most of the software I am using in Japan was imported from here, Silicon Valley. All is developed in here, Silicon Valley. We are only users of these softwares created by engineers in Silicon Valley. This makes me so disappointed. What am I supposed to do? I feel all things I keep doing is in vain. We are only users. Just users. Not creators. This is the one thing I decided to change my life as a software engineer.</p>

<h2>Communication</h2>

<p>I am not good at communication even in Japanese. I am a nerd or geek or otaku. I thought somehow geeks in SF will be the same type of person like me, but it is not true. Most of the people I met here would like to communicate voluntarily with great vitality, especially about their own idea and viewpoint. There was no exception. I am somewhat confident about my own idea and the skill to convey one to others. But it is not enough here. People are more serious about their communication skill in order to persuade others or make own team involving your own. There are no exception even about engineers. I have to obtain not only English communication skills but also communication skills itself.</p>

<h2>Life</h2>

<p>Only correct thing what I assume in advance is this, LIFE. I think people who are living in Silicon Valley know what life is and what happiness is. People works for own life’s happiness, but not working itself. I cannot feel this righteous sense in Japan. All people looks down, are tired with daily work and earn little money even though they have no vacation to spent these money. It is not sound thing as lifestyle. Conversely all people I met here are all smiling, looks very happy. I wonder what makes them happier than people in Japan. Money? Vacation? Job? I cannot grasp what is the most influential factor. But I am sure that people in Silicon Valley are happier.</p>

<p>Overall, it is dream for all engineers to live in Silicon Valley. Today I know the reason why this is dream for us. I am sure to return back here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Class for Swift]]></title>
    <link href="http://lewuathe.com/blog/2014/06/19/case-class-for-swift/"/>
    <updated>2014-06-19T19:15:40+09:00</updated>
    <id>http://lewuathe.com/blog/2014/06/19/case-class-for-swift</id>
    <content type="html"><![CDATA[<p>Last week, Apple new programming language <a href="https://developer.apple.com/swift/">Swift</a> was released.
From that time I keep considering Swift looks like <a href="http://www.scala-lang.org/">Scala</a> language.
Scala has two sides as object-oriented-language and functional-programming-language. So there are many features
you should learn from scala. One of the most powerful feature of scala is pattern matching. This feature in scala context
can be applied to all type objects. It is called constructor pattern matching.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">User</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">u</span> <span class="k">=</span> <span class="nc">User</span><span class="o">(</span><span class="s">&quot;NOBITA&quot;</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="n">u</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">User</span><span class="o">(</span><span class="s">&quot;TAKESHI&quot;</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">User</span><span class="o">(</span><span class="s">&quot;NOBITA&quot;</span><span class="o">,</span> <span class="mi">12</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">User</span><span class="o">(</span><span class="s">&quot;NOBITA&quot;</span><span class="o">,</span> <span class="mi">13</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ret is 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>All you should do to use pattern match with your custom class is declare <code>case</code> class.
The scala compiler generates <code>unapply</code> method called extractors automatically. So you can use
these feature very easily.</p>

<p>So Swift is also functional programming language. And it has pattern matchin with <code>switch</code> control flow. But I think it is not sufficient in comparison with Scala.</p>

<p>Therefore I tried it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  SwiftCase.swift</span>
</span><span class='line'><span class="c1">//  SwiftCase</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Sasaki Kai on 6/19/14.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014 Sasaki Kai. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">Foundation</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// For matching, unapply method is necessary</span>
</span><span class='line'><span class="n">protocol</span> <span class="nc">SwiftCase</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">unapply</span><span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">Array</span><span class="o">&lt;</span><span class="nc">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SwiftPair</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">first</span><span class="k">:</span> <span class="kt">SwiftCase</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">second</span><span class="k">:</span> <span class="kt">AnyObject</span>
</span><span class='line'>    <span class="n">init</span><span class="o">(</span><span class="n">first</span><span class="k">:</span> <span class="kt">SwiftCase</span><span class="o">,</span> <span class="n">second</span><span class="k">:</span> <span class="kt">AnyObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">self</span><span class="o">.</span><span class="n">first</span> <span class="k">=</span> <span class="n">first</span>
</span><span class='line'>        <span class="n">self</span><span class="o">.</span><span class="n">second</span> <span class="k">=</span> <span class="n">second</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DSL like logic for generating pair (Matching object, Result object)</span>
</span><span class='line'><span class="nd">@infix</span> <span class="n">func</span> <span class="o">~&gt;</span> <span class="o">(</span><span class="n">source</span><span class="k">:</span> <span class="kt">SwiftCase</span><span class="o">,</span> <span class="n">target</span><span class="k">:</span> <span class="kt">AnyObject</span><span class="o">)-&gt;</span> <span class="nc">SwiftPair</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nc">SwiftPair</span><span class="o">(</span><span class="n">first</span><span class="k">:</span> <span class="kt">source</span><span class="o">,</span> <span class="n">second</span><span class="k">:</span> <span class="kt">target</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="k">match</span><span class="o">(</span><span class="n">c</span><span class="k">:</span> <span class="kt">SwiftCase</span><span class="o">)(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">Array&lt;SwiftPair&gt;</span><span class="o">)-&gt;</span> <span class="nc">AnyObject</span><span class="o">?</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">pair</span> <span class="n">in</span> <span class="n">arr</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">matchArr</span> <span class="k">=</span> <span class="o">(</span><span class="n">pair</span><span class="o">.</span><span class="n">first</span> <span class="n">as</span> <span class="nc">SwiftCase</span><span class="o">).</span><span class="n">unapply</span><span class="o">()</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">originArr</span> <span class="k">=</span> <span class="n">c</span><span class="o">.</span><span class="n">unapply</span><span class="o">()</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">isOk</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">matchArr</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="n">originArr</span><span class="o">.</span><span class="n">count</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">for</span> <span class="k">var</span> <span class="n">i</span> <span class="k">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">matchArr</span><span class="o">.</span><span class="n">count</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">matchArr</span><span class="o">[</span><span class="kt">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">originArr</span><span class="o">[</span><span class="kt">i</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">isOk</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="k">if</span> <span class="n">isOk</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">pair</span><span class="o">.</span><span class="n">second</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this class and functions, you can write below code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">User</span><span class="k">:</span> <span class="kt">SwiftCase</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">let</span> <span class="kt">name:</span> <span class="kt">String</span>
</span><span class='line'>    <span class="kt">let</span> <span class="kt">age:</span> <span class="kt">Int</span>
</span><span class='line'>    <span class="n">init</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">self</span><span class="o">.</span><span class="n">name</span> <span class="k">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="n">self</span><span class="o">.</span><span class="n">age</span> <span class="k">=</span> <span class="n">age</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">unapply</span><span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">Array</span><span class="o">&lt;</span><span class="nc">NSObject</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="kt">self.name</span>, <span class="kt">self.age</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OtherUser</span><span class="k">:</span> <span class="kt">SwiftCase</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">let</span> <span class="kt">name:</span> <span class="kt">String</span>
</span><span class='line'>    <span class="kt">let</span> <span class="kt">age:</span> <span class="kt">Int</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">address</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'>    <span class="n">init</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">address</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">self</span><span class="o">.</span><span class="n">name</span> <span class="k">=</span> <span class="n">name</span>
</span><span class='line'>       <span class="n">self</span><span class="o">.</span><span class="n">age</span> <span class="k">=</span> <span class="n">age</span>
</span><span class='line'>       <span class="n">self</span><span class="o">.</span><span class="n">address</span> <span class="k">=</span> <span class="n">address</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">unapply</span><span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">Array</span><span class="o">&lt;</span><span class="nc">NSObject</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="kt">self.name</span>, <span class="kt">self.age</span>, <span class="kt">self.address</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">user</span> <span class="k">=</span> <span class="nc">User</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="err">&quot;</span><span class="kt">NOBITA</span><span class="err">&quot;</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="err">34</span><span class="o">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">ret</span> <span class="k">:</span> <span class="kt">AnyObject?</span> <span class="o">=</span> <span class="k">match</span><span class="o">(</span><span class="n">user</span><span class="o">)(</span><span class="n">arr</span><span class="k">:</span> <span class="err">[</span>
</span><span class='line'>    <span class="kt">User</span><span class="o">(</span><span class="kt">name:</span> <span class="err">&quot;</span><span class="kt">TAKESHI</span><span class="err">&quot;</span><span class="o">,</span> <span class="kt">age:</span> <span class="err">23</span><span class="o">)</span> <span class="o">~&gt;</span> <span class="mi">1</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">User</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="err">&quot;</span><span class="kt">NOBITA</span><span class="err">&quot;</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="err">32</span><span class="o">)</span> <span class="o">~&gt;</span> <span class="mi">2</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">User</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="err">&quot;</span><span class="kt">NOBITA</span><span class="err">&quot;</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="err">34</span><span class="o">)</span> <span class="o">~&gt;</span> <span class="mi">3</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">OtherUser</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="err">&quot;</span><span class="kt">NOBITA</span><span class="err">&quot;</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="err">20</span><span class="o">,</span> <span class="n">address</span><span class="k">:</span> <span class="err">&quot;</span><span class="kt">TOKYO</span><span class="err">&quot;</span><span class="o">)</span> <span class="o">~&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="err">]</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ret is 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is it looks like matching DSL in Swift? So I want to make this class more sophisticated. Some symbols are not easy to understand
and match function need to receive <code>Array</code> parameter. It is not cool ;(</p>

<p>The repository is <a href="https://github.com/Lewuathe/SwiftCase">here</a>. If you have some advice, please let me know.
Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome Open Source Movement in Hardware Company]]></title>
    <link href="http://lewuathe.com/blog/2014/06/13/open-source-movement-in-hardware-compan/"/>
    <updated>2014-06-13T22:00:35+09:00</updated>
    <id>http://lewuathe.com/blog/2014/06/13/open-source-movement-in-hardware-compan</id>
    <content type="html"><![CDATA[<p>Today is the first day of new era for Open Source movements.</p>

<p><a href="http://www.teslamotors.com/blog/all-our-patent-are-belong-you">All Our Patent Are Belong To You</a></p>

<div style="text-align:center" markdown="1">
<figure>
<img src="http://lewuathe.com/images/posts/2014-06-13-tesla/motor.jpg" />
<figure>Tesla Motor by Steve Jurvetson<a href="https://www.flickr.com/photos/jurvetson/2782565657/in/photolist-5eTnPX-kv7w5M-f7WzKj-f7WyNA-dXMDqB-6M2MHW-5eHYAq-6aJA3F-7zhWDy-4t8U5F-dXTjdG-f7WymU-f7GmqF-f7GiuB-BNTx5-6kAGXC-5t76MG-nWXsmN-6kAGoU-6aqomT-chEjh3-6kwyti-5peGWB-aXeXtc-8pSRjC-dxpQbA-atHJJo-aGXy8P-ciZHPf-f7WvB3-6kAGAd-f7Wz5Y-dZ4MiH-atAnS1-eiPF9U-6kAHnJ-dB939C-6DAEpq-dNTgjx-dXMzLa-dXTjfY-f7GjfK-f7GjLF-f7GhVc-5nwqy5-gyBgiX-dXTfQE-79tMEC-9ghJyE-brfREu">flickr</a></figcaption>
</figure>
</div>


<p>Tesla is famous for its motor products. These opened patents includes EV technologies for the future.
I think it will accelerate the speed of development of EV vehicles. So this decision plays a big role to
progress the bright future of motor technologies.</p>

<p>Above all, as a software engineer, it is great thing to spread open source movement into hardware companies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack NHK]]></title>
    <link href="http://lewuathe.com/blog/2014/05/26/hack-nhk/"/>
    <updated>2014-05-26T19:38:04+09:00</updated>
    <id>http://lewuathe.com/blog/2014/05/26/hack-nhk</id>
    <content type="html"><![CDATA[<p>Recently, there are a lot of hackathon in Japan. This word &ldquo;Hackathon&rdquo; also have been
familiar word to non programmers. People want to use this type of event in order to solve
any problems they have at office, home and life.</p>

<p>NHK is Japan&rsquo;s national public broadcasting organization. The name is abbreviation of &ldquo;Nippon Housou Kyoukai&rdquo;.
This organization keeps focusing to improve the quality of news broadcasting in terms of equality, accuracy and deepness.
In this weekend, Hakathon is applied to the field of broadcasting. I attended.</p>

<p><a href="http://www.nhk.or.jp/kokusaihoudou/hackathon/">http://www.nhk.or.jp/kokusaihoudou/hackathon/</a></p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.com/images/posts/2014-05-26-nhk-hackathon/board.jpg" />
</div>




<!-- more -->


<p>The purpose of this event is to answer how to let the youngs see news programs such as <a href="http://www.nhk.or.jp/kokusaihoudou/">&ldquo;Kokusai Houdou 2014&rdquo;</a>.
To promote the rating of thie program and furthermore the rating of whole news programs, our ideas as hacker, I think, will also help new field
which is different from our daily life.</p>

<p>Our team developes vizualizing tool for your interest to the news program. While you are watching TV program, you might not want to have trouble with
recording any captures, time or tracking tweets about target program. All you have to do with our tool is watching TV. The image sensing hardware made by <a href="http://www.omron.co.jp/">omron</a> tracks your emotion toward program automatically. At the end of the program you can review the list of emotions showed by you while you were watching TV.
With that list of emotion and captures, you can look back inside yourself, your emotions. This leads the new possibility of the style of watching TV and our emotions.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.com/images/posts/2014-05-26-nhk-hackathon/members.jpg" />
</div>


<p>As a geek, the most impressive factor I can use in this time was <a href="http://www.nhk.or.jp/hybridcast/online/">Hybridcast</a>. With this technology, I can develop &ldquo;TV&rdquo; application
like developing web application. I constructed API server, started HTTP proxy server and wrote HTML5 source codes. It was the time when I realised the new technology of TV brought us sufficient generality of web technology even paradoxically. The future is getting around the corner.</p>

<p>To be honest, I don&rsquo;t usually watch TV programs except for NHK. Even NHK, the frequency of watching cannot be necessarily high. I am a resident of internet.</p>

<p>However I can see a little bright future on TV device and contents. I hope to help TV get the power of internet with the explosion of high technologies.
So from today, I think watching TV is not bad as much as I expected. Oops, <a href="http://www.nhk.or.jp/professional/">&ldquo;The professional&rdquo;</a> starts soon, it&rsquo;s monday.
Here I close my laptop and watching the future showed on TV calmly.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is the Essential Factor of Autoencoder?]]></title>
    <link href="http://lewuathe.com/blog/2014/05/20/what-is-the-essential-factor-of-autoencoder/"/>
    <updated>2014-05-20T21:08:45+09:00</updated>
    <id>http://lewuathe.com/blog/2014/05/20/what-is-the-essential-factor-of-autoencoder</id>
    <content type="html"><![CDATA[<p>The other day, I wrote neural network which implements backpropagation algorithm.
Following this program I write denoised autoencoder program by inheriting previous neural network.
Backpropagation algorithm is generally good performance in spite of the simplicity. With this code,
I can be ranked in at the <a href="http://www.kaggle.com/c/digit-recognizer/leaderboard">266th(May 20th, 2014)</a>.
So I think this implementation has no bugs. However when I use this program as autoencoder the same is not true.
With autoencoder, you should reduce dimension of input vector in order to extract essential characteristics.
These essential characteristics might be also reduced so it cannot reconstruct the same vector to input vector.
In fact after over-completed this network, I can better performance in terms of the number of accurate answers.</p>

<p>This is code.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">lewuathe</span><span class="o">.</span><span class="na">magi</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.ujmp.core.Matrix</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by sasakiumi on 5/8/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DenoisedAutoencoder</span> <span class="kd">extends</span> <span class="n">NeuralNetwork</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="n">corruptionLevel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DenoisedAutoencoder</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numLayers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">numLayers</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DenoisedAutoencoder</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numLayers</span><span class="o">,</span> <span class="n">Matrix</span> <span class="n">w</span><span class="o">,</span> <span class="n">Matrix</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">numLayers</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">w</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">biases</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">corruptionLevel</span> <span class="o">=</span> <span class="mf">0.2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCorruptionLevel</span><span class="o">(</span><span class="kt">double</span> <span class="n">corruptionLevel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">corruptionLevel</span> <span class="o">=</span> <span class="n">corruptionLevel</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * update</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param x</span>
</span><span class='line'><span class="cm">     * @param y</span>
</span><span class='line'><span class="cm">     * @param lr</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>     <span class="nd">@Override</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="kt">double</span><span class="o">[][]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">double</span><span class="o">[][]</span> <span class="n">y</span><span class="o">,</span> <span class="kt">double</span> <span class="n">lr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="o">[]</span> <span class="n">nablaB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>          <span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>          <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="o">[]</span> <span class="n">nablaW</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>          <span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>          <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">assert</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">y</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Matrix</span> <span class="n">xMat</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>              <span class="n">Matrix</span> <span class="n">yMat</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">xMat</span><span class="o">.</span><span class="na">setAsDouble</span><span class="o">(</span><span class="n">corrupt</span><span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">],</span> <span class="n">corruptionLevel</span><span class="o">),</span> <span class="n">j</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">yMat</span><span class="o">.</span><span class="na">setAsDouble</span><span class="o">(</span><span class="n">y</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">],</span> <span class="n">j</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">Matrix</span><span class="o">[][]</span> <span class="n">delta</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">backprod</span><span class="o">(</span><span class="n">xMat</span><span class="o">,</span> <span class="n">yMat</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">// delta[0]: nablaB</span>
</span><span class='line'>              <span class="c1">// delta[1]: nablaW</span>
</span><span class='line'>              <span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">plus</span><span class="o">(</span><span class="n">delta</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>              <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">plus</span><span class="o">(</span><span class="n">delta</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>                <span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">plus</span><span class="o">(</span><span class="n">delta</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>              <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">plus</span><span class="o">(</span><span class="n">delta</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Update biases and weights with gradient descent</span>
</span><span class='line'>          <span class="n">biases</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">biases</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">minus</span><span class="o">(</span><span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">mtimes</span><span class="o">(</span><span class="n">lr</span><span class="o">));</span>
</span><span class='line'>          <span class="n">biases</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">biases</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">minus</span><span class="o">(</span><span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">mtimes</span><span class="o">(</span><span class="n">lr</span><span class="o">));</span>
</span><span class='line'>          <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">minus</span><span class="o">(</span><span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">mtimes</span><span class="o">(</span><span class="n">lr</span><span class="o">));</span>
</span><span class='line'>            <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">minus</span><span class="o">(</span><span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">transpose</span><span class="o">().</span><span class="na">mtimes</span><span class="o">(</span><span class="n">lr</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Matrix</span><span class="o">[][]</span> <span class="nf">backprod</span><span class="o">(</span><span class="n">Matrix</span> <span class="n">x</span><span class="o">,</span> <span class="n">Matrix</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Matrix</span><span class="o">[]</span> <span class="n">nablaB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="n">nablaB</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Matrix</span><span class="o">[]</span> <span class="n">nablaW</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="n">nablaW</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>        <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">zeros</span><span class="o">(</span><span class="n">numLayers</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="n">numLayers</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// In case of denoised autoencoder, no use of 1st weight layer</span>
</span><span class='line'>        <span class="n">weights</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">transpose</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// Activation of each layer</span>
</span><span class='line'>        <span class="n">Matrix</span> <span class="n">activation</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// Collection of activation values of each layer including input</span>
</span><span class='line'>        <span class="n">Matrix</span><span class="o">[]</span> <span class="n">activations</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>        <span class="c1">// Set input activation</span>
</span><span class='line'>        <span class="n">activations</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// Row values before activating</span>
</span><span class='line'>        <span class="n">Matrix</span> <span class="n">zs</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">zs</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">mtimes</span><span class="o">(</span><span class="n">activation</span><span class="o">).</span><span class="na">plus</span><span class="o">(</span><span class="n">biases</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">activation</span> <span class="o">=</span> <span class="n">Activation</span><span class="o">.</span><span class="na">sigmoid</span><span class="o">(</span><span class="n">zs</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">activations</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">activation</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Calculate output layer error</span>
</span><span class='line'>          <span class="n">Matrix</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">costDerivative</span><span class="o">(</span><span class="n">activations</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="n">delta</span> <span class="o">=</span> <span class="n">Util</span><span class="o">.</span><span class="na">eachMul</span><span class="o">(</span><span class="n">delta</span><span class="o">,</span> <span class="n">Activation</span><span class="o">.</span><span class="na">sigmoidPrime</span><span class="o">(</span><span class="n">zs</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>          <span class="n">Matrix</span> <span class="n">L_vbias</span> <span class="o">=</span> <span class="n">delta</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>          <span class="n">nablaB</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">delta</span><span class="o">;</span>
</span><span class='line'>            <span class="n">nablaW</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">delta</span><span class="o">.</span><span class="na">mtimes</span><span class="o">(</span><span class="n">activations</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">transpose</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Back propagation of output layer error to hidden layers</span>
</span><span class='line'>              <span class="n">delta</span> <span class="o">=</span> <span class="n">weights</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">transpose</span><span class="o">().</span><span class="na">mtimes</span><span class="o">(</span><span class="n">delta</span><span class="o">);</span>
</span><span class='line'>                <span class="n">delta</span> <span class="o">=</span> <span class="n">Util</span><span class="o">.</span><span class="na">eachMul</span><span class="o">(</span><span class="n">delta</span><span class="o">,</span> <span class="n">Activation</span><span class="o">.</span><span class="na">sigmoidPrime</span><span class="o">(</span><span class="n">zs</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>              <span class="n">nablaB</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">delta</span><span class="o">;</span>
</span><span class='line'>                <span class="n">nablaW</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">delta</span><span class="o">.</span><span class="na">mtimes</span><span class="o">(</span><span class="n">activations</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="na">transpose</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Matrix</span><span class="o">[][]</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">{</span><span class="n">nablaB</span><span class="o">,</span> <span class="n">nablaW</span><span class="o">};</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">corrupt</span><span class="o">(</span><span class="kt">double</span> <span class="n">input</span><span class="o">,</span> <span class="kt">double</span> <span class="n">level</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">noise</span> <span class="o">=</span> <span class="n">level</span> <span class="o">*</span> <span class="o">(</span><span class="mf">2.0</span> <span class="o">*</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">-</span> <span class="mf">1.0</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">input</span> <span class="o">*</span> <span class="o">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">noise</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Complete code is <a href="https://github.com/Lewuathe/magi">here</a>
While I contemplates about any bugs or errors hidden in this program, I received good clue.</p>

<div style="text-align:center" markdown="1">
<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/Lewuathe">@Lewuathe</a> over-complete autoencoders can often recover interesting structures of the data if regularized (e.g. sparsity constraint)</p>&mdash; Vincent Spruyt (@esurior) <a href="https://twitter.com/esurior/statuses/468730252798492672">2014, 5月 20</a></blockquote>
<script async src="http://lewuathe.com//platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>


<p>I will try it with this clue a little more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dear, O]]></title>
    <link href="http://lewuathe.com/blog/2014/04/18/dear-o/"/>
    <updated>2014-04-18T21:05:36+09:00</updated>
    <id>http://lewuathe.com/blog/2014/04/18/dear-o</id>
    <content type="html"><![CDATA[<p>Hello, nice to meet you. I am a novice software engineer who has worked for about 2 years. An ordinary man. I have no honor, no fame and no wealth. Of course you don&rsquo;t know who I am. There is no connection between us such as email, facebook and twitter. The reason why I can mate your name and your face is no more than watching on TV. That&rsquo;s all. So in this time I dare to say that I am not familiar with you completely. Unexpectedly I don&rsquo;t know who you are in spite of writing this letter. For whom? I would like to tell the reason why I wrote this letter.</p>

<div style="text-align:center" markdown="1">
<figure>
<img src="http://lewuathe.com/images/posts/2014-04-18-dearo/letter.jpg" />
<figcaption>letters by liz west on <a href="https://www.flickr.com/photos/calliope/234447967/in/photolist-mHBdk-5RPqQV-cXh1DL-2vhsbs-j7Tba3-776vPa-ajZyEo-fQmgi-5RhQdM-fKfTWx-3REdmZ-hjbY9-2C7pEL-6rX2oN-6ynR77-bD67q-Dv9uJ-dyhzBQ-82qcDP-6eQC2X-mUJC9-XStsi-DVwCv-6BKZNZ-sYMMN-8513JQ-6xQCFC-jzJhbe-8a2fw8-6tgbpA-2WigS-7ksF4s-yu5k-rMGa6-iM7AYV-jDEv9H-5rC746-5RWx65-4gr9Am-6qpt9-6Cbi7S-567fwu-94A6G9-dRwBoG-brHgHq-8EdPak-82em44-asWNj-bVUz1W-4HAhxX/">flickr</a></figcaption>
</figure>
</div>


<p></br></p>

<!-- more -->


<p>In fact, I have written some blog entries in these weeks that has went up in flames. These entries are accessed and seen by many more people than I expected. Mainly the majority of the reaction was positive to me, but there were also negative speeches in no small way. I experienced this type of online flame for the first time. I knew what that is as external knowledge, but I have not felt of that with my skin. Even I used the internet for 10 years, I found I don&rsquo;t know such a simple thing. It was very small scale in comparison with the case when general &ldquo;flame&rdquo; word is used. However it was enough to dispirit me toward all things which I was engaged into previously. It was stressful situation and different from the previous case I have experienced in my lifetime. I have not received so many negative feedbacks from unfamiliar people. It was a tough situation for me but I was able to realise new insight about celebrities such as athletes and scholars especially who doesn&rsquo;t earn money with showing themselves to audience.</p>

<p>What do you think that day? You received many flush lights on your face. You received many strict questions from the audience. It might be far more tough situation than I experienced. I cannot imagine your feelings. The life is always difficult to live for those who want to be happy, only be happy. In this world, there are a lot of people who tend to hurt others without knowing it. This is not the world what it should be at all.</p>

<p>Today I realised these phenomenon is not uncommon things. Ordinary people, including me, can easily hurt others and attack external world around him unconsciously. This is destructive world where I don&rsquo;t hope. All people always destruct this world by using offensive words on the internet. If I look back myself, there were many times when I said or wrote thoughtless words to others.  He might be hurt by my words that time more than I think he would be. This is painful for me, but this is tiny thing in comparison with the feelings of the sufferers.</p>

<p>So I don&rsquo;t know who you are. I haven&rsquo;t talked with you. I haven&rsquo;t met you in face to face. I haven&rsquo;t had some meal with each other. With this presupposition, can I criticise you whom I don&rsquo;t know so much such as your background, your favorite music and the most impressive place you have been to? I cannot. I don&rsquo;t want. Above all, I must not.</p>

<p>Let you be what you are. The voices will not decrease drastically and keep affect your life. But all these voices are irrelevant to your background and your life. The advocates don&rsquo;t know who you are completely. In addition to this, we must be quiet about what we don&rsquo;t know. Our voices are not based on the further details about your life. So please let you be as you are.</p>

<p>Everytime anyone makes voices about other people, someone must be hurt by your voices.
We should keep this in mind for us and myself. Helping other people leads helping yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns About BFS in Competitive Programming]]></title>
    <link href="http://lewuathe.com/blog/2014/04/10/patterns-about-bfs-in-commetitive-programming/"/>
    <updated>2014-04-10T20:24:26+09:00</updated>
    <id>http://lewuathe.com/blog/2014/04/10/patterns-about-bfs-in-commetitive-programming</id>
    <content type="html"><![CDATA[<p>So let&rsquo;s go back to English from today :)</p>

<p>I solved SRM612 Div1 for practice. This problem is <a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=10543">this</a>
In this post, I left out the detail of this problem because main topic of this post is pattern of <a href="http://en.wikipedia.org/wiki/Breadth-first_search">BFS</a>.
First I tried to solve this problem with some dynamic programming algorithm. But after trying, I found BFS is sufficient algorithm
to solve. So now I rewrote my program as below.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmoticonsDiv1</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">decode</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="n">ret</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">code</span> <span class="o">/</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ret</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">code</span> <span class="o">%</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">printSmiles</span><span class="o">(</span><span class="kt">int</span> <span class="n">smiles</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[][]</span> <span class="n">state</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">][</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//        state[i][j] : i = message, j = clipboard</span>
</span><span class='line'>        <span class="n">state</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">decode</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">message</span> <span class="o">=</span> <span class="n">ret</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">clipboard</span> <span class="o">=</span> <span class="n">ret</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">message</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">message</span><span class="o">]</span> <span class="o">=</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">message</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span> <span class="o">&lt;</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">=</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span> <span class="o">==</span> <span class="n">smiles</span><span class="o">)</span> <span class="k">return</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">][</span><span class="n">clipboard</span><span class="o">];</span>
</span><span class='line'>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">message</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">)</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">=</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span><span class="o">][</span><span class="n">clipboard</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">smiles</span><span class="o">)</span> <span class="k">return</span> <span class="n">state</span><span class="o">[</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">clipboard</span><span class="o">];</span>
</span><span class='line'>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">message</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The computing complexity of this code is O(S<sup>2</sup>). Could solve in time. After writing, I realized there are some patterns about writing BFS
in competitive programming. I want to put together these patterns in this port for the future contest.</p>

<h2>State encoding, decoding</h2>

<p>In general, BFS uses a queue data strucure. The elements of queue has to keep each state to search. In this case, each <code>message</code> and <code>clipboard</code>.
When you write software on long-term basis, you should write state class for keeping <code>message</code> and <code>clipboard</code>. But this is competitive programming.
Defining adhoc class will take you some more time to complete writing code. So you should avoid this pattern as possible.</p>

<p>The solution is encoding, decoding pattern. Default queue can only keep one <code>Integer</code> or <code>String</code>, therefore let two variables put into this one variable.
Specifically, this is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Decode one integer to two interger that composes state</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">decode</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>    <span class="n">ret</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">code</span> <span class="o">/</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ret</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">code</span> <span class="o">%</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">decode</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
</span><span class='line'><span class="kt">int</span> <span class="n">message</span> <span class="o">=</span> <span class="n">ret</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">clipboard</span> <span class="o">=</span> <span class="n">ret</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="c1">// Encode two variables into one variable</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">message</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">clipboard</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this pattern you don&rsquo;t have to write your own state class. But this pattern has a fault. If there are more variables in a state,
decoding and encoding code becomes more complex and hard to debug. In addition to this problem, you should also know the range of input variable.
In this case, I use 10000 number to encoding and decoding, bacause input variables are included in [0, 1000]. So <code>message</code> and <code>clipboard</code> can be
separated. The selection of this base integer will be difficult as the number of state varibales are increasing.</p>

<h2>Optimization value</h2>

<p>Above case, optimization value to be submit as answer is the count of manipulation <code>state[i][j]</code>. If you can write state class, you don&rsquo;t need to
this 2 dimension array. But you couldn&rsquo;t. So with this <code>state</code>, I can realize that if I want to keep more values such as optimization value,
I can prepair external third variable instead. With this variable, you can keep more values corresponding to each state.</p>

<h2>Last but not least</h2>

<p>You should not write such codes in production software!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heart Bleedを読んだ]]></title>
    <link href="http://lewuathe.com/blog/2014/04/08/opensslfalsecui-ruo-xing-wodu-nta/"/>
    <updated>2014-04-08T21:06:12+09:00</updated>
    <id>http://lewuathe.com/blog/2014/04/08/opensslfalsecui-ruo-xing-wodu-nta</id>
    <content type="html"><![CDATA[<p>今日の日本時間13:00頃、OpenSSLに致命的なバグがあることがわかった。全世界で動いているSSLプロセスが影響を受ける。
簡単に言うと、メモリ上にある任意のデータを漏洩する可能性があるバグだ。
このバグはもう2年も前からあったらしいがGoogle Security TeamのNeel Mentaに見つけられたのはつい最近で、パッチがあたったのは十数時間前だ。</p>

<p><a href="https://github.com/openssl/openssl/commit/96db9023b881d7cd9f379b0c154650d6c108e9a3">Add heartbeat extension bounds check.</a></p>

<p>基本的には<a href="http://heartbleed.com/">heartbleed.com</a>に詳細が記載されていて、危険なOpenSSLのバージョン、ディストリビューションが書いてある。
対応方法も書いてある。今回はエンジニアとして、コードを読んでどういうバグだったのか理解してみたかったので書いてみる。</p>

<!-- more -->


<h2>問題の箇所</h2>

<p>修正箇所である<code>ssl/d1_both.c</code>の該当関数を見てみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">dtls1_process_heartbeat</span><span class="p">(</span><span class="n">SSL</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">*</span><span class="n">pl</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">hbtype</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">payload</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">padding</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span> <span class="cm">/* Use minimum padding */</span>
</span></code></pre></td></tr></table></div></figure>


<p>heartbeatという機能の詳しいことは調べられていないけれどどうやらクライアントーサーバ型の機能を提供するものらしい。
つまり何らかのリクエストを受け取ってレスポンスを返すようなサービスを提供するものらしい。<code>dtls1_process_heartbeat</code>で大事なのは
ポインタ<code>p</code>だ。これはリクエストデータを受け取って格納している。このリクエストデータは構造体になっていて、以下のように記述されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">ssl3_record_st</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">type</span><span class="p">;</span>               <span class="cm">/* type of record */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>    <span class="cm">/* How many bytes available */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">off</span><span class="p">;</span>       <span class="cm">/* read/write offset into &#39;buf&#39; */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>    <span class="cm">/* pointer to the record data */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">;</span>   <span class="cm">/* where the decode bytes are */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">comp</span><span class="p">;</span>    <span class="cm">/* only used with decompression - malloc()ed */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">epoch</span><span class="p">;</span>    <span class="cm">/* epoch number, needed by DTLS1 */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">seq_num</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span> <span class="cm">/* sequence number, needed by DTLS1 */</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">SSL3_RECORD</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>data</code>が実際の受け取っているデータ。このデータは先頭1byteがheart beatのtypeを表し、次の2byteがそのリクエストの長さを表すような
データになっている。これを処理するコードが以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Read type and payload length first */</span>
</span><span class='line'><span class="n">hbtype</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">n2s</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span><span class='line'><span class="n">pl</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>hbtype</code>に先頭1byteのheart beatのtypeが格納される。そしてn2sは次の2byteを格納するためのマクロで以下のように定義されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* straight from the openssl source */</span>
</span><span class='line'><span class="cp">#define n2s(c,s)    ((s=(((unsigned int)(c[0]))&lt;&lt; 8)| (((unsigned int)(c[1]))   )),c+=2)</span>
</span><span class='line'><span class="cp">#define s2n(s,c)    ((c[0]=(unsigned char)(((s)&gt;&gt; 8)&amp;0xff), c[1]=(unsigned char)(((s)    )&amp;0xff)),c+=2)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>s2n</code>も後で使うことになる。つまり変数<code>payload</code>にはクライアントから受け取ったデータに設定されている、<code>length</code>を読み取って格納している。
ここでpayloadには実際に受け取ったデータの長さをチェックして格納されたわけではなく、あくまでもユーザクライアントが送ってきたlengthをそのまま設定していることを覚えておいてほしい。</p>

<p>さて次にレスポンスを返す部分のコードだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="o">*</span><span class="n">bp</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Allocate memory for the response, size is 1 byte</span>
</span><span class='line'><span class="cm"> * message type, plus 2 bytes payload length, plus</span>
</span><span class='line'><span class="cm"> * payload, plus padding</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">buffer</span> <span class="o">=</span> <span class="n">OPENSSL_malloc</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">padding</span><span class="p">);</span>
</span><span class='line'><span class="n">bp</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>bufferはレスポンスを返すための実体となるが、ここでの大きさはtype用の1byteとlength用の2byte、そして実データの長さpayloadで設定された大きさ
に余白(これは16byteに設定されている)を合わせて大きさを確保している。実際に走査するときは<code>bp</code>を通してとなる。
これに対してレスポンスデータを構築してやる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Enter response type, length and copy payload */</span>
</span><span class='line'><span class="o">*</span><span class="n">bp</span><span class="o">++</span> <span class="o">=</span> <span class="n">TLS1_HB_RESPONSE</span><span class="p">;</span>
</span><span class='line'><span class="n">s2n</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">bp</span><span class="p">);</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>リクエストデータと同じようにまず先頭1byteにheart beatのtypeを設定してやる。<code>TLS1_HB_RESPONSE</code>だ。そして先程の <code>n2s</code>の逆を行うマクロ<code>s2n</code>を利用する。
つまり<code>payload</code>に設定されている値を<code>bp</code>の次の2byteに設定する。そして最後の行がキモだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>先ほどのリクエストから得た<code>payload</code>分の長さのデータを<code>pl</code>から<code>bp</code>にコピーしている。これでレスポンスデータを構築したことになる。
これをユーザクライアントに返すことになるわけだ。</p>

<p>さて今回見つかったバグは既にここまでのコードの中にある。</p>

<h2>バグ</h2>

<p>注意して欲しいのは変数<code>payload</code>は<strong>ユーザから与えられたデータ</strong>ということだ。つまりだれでも勝手に設定できるため、<strong>正しい値が入っていない</strong>可能性がある。
この場合の正しさというのはリクエストデータの大きさを正しく反映しているかどうかということだ。
もしこの<code>payload</code>変数(受け取ったデータの先頭から2byteの値)がデータの長さを正しく反映していない、特に実際のデータ長よりも
長い値が<code>payload</code>に設定されているとしたらどうだろう。レスポンスデータを作る以下のコードは正しく動作するだろうか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>正しく動作しない。正確にいうと動作に特に影響はないが、余計なものを送ってしまう可能性がある。ここに脆弱性が生まれる。実際の<code>pl</code>に入っているデータは<code>payload</code>に設定されている値よりも短いため、<code>pl</code>から連続したメモリ領域を<code>bp</code>に
コピーしてしまう。そして、このあふれた領域にSSL秘密鍵のデータが載っていたらどうだろうか。OpenSSLプロセスであれば秘密鍵のデータをプロセスメモリ上に乗せているのは
十分考えられることだ。
このコピーされてしまったSSL秘密鍵のデータは<code>bp</code>を経由してそのままクライアントの手にわたってしまうことになる。
もちろん、最近のコンピュータはプロセスあたりのヒープ領域が大きいため、ただちに秘密鍵の値をコピーしてしまうことにはならないが、やはり可能性はゼロではない。
OpenSSLチームは以下のような修正を加えたパッチを配布している。</p>

<h2>修正</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Read type and payload length first */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">16</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* silently discard */</span>
</span><span class='line'>  <span class="n">hbtype</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n2s</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="mi">16</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* silently discard per RFC 6520 sec. 4 */</span>
</span><span class='line'>  <span class="n">pl</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>安易にユーザの設定したpayload lengthを信用するのではなくチェックをおこなってる。読み取るまえにそもそもデータ長がゼロであれば捨てる。
読み取ったあとも、実際のデータ長さよりも設定されているpayload lengthの方が大きい場合はリクエストを破棄するようにしている。
これで本来読み取られてはいけない部分のデータがレスポンスとして返ることはない。
至ってシンプルなFixだけれど、こういったものでも見逃すことはある。今回のように世界的に影響力のあるソフトウェアに対して優れたエンジニア達が
メンテを行っていてもそうなのだ。自分がコードを書くときの戒めともしたい。</p>

<p>以下を教訓としておこう。</p>

<ul>
<li>ちゃんと単体テストを書こう</li>
<li>Cよりももっとsecureな言語を使おう</li>
</ul>


<p>参考: <a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html">Diagnosis of the OpenSSL Heartbleed Bug</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[温泉津にて]]></title>
    <link href="http://lewuathe.com/blog/2014/03/29/wen-quan-jin-nite/"/>
    <updated>2014-03-29T22:19:19+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/29/wen-quan-jin-nite</id>
    <content type="html"><![CDATA[<p>「おやすみなさい」</p>

<p>なるほど、みんな地元の人達か。温泉津で過ごす夜は少し僕を戸惑わせた。
旅館に付属していない外湯と呼ばれる湯に入りにきたため、地元の人達の憩いの場にお邪魔してしまったようだ。</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.com/images/posts/2014-03-29-yunotsu/cat.jpg" />
</div>


<br>


<p>「じゃ、お先です」
「おやすみなさい」</p>

<p>そんなやりとりをして、みんな湯を上がっていく。僕はというとまだ湯につま先さえつけていない。何しろアツいのだ。
よくよく見てみるとみんな10秒くらいで出たり入ったりじゃないか。とりあえず入ってみるか。</p>

<p>少し鉄の味が残るアツい湯は体にいいらしいが、僕の頭にも強い刺激を与えたようだ。
この二、三日もやもやしていた気持ちが露わになってきた。</p>

<!-- more -->


<p>三月は別れの季節という。そうだ多くの学生は卒業をし、新生活の準備をする。進学する者、就職する者、地方に行く者、上京する者、海外に行く者。
特に僕の同級生は大学院に進んだ人が多いから僕のTLは卒業の話題でここしばらく埋められている。行き先は様々だけれど、今ある環境を捨てて新しい
土地にいくという意味では変わらない。</p>

<p>二年前、僕も歩んだ道だ。社会人にとっては「卒業」という機会は当然のことながら黙っているとやってこない。二年前住み始めた家に今も住み、二年前働き始めた会社で今も働いている。
僕は２年前決断をしていた。それは大学院に進学せずに就職するという決断だ。その決断は今でも間違っていたとは思わない。二年前できていなかったことでできるようになったことは数多い。
二年前出会えなかった人とも出会うことができたし、二年間働いた経験というのは自分にとって非常に濃い。そしてなにより僕には新しい家族がいる。実家とは異なる帰るべき家があるのだ。
二年前の自分と、なりたい自分をならべた時に今の自分はその間にいるとそう断言できる。それくらい毎日を大切に生きてきたし、昨日の自分よりも今日の自分の方が「なりたい自分」であるよう
心がけてきた。そんなことは分かっているんだ。だとしてもだ。自分が机を並べた友人達がまた自分と同じように社会に出て働きにでるこの交差点のようなこの二年後の三月になって感じざるを得ない。</p>

<p>あのとき選択しなかったすべての決断を超えてなお余りある成長をしただろうか</p>

<p>大学院に進学することを決断したあとの二年間以上の二年間だっただろうか。留学することを決意したあとの二年間以上の二年間だっただろうか。
他の会社に入るという決意をしたあとの二年間以上の二年間だっただろうか。自分で事業を起こしてみるという決意をしたあとの二年間以上の二年間だっただろうか。</p>

<p>あげればきりがない。自分が選ぶことのできた選択肢、そうだなかった選択肢様々ある。けれども自分が選ばなかった選択肢をとった人たちを羨む気持ちがどこかにあることは確かだ。
社会に出てからも出遅れないように、大学に残った人たちに負けないように、自分で前に進もうと努力をした。そのことは報われただろうか。二年前はそのことが二年後分かると信じていた。</p>

<p>湯を上がるときに口にしようと思っていた言葉があった。</p>

<p>「お先に失礼します」</p>

<p>すると、変わらないトーンで背中から聞こえてきた。</p>

<p>「おやすみなさい」</p>

<p>脱衣所で浴衣を着たけれど、自分の心は丸裸にすることができた。</p>

<p>なりたい自分がいつの間にか見られたい自分になっていた。
どこに進むかよりも前に進むことばかりに目がいく自分になっていた。</p>

<p>火照った体を冷ます三月の風にはどことなく鉄の香りがのっていた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[禅と手段と目的と]]></title>
    <link href="http://lewuathe.com/blog/2014/03/25/shan-toshou-duan-tomu-de-to/"/>
    <updated>2014-03-25T21:01:59+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/25/shan-toshou-duan-tomu-de-to</id>
    <content type="html"><![CDATA[<p>久しぶりに日本語で書いてみる。
言葉のリズムが日本語でないと掴めない箇所があるので、やっぱり自分の母国語は日本語なんだとつくづく感じた。
言葉のリズムというのはなかなか掴みづらくて、僕の中では「つい口ずさんでみたくなる言葉」が最もリズムのいい言葉だと思っている。一昔前でいうと『<a href="http://www.amazon.co.jp/%E5%A3%B0%E3%81%AB%E5%87%BA%E3%81%97%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84%E6%97%A5%E6%9C%AC%E8%AA%9E-%E6%96%8E%E8%97%A4-%E5%AD%9D/dp/4794210493">声に出して読みたい日本語</a>』なんていうのが流行ったけれど、あれに近いかもしれない。ただ僕の感覚はもっと俗っぽくて巷で流れているくだらないCMソングなんかはわかりやすい「つい口ずさんでみたくなる言葉」なんじゃないかと。</p>

<p>さて、手段の目的化と禅のお話。</p>

<!-- more -->


<p>大抵の場合は生きていく上でそれが長期的であれ、短期的であれ何らかの目的を持っている場合が多い。この大学に入ろう、この大会で優勝を目指そう、会社で出世しよう、お金持ちになろう。
まず目的があって、それを達成するための手段がある。僕は学校や家庭でそれを教わってきたし、友達の横顔や先輩の背中からそれを感じとっていたかもしれない。なんにせよその考えは今でも僕の頭に染み付いている。</p>

<p>特に「練習と本番」は人生の初期において最も端的に「手段と目的」を具体化させてくれるもののひとつだと僕は思う。今まで生きてきて何度もこの「練習と本番」のサイクルを味わったし、それは今でも変わっていない。何か自分にとって特別な「本番」を用意して、それに向かって具体的に「練習」をしていくというのは、何をしていいかわからない自分のような子供にとっては生き方の答えを教えてくれるような黄金のサイクルに見えた。</p>

<p><strong>ただ僕は本番が嫌いだった。</strong></p>

<p>僕にとっては本番は二の次だった。結果を出すためのプレッシャーや緊張、結果を見届けて興奮や挫折を味わうこともある。いい結果が出れば嬉しいし、そうでなければ落ち込んだりもする。
<strong>そのことが嫌だった。</strong> 結果を出すことよりも、毎日続けられたことが楽しかったし自分にとって最も充実した時間になっていた。結果なんかでてしまってその毎日が終わってしまうことが残念でならない。もちろん毎日続けられたのは「本番」という締め切りがあったからであって、先の見えないイバラの道を血を滴らせながら進む勇気は僕にはない。終わりが分かっていたから続けられた。毎日、何時間も勉強できたり、練習できたのは本番が用意されていていつか終わることが分かっていたからだ。自らの体力や気力に限りがあることが分かっていて、それが本番まで持つと分かっていたからだ。</p>

<p>だからこそ、本番で結果を与えられるという形ではなく僕は僕自身にこれからのための気力やバイタリティーを与えるという形で毎日の練習が報われて欲しかった。</p>

<p>僕にとっての練習は本番で成果を出すための手段ではなく、毎日それ自体が本番だった。練習それ自体が目的だった。毎日机に向かうこと、毎日楽器を吹くこと、毎日泳ぐこと。
といっても練習している時に本番なんて来ないでほしいと思って練習しているわけではなく、本番で自分の臨んだ通りのパフォーマンスが出せるように毎日努力してきた。<strong>ただその事自体が楽しかった。</strong> 結果が出た時も楽しい。ただそれは特別その瞬間が幸福というわけではないような気がする。練習から本番までに感じる幸福は本当はずっと一様なんじゃないだろうか。毎日が同様に楽しいらしい。もし本番で結果がでた瞬間が一番幸福に感じられたとしたらそれは今まで頑張ってきたからじゃないだろうか。一様分布の累積密度関数の値は本番直前に最大値をとる。</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.com/images/posts/2014-03-25-zen/graph2.png" />
</div>


<p>実は答えは800年も前から出ていたのかもしれない。<a href="http://www.amazon.co.jp/%E7%A6%85%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89-%E3%83%93%E3%82%AE%E3%83%8A%E3%83%BC%E3%82%BA%E3%83%BB%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89-%E3%82%B5%E3%83%B3%E3%82%AC%E6%96%B0%E6%9B%B8-%E9%88%B4%E6%9C%A8%E4%BF%8A%E9%9A%86/dp/4905425166]">禅マインド ビギナーズ・マインド</a>は以前読んだ<a href="http://wired.jp/2013/12/29/enlightenment-engineers-vol9/">Wiredの記事</a>に興味を持って手にとってみた本。</p>

<p>そこにはこんなことが書いてあった。</p>

<blockquote><p><strong>坐禅とはなにかのためになにかをするわけではありません</strong></p></blockquote>

<p>只管打座はただ座るという意味。禅の教えのひとつだ。何か目的があってそれを達成するために何かを行うというわけではなく、ただ何かをするということ自体に価値をおく考えが禅の根底にある。ただご飯を食べる、ただ歩く、ただ本を読む、ただ座る。こんな考え古臭いなと思うとそうとも思えない。<a href="http://mirakui-diary.hatenablog.com/entry/2014/03/14/145448">わくわくパンダさん</a>は「人生の本番は人生のどの瞬間においても常にその瞬間にしかない」と言っているし、<a href="http://blog.livedoor.jp/kensuu/archives/54215643.html">けんすうさん</a>も日本には「手段のためなら目的を選ばない」というような考えがあると書いてる。こういった考えが大勢占めてきたとも思わないし、正解だとも思わない。ただその逆もそうなんだ。目的があってそこに向かってひたすら努力するという生き方が正解というわけでもない。ただ毎日を真剣に生きる。それが何につながるという考えもなしに生きてみてもいい。僕自身はハイブリッドに生きてみたい。目的はあってもいいし、なくてもいい。目的地がある旅も、ぶらぶら散歩もきっと両方楽しめるだろう。けれど人生で過ごす大半の時間は「練習時間」だ。</p>

<p>楽しい練習ができるに越したことはない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next Tile on Tempai]]></title>
    <link href="http://lewuathe.com/blog/2014/03/19/next-tile-on-tempai/"/>
    <updated>2014-03-19T22:57:59+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/19/next-tile-on-tempai</id>
    <content type="html"><![CDATA[<p>I tried <a href="http://www.itmedia.co.jp/enterprise/articles/1004/03/news002_2.html">this problem</a>.</p>

<p>Your program receives the hand of mahjong. Returns the &ldquo;Waiting style&rdquo; of this hand.
But there are some conditions as below.</p>

<ul>
<li>There are no <em>Jihai</em>, only <em>Manzu</em></li>
<li>Make <em>Juntsu</em>, <em>Kohtsu</em> and <em>Head</em></li>
<li>Regard different order waiting as the same</li>
<li>If there are no waiting, no output</li>
</ul>


<!-- more -->


<p>My source code are pushed <a href="https://github.com/Lewuathe/java-GoF/blob/master/AtCoder/MahjongWait/src/Main.java">this repository</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by Kai Sasaki on 3/19/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span> <span class="n">tiles</span><span class="o">[],</span> <span class="kt">boolean</span> <span class="n">isHead</span><span class="o">,</span> <span class="n">String</span> <span class="n">ans</span><span class="o">,</span> <span class="kt">int</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// In order to remove practical same hands,</span>
</span><span class='line'>              <span class="c1">// this operation should be done before bigger values</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// In order to remove practical same hands,</span>
</span><span class='line'>              <span class="c1">// this operation should be done before finding head</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">isHead</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Find *Kohtsu*</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tmp</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tiles</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>                                                                                                                                                                                               <span class="n">String</span> <span class="n">tmpAns</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">+</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;(%d%d%d)&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="n">search</span><span class="o">(</span><span class="n">tmp</span><span class="o">,</span> <span class="n">isHead</span><span class="o">,</span> <span class="n">tmpAns</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// In order to remove practical same hands,</span>
</span><span class='line'>              <span class="c1">// this operation should be done before bigger values</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// In order to remove practical same hands,</span>
</span><span class='line'>              <span class="c1">// this operation should be done before finding head</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">isHead</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Find *Juntsu*</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tmp</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tiles</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">tmpAns</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">+</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;(%d%d%d)&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>                <span class="n">search</span><span class="o">(</span><span class="n">tmp</span><span class="o">,</span> <span class="n">isHead</span><span class="o">,</span> <span class="n">tmpAns</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isHead</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Find head</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tmp</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tiles</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">tmpAns</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">+</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;(%d%d)&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="n">search</span><span class="o">(</span><span class="n">tmp</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">tmpAns</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// No more mentsu</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">oneCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">twoCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">sum</span> <span class="o">+=</span> <span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">oneCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">twoCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 000100000</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oneCount</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;[%d]&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 000001100</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oneCount</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="s">&quot;[12]&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="s">&quot;[89]&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tiles</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;[%d%d]&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">twoCount</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">+=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;[%d%d]&quot;</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Receive string that represents hand values</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">tiles</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">9</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Initialization</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">tiles</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Setting tiles array</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">tile</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">hand</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>            <span class="n">tiles</span><span class="o">[</span><span class="n">tile</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">search</span><span class="o">(</span><span class="n">tiles</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the simple depth first search algorithm. Ths main point of this code is in the
main method. I expressed the data structure that represents <em>Hand</em> as the interger array.
Each integer corresponds to the count of each tile. So in order to calculate the waiting tile,
in this case, all you have to know is the count of each tile. With this data structure, you don&rsquo;t
need to retain complex structure. And also the operation such as finding <em>Juntsu</em> and so on is easy
to execute bacause only increment or decrement of each value of this array.</p>

<p>It took me a long time but thanks to this training, a search algorithm such as <a href="http://en.wikipedia.org/wiki/Depth-first_search">DFS</a>
is no more alien to me. It&rsquo;s friend!</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marble Problem]]></title>
    <link href="http://lewuathe.com/blog/2014/03/18/marble-problem/"/>
    <updated>2014-03-18T21:45:14+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/18/marble-problem</id>
    <content type="html"><![CDATA[<p>I tried this problem.</p>

<h2>Marble</h2>

<p>There are boxes infinitely in a straight line. Each box is labeled from left side &hellip;,-2,-1,0,1,2,&hellip; to the right side.
Now <em>R</em> red marbles are in the -100th box. In the same way, <em>G</em> green mables are in the 0th box and <em>B</em> blue mables are in the 100th box.
There no other marbles in all boxes. All boxes should have one marble at most.
Repeat below process and make the number of marbles of each each at most one.</p>

<ul>
<li>Select one marble, move it left box or right box.</li>
<li>However one box must not have more than two marbles that has different colors each other</li>
</ul>


<p>Calculate minimum required steps.</p>

<!-- more -->


<p>I wrote below code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by sasakiumi on 3/18/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">g</span><span class="o">),</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">steps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">steps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">pre</span> <span class="o">=</span> <span class="n">steps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">steps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pre</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">steps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">r</span><span class="o">)</span> <span class="o">+</span> <span class="n">steps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">g</span><span class="o">)</span> <span class="o">+</span> <span class="n">steps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK. I understand this code does not put the case of 100 marbles that is same color into consideration.
If there are 200 red marbles, this code does not work properly. But I have not found effective way to solve all cases.
I will update this problem later. If you have any good idea, please let me know.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM144 Div1]]></title>
    <link href="http://lewuathe.com/blog/2014/03/17/srm144-div1/"/>
    <updated>2014-03-17T21:57:38+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/17/srm144-div1</id>
    <content type="html"><![CDATA[<p>After a long time, I returned to <a href="http://www.topcoder.com/">TopCoder</a>.
I forgot to write algorithm for programming contest such as TopCoder. But previously
I realized that it is so important for me to write accurate and fast algorithm within finite time.
In order to improve my programming skill again, I returned back to the TopCoder.</p>

<!-- more -->


<p>SRM is a little hart to me, as first, I tried some practices. Today I solved SRM144 binary code problem.
This problem decode messages recursively. For example, when you get the message <code>"123210122"</code>, this is encode of
<code>"011100011"</code>. Suppose the first message is P, and second is Q. Now below equation is realized.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P[i] = Q[i-1] + Q[i] + Q[i+1]</span></code></pre></td></tr></table></div></figure>


<p>With this recusive rule, you have to decode given message. My code is below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryCode</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">decode</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Two answers should be solved</span>
</span><span class='line'>      <span class="c1">// Each answer is correspond to Q[0] = 0 and Q[0] = 1 case.</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">Integer</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Boolean</span> <span class="n">isOut</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Calculate two cases</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// In the case of negative value is received, answer should be &quot;NONE&quot;</span>
</span><span class='line'>            <span class="n">isOut</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// For improve speed performance, I use StringBuffer</span>
</span><span class='line'>            <span class="n">StringBuffer</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// First and second factor cannot be put on inside loop bacause these are not the sum of three factors</span>
</span><span class='line'>            <span class="n">p</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">start</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">))</span> <span class="o">-</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>            <span class="n">p</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">p1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Decode each digit</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">message</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Integer</span> <span class="n">d</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span> <span class="o">-</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span> <span class="o">-</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">j</span><span class="o">));</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;NONE&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">isOut</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">p</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">d</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Last digit is not need to retained</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(!</span><span class="n">isOut</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// This is guard. But I am not satisfied with this line :(</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;2&#39;</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;3&#39;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;NONE&quot;</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrote this code about 30 minutes. It is not enough to fight on SRM. And in addition to this, I am not satisfied with my algorithm expecially
last clause. I don&rsquo;t want to write exceptional logic as possible. If anyone write code about this problem, please inform me and give me a chance to
look into your code.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forget Grief, Keep Data]]></title>
    <link href="http://lewuathe.com/blog/2014/03/11/forget-grief-keep-data/"/>
    <updated>2014-03-11T19:48:31+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/11/forget-grief-keep-data</id>
    <content type="html"><![CDATA[<p>Three years ago, I walked around Shinjuku at Tokyo.
I had not yet obtained informal decision from current company for which I now work. So I walked around Shinjuku
for job hunting as pre-graduate student called &ldquo;Shukatsu-sei&rdquo; in Japanese.</p>

<p>First I wondered what happened. Then I escaped from the building shook violently.
In spite of the pleasant friday always, those who were enjoying before the weekend were not the same to the ones
of ordinary day. 2011 Tōhoku earthquake and tsunami struck Japan, my homeland.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.com/images/posts/2014-03-11-forget-grief/eye_catch.jpg" />
</div>


<br>




<!-- more -->


<p>All media in Japan are filled with the memorial of that disaster today.
They said &ldquo;Never forget <em>that day</em>&rdquo; or &ldquo;Hang over the memory to the next generation&rdquo;.
These real intentions seem to me as the power that does not allow me to forget the grief of <em>that day</em>.
Of course from the point of view of disaster prevention, information obtained through such misery disaster has to be kept in our society.
But all needed to be kept for the future are concrete data, aren&rsquo;t it?</p>

<p>I think grief doesn&rsquo;t help us recovering from the mental injury completely. Furthermore, it is infectious
to all over our country. So this anniversary compelled us be in deep sorrow. Never allows us to laugh, smile
and joy. Of course I understand that the victims cannot avoid sinking to sorrow. But is this emotion need to be spread through
radio, TV and internet? If anything, it is better to make them smile to recovering from deep sorrow as much as possible.</p>

<p>It is very important for progressing to the future to laugh. Above all recovering from this cruel
disaster. As well as grief, a smile is also infectious. It has the power of making our country better place
for the future. So I want to spread smile rather than grief.</p>

<p>The media might has the intention of keeping the memory in order to develop the disaster prevention system or making people
keep doing support affected area for a long time. I agree with this attempt somewhat because all people tend to forget anything.
But all what is necessary for developing disaster prevention system to keep might concrete data obtained from the situation of those days, isn&rsquo;t it?</p>

<p>How high the <em>tsunami</em> was?</p>

<p>How many building were collapsed by quake?</p>

<p>What kind of resources became a shortage just after the disaster?</p>

<p>Which nuclear reactor was more fault-torerant, <a href="http://en.wikipedia.org/wiki/Boiling_water_reactor">BWR</a> or <a href="http://en.wikipedia.org/wiki/Pressurized_water_reactor">PWR</a>?</p>

<p>These data can be used for making the scheme to stand up to the disaster that has same scale to 3.11.
Such research is now ongoing and will be kept going. These big data should be stored in the reusable state
and be opened to all people who are not affected by this disaster.
So keep data in your mind not grief. Whole my country should turn
toward the bright future where all people are smile. I think this future is not what comes to us as the result of all
recovery process, but it exists on the way to the future. So it is now.
Smile is not what came to us someday but what should be kept spreading whole my country today. So it is now.</p>

<p>Three years has passed after that 3.11 earthquake. It is the time to forget all grief from our heart.
What should be kept in our heart is only data. With these practical data, we can construct the country that is unafraid
of next disaster which might come to our homeland again. Let&rsquo;s spread these knowledge all over the world. Disasters occur on a daily basis.
While I do it this way, People affected by misery disasters currently are seeking these knowledge today.
This is urgent. We have no time to spread grief and weaken our life force.</p>

<p>Forget grief, Keep data.</p>

<p>Our country surely gets better with smile.
Our world surely gets better with smile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference Between PCA and dA]]></title>
    <link href="http://lewuathe.com/blog/2014/03/10/difference-between-pca-and-da/"/>
    <updated>2014-03-10T22:08:40+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/10/difference-between-pca-and-da</id>
    <content type="html"><![CDATA[<p>Today I gave a presentation about Deep Learning in my office. Through this presentation, I felt
the difficulty of explanation about mathematic notion without equations. Complex concept should
be attached with some equations. Simplicity was one of the biggest purpose of my presentaion.</p>

<p>Anyway, there is a question I cannot answer clearly.</p>

<blockquote><p>What&rsquo;s the difference between <a href="http://en.wikipedia.org/wiki/Principal_component_analysis">PCA</a> and <a href="http://en.wikipedia.org/wiki/Nonlinear_dimensionality_reduction#Autoencoders">Denoised Autoencoder</a>?</p></blockquote>

<p>It was a difficult question for me. So I studied what distinguished PCA and dA primaly.</p>

<!-- more -->


<h2>PCA</h2>

<p>PCA is an abbreviation of principal component analysis. This algorithm is used when you want to reduce the degree of the input data.
Machine learning algorithms might work faster with low degree data. If you don&rsquo;t have a firm reason for using original data, it is better
to reduce the degree from a point of view of performance. In order to work properly with reduced data, processed data should be sparse because
each data point keeps original characteristics for training a valid model. There are two ways mainly, one is the based on maximizing of variance
of original data. This method maximizes below covariance matrix.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.com/images/posts/2014-03-10-pca-and-sda/covariance.png" />
</div>


<p>This optimization calculation is achieved by obtaining eigenvectors. It is a little slow because of handling matrix.
The second method is based on error minimization way. In advance you define degree reduced data and minimize its difference.</p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.com/images/posts/2014-03-10-pca-and-sda/error.png" />
</div>


<p>Both method have below features.</p>

<ul>
<li>Making straight projection</li>
<li>Irreversible</li>
<li>Extracting characteristics</li>
<li>O(D<sup>3</sup>)</li>
</ul>


<h2>Denoised autoencoder</h2>

<p>Denoised autoencoder is a kind of autoencoder which adds some noise on original data delibarately. Through this process this model
is capable obtaining proper weight for restoring original data. This model is used mainly the field of deep learning.
This autoencoder has below characteristics.</p>

<ul>
<li>Making model parameter</li>
<li>Reversible</li>
<li>Extracting characteristics</li>
<li>O(D<sup>2</sup>)</li>
</ul>


<h2>Conclusion</h2>

<p>I think the most essential difference between PCA and denoised autoencoder is reversibility. PCA cannot restore original data bacause
it losts the distance from the <a href="http://users.ics.aalto.fi/praiko/papers/pca_iconip/node3.html">principal subspace</a>. On the other hands,
denoised autoencoder keeps its weight matrix inside own model. So it requires only adding transpose matrix of this weight for restoring.
Please let there be no misunderstanding of usability of PCA, the purpose of PCA is not restoring original data. It is improving calculation cost through
degree reduction. Denoised autoencoder must have weight parameter for restoring original data because its output become the input of next layer.
So it has the ability to restore original data.</p>

<p>Though these two algorithms looks same at the first sight, the purposes are different. This produces the different features between PCA and denoised
autoencoder.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logistics Regression With Sparse Vector]]></title>
    <link href="http://lewuathe.com/blog/2014/03/09/logistics-regression-with-sparse-vector/"/>
    <updated>2014-03-09T19:54:25+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/09/logistics-regression-with-sparse-vector</id>
    <content type="html"><![CDATA[<p>In my project I have to develop a model that is capable of predicting the count of page view
from sparse vector data such as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
</span><span class='line'> 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]</span></code></pre></td></tr></table></div></figure>


<p>However I found it was difficult to make a model which can be applied to practical use case. From sparse vector, my current model
doesn&rsquo;t look trained sufficiently. I used <a href="http://scikit-learn.org/stable/index.html">scikit-learn</a> in python.</p>

<!-- more -->


<p>My current code is below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">svm</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">rand</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">RandomState</span><span class="p">(</span><span class="mi">1234</span><span class="p">)</span>
</span><span class='line'>    <span class="n">xs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">ys</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Train&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">30</span><span class="p">):</span>
</span><span class='line'>      <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">      x is a sparse vector generated from binomial distribution</span>
</span><span class='line'><span class="sd">      x has a 1 vector generally speaking</span>
</span><span class='line'><span class="sd">     &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">rand</span><span class="o">.</span><span class="n">binomial</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>        <span class="n">xs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">      y is obtained from gaussian distribution which has 0.7 as mean value</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="n">rand</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">clf</span> <span class="o">=</span> <span class="n">svm</span><span class="o">.</span><span class="n">SVR</span><span class="p">()</span>
</span><span class='line'>  <span class="c"># Train data</span>
</span><span class='line'>    <span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Test&quot;</span>
</span><span class='line'>    <span class="n">ts</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">rand</span><span class="o">.</span><span class="n">binomial</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="o">=</span><span class="mf">0.01</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Through this process I can only get these results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span> <span class="mf">0.7507838</span>   <span class="mf">0.7507838</span>   <span class="mf">0.75058871</span>  <span class="mf">0.7507838</span>   <span class="mf">0.75058871</span>  <span class="mf">0.75058871</span>
</span><span class='line'>  <span class="mf">0.73136874</span>  <span class="mf">0.7507838</span>   <span class="mf">0.75058871</span>  <span class="mf">0.75058871</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this result doesn&rsquo;t have valid significance for predicting. All values look the same to me!
Simple support vector machine might not be suitable to predict with sparse vector data. But I have no idea
how to make alternate model that can be constructed with sparse vectors. Is there anyone who have a good idea or
a paper which has proper algorithm for this case? I want to know the algorithm which can construct better regression
model from sparse vector. Please let me know that.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memento Pattern in Java]]></title>
    <link href="http://lewuathe.com/blog/2014/03/08/memento-pattern-in-java/"/>
    <updated>2014-03-08T00:02:29+09:00</updated>
    <id>http://lewuathe.com/blog/2014/03/08/memento-pattern-in-java</id>
    <content type="html"><![CDATA[<p>Recently, I implemented some design patterns following <a href="http://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797327030">this book</a>. This book introduces 23 design patterns that all programmers should know when you write according to OOP instructions. So now I want to write this article about some of these patterns and explain these. All codes that used in this article are put <a href="https://github.com/Lewuathe/java-GoF/tree/master/Memento">here</a></p>

<!-- more -->


<h2>What is Memento pattern?</h2>

<p>Memento pattern is used for recording past statuses and for recovering susequently. For example when you use text editor such as vim or emacs, do you use <code>undo</code>?
Why do you think this <code>undo</code> command can perform? As one way, all statuses(sometimes not all) are recorded as a type of object. Then you can recover this object
to use this recovered data in your application. Let&rsquo;s picking up game example, examine the structure of memento pattern.</p>

<h2>Main</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">game.Gamer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">game.Memento</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Gamer</span> <span class="n">gamer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gamer</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Memento</span> <span class="n">memento</span> <span class="o">=</span> <span class="n">gamer</span><span class="o">.</span><span class="na">createMemento</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;=== &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Current: &quot;</span> <span class="o">+</span> <span class="n">gamer</span><span class="o">);</span>
</span><span class='line'>            <span class="n">gamer</span><span class="o">.</span><span class="na">bet</span><span class="o">();</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Money: ¥&quot;</span> <span class="o">+</span> <span class="n">gamer</span><span class="o">.</span><span class="na">getMoney</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">gamer</span><span class="o">.</span><span class="na">getMoney</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">memento</span><span class="o">.</span><span class="na">getMoney</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Save current state&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">memento</span> <span class="o">=</span> <span class="n">gamer</span><span class="o">.</span><span class="na">createMemento</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">gamer</span><span class="o">.</span><span class="na">getMoney</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">memento</span><span class="o">.</span><span class="na">getMoney</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Restore previous state&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">gamer</span><span class="o">.</span><span class="na">restoreMemento</span><span class="o">(</span><span class="n">memento</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On every turn, a gamer bets and gets money or some fruits. If you get more money at the last of game you win. It&rsquo;s very simple.
Please pay attention to line 7. Mement pattern is used there. This memento object is used when gamer can get more money or reduce
his money to half of previous one. For saving, call <code>gamer.createMemento()</code> and for restoring, call <code>gamer.restoreMemento()</code>.
All concepts that are included in memento pattern are these. It is easy to understand this pattern. Do you think you can write this pattern
in your production code tomorrow? Please try it.</p>

<p>As a reference, memento class is also placed here. But it is not core concept of memento pattern. You can arrange this concrete logic for your use
if you could only save and restore statuses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">game</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Memento</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">money</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ArrayList</span> <span class="n">fruits</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMoney</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">money</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Memento</span><span class="o">(</span><span class="kt">int</span> <span class="n">money</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">money</span> <span class="o">=</span> <span class="n">money</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fruits</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addFruit</span><span class="o">(</span><span class="n">String</span> <span class="n">fruit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fruits</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">fruit</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span> <span class="nf">getFruits</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">List</span><span class="o">)</span><span class="n">fruits</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is there any unclear stuff? Please look into <a href="https://github.com/Lewuathe/java-GoF/tree/master/Memento">this codes</a>.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
</feed>
