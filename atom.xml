<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The first cry of Atom]]></title>
  <link href="http://lewuathe.github.io/atom.xml" rel="self"/>
  <link href="http://lewuathe.github.io/"/>
  <updated>2014-02-23T19:53:12+09:00</updated>
  <id>http://lewuathe.github.io/</id>
  <author>
    <name><![CDATA[Kai Sasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trying Word2vec From Twitter Corpus]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/23/trying-word2vec-from-twitter-corpus/"/>
    <updated>2014-02-23T17:47:16+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/23/trying-word2vec-from-twitter-corpus</id>
    <content type="html"><![CDATA[<p>Do you know <a href="https://github.com/dav/word2vec">word2vec</a>? This library is one of the hottest module which provides an efficient implementation of the continuous bag-of-words and skip-gram architectures for computing vector representations of words.</p>

<p>Recently, my collegues told me what word2vec is. From that time, I want to try this library in some chance. This time, I trained this skip-gram model with twitter corpus.</p>

<!-- more -->


<h2>Install word2vec</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/dav/word2vec.git</span></code></pre></td></tr></table></div></figure>


<p>There are demo scripts. Let me see demo-word.sh.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DATA_DIR=../data
</span><span class='line'>BIN_DIR=../bin
</span><span class='line'>SRC_DIR=../src
</span><span class='line'>
</span><span class='line'>TEXT_DATA=$DATA_DIR/text8
</span><span class='line'>VECTOR_DATA=$DATA_DIR/text8-vector.bin
</span><span class='line'>
</span><span class='line'>pushd ${SRC_DIR} && make; popd
</span><span class='line'>
</span><span class='line'>if [ ! -e $VECTOR_DATA ]; then
</span><span class='line'>  
</span><span class='line'>  if [ ! -e $TEXT_DATA ]; then
</span><span class='line'>    wget http://mattmahoney.net/dc/text8.zip -O $DATA_DIR/text8.gz
</span><span class='line'>    gzip -d $DATA_DIR/text8.gz -f
</span><span class='line'>  fi
</span><span class='line'>  echo -----------------------------------------------------------------------------------------------------
</span><span class='line'>  echo -- Training vectors...
</span><span class='line'>  time $BIN_DIR/word2vec -train $TEXT_DATA -output $VECTOR_DATA -cbow 0 -size 200 -window 5 -negative 0 -hs 1 -sample 1e-3 -threads 12 -binary 1
</span><span class='line'>  
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>echo -----------------------------------------------------------------------------------------------------
</span><span class='line'>echo -- distance...
</span><span class='line'>
</span><span class='line'>$BIN_DIR/distance $DATA_DIR/$VECTOR_DATA</span></code></pre></td></tr></table></div></figure>


<p>The main part of demo is below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> time $BIN_DIR/word2vec -train $TEXT_DATA -output $VECTOR_DATA -cbow 0 -size 200 -window 5 -negative 0 -hs 1 -sample 1e-3 -threads 12 -binary 1</span></code></pre></td></tr></table></div></figure>


<p>I found that the only requirement of training data was morphological analyzed text. For example, below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>病院
</span><span class='line'>の
</span><span class='line'>待合室
</span><span class='line'>に
</span><span class='line'>い
</span><span class='line'>たら
</span><span class='line'>隣
</span><span class='line'>の
</span><span class='line'>人
</span><span class='line'>が</span></code></pre></td></tr></table></div></figure>


<p>Then how can I make these corpus from twitter API?</p>

<h2>Making twitter corpus</h2>

<p>I wrote this script that access twiter search API. In version 1.1, public timeline API has been remove from service.
So you should make corpus from only twitter search API if you want to categorize by language type. Because only search API has
<code>lang</code> parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">yaml</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TwitterSearch</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;./config.yml&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_config</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_lang</span> <span class="o">=</span> <span class="s">&#39;ja&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_api</span> <span class="o">=</span> <span class="n">twitter</span><span class="o">.</span><span class="n">Api</span><span class="p">(</span>
</span><span class='line'>            <span class="n">consumer_key</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_config</span><span class="p">[</span><span class="s">&quot;consumer_key&quot;</span><span class="p">],</span>
</span><span class='line'>            <span class="n">consumer_secret</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_config</span><span class="p">[</span><span class="s">&quot;consumer_secret&quot;</span><span class="p">],</span>
</span><span class='line'>            <span class="n">access_token_key</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_config</span><span class="p">[</span><span class="s">&quot;access_token_key&quot;</span><span class="p">],</span>
</span><span class='line'>            <span class="n">access_token_secret</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_config</span><span class="p">[</span><span class="s">&quot;access_token_secret&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
</span><span class='line'>        <span class="n">search_word</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">word</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>    <span class="c"># OK</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_api</span><span class="o">.</span><span class="n">GetSearch</span><span class="p">(</span><span class="n">term</span><span class="o">=</span><span class="n">search_word</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_lang</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">status</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>            <span class="n">text</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">=</span> <span class="s">u&#39;あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん&#39;</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">TwitterSearch</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each line has one tweet text. These texts are searched with japanese syllabary, &ldquo;あいうえお&hellip;&rdquo;
in order to make searching logic more simple. But there might be room for improvement in this part. If you want to create more complex search queries, change <code>words</code>.</p>

<p>This script makes such outputs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">あ、猫話はあちら様の凛ちゃんの話です。うちの凛ちゃんは鮫なので。あしからず。</span>
</span><span class='line'><span class="err">あああ乱視＆鳥目でこの時間の外出全然見えないいいいいい</span>
</span><span class='line'><span class="err">お散歩に行きたくなりますね。あ、今日は猫さんの日なんですね！</span>
</span><span class='line'><span class="err">あぷりを、いんすとーーるしたぜ。</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Morphological analysis</h2>

<p>I used <a href="http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html">MeCab</a> for the morphological analysis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">mecab</span> <span class="n">row_text</span><span class="o">.</span><span class="n">txt</span> <span class="o">&gt;</span> <span class="n">morphological_output</span><span class="o">.</span><span class="n">txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>This library generates below output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">病院</span>    <span class="err">名詞</span><span class="p">,</span><span class="err">一般</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">病院</span><span class="p">,</span><span class="err">ビョウイン</span><span class="p">,</span><span class="err">ビョーイン</span>
</span><span class='line'><span class="err">の</span>      <span class="err">助詞</span><span class="p">,</span><span class="err">連体化</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">の</span><span class="p">,</span><span class="err">ノ</span><span class="p">,</span><span class="err">ノ</span>
</span><span class='line'><span class="err">待合室</span>  <span class="err">名詞</span><span class="p">,</span><span class="err">一般</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">待合室</span><span class="p">,</span><span class="err">マチアイシツ</span><span class="p">,</span><span class="err">マチアイシツ</span>
</span><span class='line'><span class="err">に</span>      <span class="err">助詞</span><span class="p">,</span><span class="err">格助詞</span><span class="p">,</span><span class="err">一般</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">に</span><span class="p">,</span><span class="err">ニ</span><span class="p">,</span><span class="err">ニ</span>
</span><span class='line'><span class="err">い</span>      <span class="err">動詞</span><span class="p">,</span><span class="err">自立</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">一段</span><span class="p">,</span><span class="err">連用形</span><span class="p">,</span><span class="err">いる</span><span class="p">,</span><span class="err">イ</span><span class="p">,</span><span class="err">イ</span>
</span><span class='line'><span class="err">たら</span>    <span class="err">助動詞</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">特殊・タ</span><span class="p">,</span><span class="err">仮定形</span><span class="p">,</span><span class="err">た</span><span class="p">,</span><span class="err">タラ</span><span class="p">,</span><span class="err">タラ</span>
</span><span class='line'><span class="err">隣</span>      <span class="err">名詞</span><span class="p">,</span><span class="err">一般</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">隣</span><span class="p">,</span><span class="err">トナリ</span><span class="p">,</span><span class="err">トナリ</span>
</span><span class='line'><span class="err">の</span>      <span class="err">助詞</span><span class="p">,</span><span class="err">連体化</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">の</span><span class="p">,</span><span class="err">ノ</span><span class="p">,</span><span class="err">ノ</span>
</span><span class='line'><span class="err">人</span>      <span class="err">名詞</span><span class="p">,</span><span class="err">一般</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">人</span><span class="p">,</span><span class="err">ヒト</span><span class="p">,</span><span class="err">ヒト</span>
</span><span class='line'><span class="err">が</span>      <span class="err">助詞</span><span class="p">,</span><span class="err">格助詞</span><span class="p">,</span><span class="err">一般</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">が</span><span class="p">,</span><span class="err">ガ</span><span class="p">,</span><span class="err">ガ</span>
</span><span class='line'><span class="err">「</span>      <span class="err">記号</span><span class="p">,</span><span class="err">括弧開</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">「</span><span class="p">,</span><span class="err">「</span><span class="p">,</span><span class="err">「</span>
</span><span class='line'><span class="err">あの</span>    <span class="err">連体詞</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">,</span><span class="err">あの</span><span class="p">,</span><span class="err">アノ</span><span class="p">,</span><span class="err">アノ</span>
</span></code></pre></td></tr></table></div></figure>


<p>This outputs include a part of speech, and prununciations. So remove it with <code>awk</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">awk</span> <span class="s">&#39;{ print $1 }&#39;</span> <span class="o">&lt;</span> <span class="n">morphological_output</span><span class="o">.</span><span class="n">txt</span> <span class="o">&gt;</span> <span class="n">words</span><span class="o">.</span><span class="n">txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">病院</span>
</span><span class='line'><span class="err">の</span>
</span><span class='line'><span class="err">待合室</span>
</span><span class='line'><span class="err">に</span>
</span><span class='line'><span class="err">い</span>
</span><span class='line'><span class="err">たら</span>
</span><span class='line'><span class="err">隣</span>
</span><span class='line'><span class="err">の</span>
</span><span class='line'><span class="err">人</span>
</span><span class='line'><span class="err">が</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, now you can train skip-gram algorithm with this data.</p>

<h2>Training</h2>

<p>This is my training script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">DATA_DIR</span><span class="o">=</span>../data
</span><span class='line'><span class="nv">BIN_DIR</span><span class="o">=</span>../bin
</span><span class='line'><span class="nv">SRC_DIR</span><span class="o">=</span>../src
</span><span class='line'>
</span><span class='line'><span class="nv">TEXT_DATA</span><span class="o">=</span><span class="nv">$DATA_DIR</span>/twitter_text
</span><span class='line'><span class="nv">VECTOR_DATA</span><span class="o">=</span><span class="nv">$DATA_DIR</span>/twitter_text-vector.bin
</span><span class='line'>
</span><span class='line'><span class="nb">pushd</span> <span class="k">${</span><span class="nv">SRC_DIR</span><span class="k">}</span> <span class="o">&amp;&amp;</span> make; <span class="nb">popd</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -- Training vectors...
</span><span class='line'><span class="nb">time</span> <span class="nv">$BIN_DIR</span>/word2vec -train <span class="nv">$TEXT_DATA</span> -output <span class="nv">$VECTOR_DATA</span> -cbow 0 -size 200 -window 5 -negative 0 -hs 1 -sample 1e-3 -threads 12 -binary 1
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -----------------------------------------------------------------------------------------------------
</span><span class='line'><span class="nb">echo</span> -- distance...
</span><span class='line'>
</span><span class='line'><span class="nv">$BIN_DIR</span>/distance <span class="nv">$DATA_DIR</span>/<span class="nv">$VECTOR_DATA</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is the almost same script to <code>demo-word.sh</code>.</p>

<p>Training takes about 3 seconds. It is very short time. (But it means there are not enough training data) :(</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% ./twitter-script.sh
</span><span class='line'>~/Dropbox/MyWorks/algos/word2vec/src ~/Dropbox/MyWorks/algos/word2vec/scripts
</span><span class='line'>gcc word2vec.c -o ../bin/word2vec -lm -pthread -O2 -Wall -funroll-loops
</span><span class='line'>gcc word2phrase.c -o ../bin/word2phrase -lm -pthread -O2 -Wall -funroll-loops
</span><span class='line'>gcc distance.c -o ../bin/distance -lm -pthread -O2 -Wall -funroll-loops
</span><span class='line'>gcc word-analogy.c -o ../bin/word-analogy -lm -pthread -O2 -Wall -funroll-loops
</span><span class='line'>gcc compute-accuracy.c -o ../bin/compute-accuracy -lm -pthread -O2 -Wall -funroll-loops
</span><span class='line'>chmod +x ../scripts/*.sh
</span><span class='line'>~/Dropbox/MyWorks/algos/word2vec/scripts
</span><span class='line'>-- Training vectors...
</span><span class='line'>Starting training using file ../data/twitter_text
</span><span class='line'>Vocab size: 1516
</span><span class='line'>Words in train file: 50979
</span><span class='line'>
</span><span class='line'>real    0m0.734s
</span><span class='line'>user    0m1.822s
</span><span class='line'>sys     0m0.076s
</span><span class='line'>-----------------------------------------------------------------------------------------------------
</span><span class='line'>-- distance...
</span><span class='line'>Enter word or sentence <span class="o">(</span>EXIT to <span class="nb">break</span><span class="o">)</span>:
</span></code></pre></td></tr></table></div></figure>


<p>Enter some words.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Enter word or sentence <span class="o">(</span>EXIT to <span class="nb">break</span><span class="o">)</span>:  病院
</span><span class='line'>                                              Word       Cosine distance
</span><span class='line'>------------------------------------------------------------------------
</span><span class='line'>                                               ぶ               0.991685
</span><span class='line'>                                            ソチ                0.990486
</span><span class='line'>                                            bottle              0.989918
</span><span class='line'>                                            点滴                0.988539
</span></code></pre></td></tr></table></div></figure>


<p>Word &ldquo;病院&rdquo; means hostpital. The forth word that has near vector to hospital is &ldquo;点滴&rdquo;, an intravenous drip. It looks like word2vec working nice, however other data are irrelevant to hospital. That&rsquo;s too bad.</p>

<p>In addition to this error, cosine distance of all data are above 0.98. These distance points suggest word2vec cannot make sound model with this training data.
Unfortunately, there are also a lot of words that has no counterpart in training data. In many cases, target words that you want to investigate are not included in this model.
You cannot make use of  this model with such a tiny data extracted from twitter API in practical situation.</p>

<h2>Next</h2>

<p>Next time, I want to try with Wikipedia JP corpus. This famous site includes huge corpus data. I am sure to obtain good results in the next time.</p>

<p>Source codes used this process is <a href="https://github.com/Lewuathe/algos/tree/master/word2vec">here</a>. Please do take a look at these codes!</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use JavaScriptInterface on Android]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/21/use-javascriptinterface-on-android/"/>
    <updated>2014-02-21T21:34:20+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/21/use-javascriptinterface-on-android</id>
    <content type="html"><![CDATA[<p>On Android, there is a system for calling Java method from JavaScript. This is called <a href="http://developer.android.com/reference/android/webkit/JavascriptInterface.html">JavaScriptInterface</a>.
With this class, you can call Java methods run on Android application from JavaScript written on any HTML file.</p>

<p>If you want, you can write good user interface with HTML and JavaScript. And backend logic can be written by Java, Android SDK.
So this is the potential way to write Android application. Today I&rsquo;d like to introduce this way.</p>

<!-- more -->


<h2>Attach WebView</h2>

<p>In order to render HTML, you need to use <a href="http://developer.android.com/reference/android/webkit/WebView.html">WebView</a>.
So first of all, attach WebView to your layout file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>              <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>              <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>              <span class="na">android:layout_height=</span><span class="s">&quot;fill_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;WebView</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/webView&quot;</span>
</span><span class='line'>          <span class="na">android:layout_gravity=</span><span class="s">&quot;center_horizontal&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Write you HTML</h2>

<p>On previous WebView renders this html file. You need to write this file on your project directory so that an application can use it
from bundle files. My Sample looks like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>JSTest<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;Call Java&quot;</span> <span class="na">onclick=</span><span class="s">&quot;JSAction.action()&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>JSAction</code> is the Java class that implements JavaScriptInterface with annotation.
So last let&rsquo;s write down this interface class.</p>

<h2>Write JavaScriptInterface class</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Called when the activity is first created.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">WebView</span> <span class="n">webView</span> <span class="o">=</span> <span class="o">(</span><span class="n">WebView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">webView</span><span class="o">);</span>
</span><span class='line'>        <span class="n">webView</span><span class="o">.</span><span class="na">setWebViewClient</span><span class="o">(</span><span class="k">new</span> <span class="n">WebViewClient</span><span class="o">());</span>
</span><span class='line'>        <span class="n">WebSettings</span> <span class="n">settings</span> <span class="o">=</span> <span class="n">webView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">();</span>
</span><span class='line'>        <span class="n">settings</span><span class="o">.</span><span class="na">setJavaScriptEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">webView</span><span class="o">.</span><span class="na">addJavascriptInterface</span><span class="o">(</span><span class="k">new</span> <span class="n">JavaScriptAction</span><span class="o">(),</span> <span class="s">&quot;JSAction&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">webView</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="s">&quot;file:///android_asset/jstest.html&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This is the JavaScriptInterface class</span>
</span><span class='line'>  <span class="c1">// All you need to do is write annotation for JavaScriptInterface. </span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaScriptAction</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@JavascriptInterface</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">action</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">MyActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span>
</span><span class='line'>                         <span class="s">&quot;Called from JavaScript&quot;</span><span class="o">,</span>
</span><span class='line'>                         <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://lewuathe.github.io/images/posts/2014-02-21-javascriptinterface-android/demo.png" alt="demo" /></p>

<p>That&rsquo;s all. When you click input button, a toast will show on screen.
By using JavaScriptInterface, you can easily separate UI design and business logic.
Definitely, this will be the useful option for your development.</p>

<p>If you want to look into the detail of these code, please access <a href="https://github.com/Lewuathe/JavaScriptInterface-sample">here</a>
This is my sample repository. I&rsquo;m glad to see this repository is used for further development.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android SDK on IntelliJ IDEA]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/20/android-sdk-on-intellij-idea/"/>
    <updated>2014-02-20T21:24:56+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/20/android-sdk-on-intellij-idea</id>
    <content type="html"><![CDATA[<p>Eventually, I finished android lecture that is introduced on <a href="http://lewuathe.com/blog/2014/02/18/useful-shortcuts-for-intellij-idea/">previous post</a>
In this lecture, I learned how to use <a href="https://www.eclipse.org/">Eclipse</a>, <a href="http://java.com/ja/">Java</a> and of course <a href="http://developer.android.com/sdk/index.html">Android SDK</a></p>

<p>After coming home, I tried to creating a environent for android application development. However only installing Eclipse and creating same environment to lectures one
makes me tired. So I create this environment with <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a>.</p>

<!-- more -->


<p>I use IntelliJ IDEA community edition because it is free. Until now I don&rsquo;t think there is any lack of function with community edition</p>

<h2>Install IntelliJ IDEA</h2>

<p>From <a href="http://www.jetbrains.com/idea/">this page</a>, download IntelliJ IDEA community edition. Follow the instructions of wizard. Done!</p>

<p><img src="http://lewuathe.github.io/images/posts/2014-02-20-androidsdk-with-intellijidea/intellijidea-ce.png" alt="android project" /></p>

<h2>Install Android SDK</h2>

<p>From <a href="http://dl.google.com/android/android-sdk_r22.2.1-macosx.zip">here</a>, download android SDK. But there is one thing to pay attention. You don&rsquo;t have to install ADT bundler version, bacause this package includes Eclipse and its plugins. With IntelliJ IDEA, these are not necessary to install.</p>

<p>And then, unzip this package. Put <code>android-sdk-macosx</code> on any directory. For example, I put on my home directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/android-sdk-macosx</span></code></pre></td></tr></table></div></figure>


<p>Run android package manager, and install requires packages.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/android-sdk-macosx
</span><span class='line'>$ ./android-sdk-macosx/tools/android</span></code></pre></td></tr></table></div></figure>


<h2>Create project</h2>

<p>Select android application module project.</p>

<p><img src="http://lewuathe.github.io/images/posts/2014-02-20-androidsdk-with-intellijidea/android-project.png" alt="android project" /></p>

<p>And select android SDK version that you installed previously. In this capture, I selected API version 19.</p>

<p><img src="http://lewuathe.github.io/images/posts/2014-02-20-androidsdk-with-intellijidea/android-sdk.png" alt="android project" /></p>

<p>It is very easy, isn&rsquo;t it?</p>

<p>But unfortunately, android simulator is no more faster :(</p>

<p>I pray for the faster android emulator to Google.</p>

<p>Thank you :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Shortcuts for IntelliJ IDEA]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/18/useful-shortcuts-for-intellij-idea/"/>
    <updated>2014-02-18T21:21:10+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/18/useful-shortcuts-for-intellij-idea</id>
    <content type="html"><![CDATA[<p>In this week, I am attending a lecture for developing mobile application on android.
Of course I had no experience writing android applications, I have not written Java code in my life.
Through this lecture, I was so impressed by the functionality of <a href="https://www.eclipse.org/">Eclipse</a>.</p>

<p>In my life, I hate using IDE because these tools always hide a mechanism for building application.
This is why I always used emacs or vim. But today, I changed my mind. IDE is the next step for me in order to acquire new skills.
So just now I installed <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> which is in fashion nowadays.</p>

<!-- more -->


<p>In this post, I&rsquo;d like to introduce some shortcuts for my kickstarting IntelliJ IDEA. If you know any other tips, please let me know.</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Short Cut </th>
<th align="left"> Function </th>
<th align="left"> Notes </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Ctrl + Space  </td>
<td align="left"> Basic Code completion </td>
<td align="left"> With IntelliJ IDEA, however code completion is run automatically </td>
</tr>
<tr>
<td></td>
<td align="left"> Alt + Enter   </td>
<td align="left"> Show intention actions and quick-fixes </td>
<td align="left"> IntelliJ IDEA gives me any suggestions in each situations </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + L </td>
<td align="left"> Reformat code </td>
<td align="left"> Rearrange for readable format </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + O </td>
<td align="left"> Optimize imports </td>
<td align="left"> Remove unnecessary imports </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Q </td>
<td align="left"> Quick documentation </td>
<td align="left"> Simple reference to javadoc </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + O </td>
<td align="left"> Override methods </td>
<td align="left"> Implements override methods of current class </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + / </td>
<td align="left"> Comment out/in a line </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + W </td>
<td align="left"> Select successively increasing code blocks </td>
<td align="left"> You can select a meaningful code blocks </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Y </td>
<td align="left"> Delete line at caret </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> Shift + Enter </td>
<td align="left"> Start new line </td>
<td align="left"> Wherever line you are, insert new line</td>
</tr>
<tr>
<td></td>
<td align="left"> Shift + F10 </td>
<td align="left"> Run </td>
<td align="left"> </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + V </td>
<td align="left"> Introduce variables </td>
<td align="left"> Make variables name automatically </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + J </td>
<td align="left"> Insert live templates </td>
<td align="left"> A lot of type of templates are preinstalled </td>
</tr>
</tbody>
</table>


<p>How do you think that? Of course, there are so many shortcuts and functions that I cannot introduce all of these.
The only way to know how useful IntelliJ IDEA is using it throughly! From today, I&rsquo;ll switch default editor to IntelliJ IDEA.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go and Scala, Which Should I Use?]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/17/go-and-scala-which-should-i-use/"/>
    <updated>2014-02-17T22:37:59+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/17/go-and-scala-which-should-i-use</id>
    <content type="html"><![CDATA[<p>Today, <a href="http://www.google.com/trends/explore#q=golang%2C%20clojure&amp;cmpt=q">Go and Clojure compete with each other</a>. <a href="http://golang.org/">Go</a> will be one of the
hottest programming language in this year. This is the compiler language which can be seen as the successor C++.</p>

<p>On the other hand, <a href="http://www.scala-lang.org/">Scala</a> is the successor of Java which succeeded blending two programming paradigms, object-oriented programming and
functional programming.</p>

<!-- more -->


<p>These two languages are very similar to me. In developing deep learning module for myself, which language should I use?
Or if I can ask more general question, which language will be the major static language in the field in which tough performance
and maintainability are required. If you have any good idea or criteria for selecting these two languages, please send good advice to <a href="https://twitter.com/Lewuathe">@Lewuathe</a></p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yes, You Are Malala]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/15/yes-you-are-malala/"/>
    <updated>2014-02-15T21:56:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/15/yes-you-are-malala</id>
    <content type="html"><![CDATA[<p><meta property=”og:image” content=”/images/posts/2014-02-14-you-are-malala/malala.jpg” /></p>

<div style="text-align:center" markdown="1">
<img src="http://lewuathe.github.io/images/posts/2014-02-14-you-are-malala/malala.jpg" />
</div>


<p>We, Japanese have built high level democratic society. We have an universal suffrage system,
the rights to discuss through a lot of type media, and the constitution which guarantees our liberty of expression.
The end of the Edo era, we have kept to build these system gradually, sometimes destructively.
So, yes. We are one of the most democratic citizens in the world.</p>

<!-- more -->


<p>In Japan, it is difficult to see a lot of destructive tragedies which are occured around the world as reality.</p>

<p>So, Malala teaches me that education is not the gift fallen from the heaven, but the achivements by our continuous
efforts. This book showed me that our country, our politics, our society were not just obtained. We cannot take it for granted
getting the benefit from these system by the fight in the past.</p>

<p>However, I think that fights against something and efforts for something are often mistook as similar things. But it is not true.</p>

<h2>Don&rsquo;t stand up with Sword</h2>

<p>Malala said</p>

<blockquote><p>The pen is mighter than the sword</p></blockquote>

<p>Democracy system is supported by education system itself. If all citizens are blind to politics, economy
,science and so on, democracy will be malfunctional. In order to keep the sound democrary system, we have to
be well educated. These two statement cannot be divided. We all have to get an our own pen respectively.</p>

<p>However, I feel that we start forgetting the importance of the pen. Alternatively, we are reviewing the value of
sword which destroys our country completely in the past. People stands up with their sword.</p>

<h2>No Fight, Do Read</h2>

<p>We, Japanese people, are industrious people. We used to like studying for just enrich our life, and our community.
With enourmous knowledge and experience, we tackled a lot of problems which made an attack to our community.</p>

<p>But I think, people become tired of these line of trial which continues to our child, and those child and eternally.</p>

<p>Our weapon, called education seems helpless now. Our effort to make the better future of our community resulted in
Lost Decade in Japan, suicide of thousands people. There are now a few children and a lot of old people in Japan.
In conclusion of our hope and effort after world war 2, we find our community has become unsustainable, hopeless society.</p>

<p>We realized that a pen can no longer help us. We need to pick up new weapon to fight against new era. <strong>Sword</strong></p>

<h2>Duty of those who tackle problematic future</h2>

<p>Once a girl was groan under opression because she cannot get the chance of education freely.
Violence, destruction disturbed her studying. But she kept studying not only for herself but also her community.
She might think education made all people free from coercion through democracy system with the power of education.
This must have been the most peaceful, hopeful community that she and all around people ever seen.</p>

<p>The pen was her hope.</p>

<p>So suppose we are the future figure of her hope. As I said at the beginning, Japan has full democracy and education system.
This might be the figure she desires as the future of her country.</p>

<h2>Another distress</h2>

<p>But this is what happen. People start to pick up sword.</p>

<p>What will she think about when she knows that ideal democracy society turns their policy to pick up their sword?</p>

<p>Is this the future desired by her people?</p>

<p>All the people will be defeated by the fact the education cannot overcome violence
which distresses her for a long time, and hopelessness cover herself.</p>

<h2>Our future is not for only ourselves</h2>

<p>Malala said at the United nation. She felt that when she was shoot.</p>

<blockquote><p>Weakness,fear and hopelessness died,
Strength,power and courage was born</p></blockquote>

<p>If there are enemis against us, it must be our mind which forces us stop thinking, and pick up an old sword used many times over.
This is the future we must avoid for our world. The hope is not the time of defeating the enemies, even solving all problems.
It is in the range of long span we can keep our education, and democracy. We have to retain our pens for our world.</p>

<p>Don&rsquo;t stop thinking. I cannot say where there are any answers for us, but I can say not these are not in violence, destructions. These are past things
we experienced over and over again. Now it&rsquo;s the time to build our community for only future, not past. For a pen, not a sword.</p>

<p>Believe in the power of education and democracy. <em>You are Malala in Japan, the future of world democracy</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NN With Nodejs]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/14/nn-with-nodejs/"/>
    <updated>2014-02-14T22:23:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/14/nn-with-nodejs</id>
    <content type="html"><![CDATA[<p>2 layer newral network is added to <a href="https://github.com/Lewuathe/n42">n42</a>
This network is simple newral network which can trained throught gradient descent optimization calculation.
It is the same algorithm to the one of denoised autoencoder used by n42. So implementation itself was not diffucult.
The code is showed below.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *   Training weight parameters with supervised learning</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *   @method train</span>
</span><span class='line'><span class="cm"> *   @param  lr {float}  learning rate</span>
</span><span class='line'><span class="cm"> *   @param  input {Matrix} input data (option)</span>
</span><span class='line'><span class="cm"> *   @param  label {Matrix} label data (option)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">NN</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">train</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">lr</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">label</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">x</span>     <span class="o">=</span> <span class="p">(</span><span class="nx">input</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">input</span> <span class="o">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">input</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="p">(</span><span class="nx">label</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">label</span> <span class="o">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">label</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Get hidden layer value</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getHiddenValues</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The output of this network</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getOutput</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The error of output layer. </span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">lH2</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">label</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Restortion to the error of each hidden layer unit</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sigma</span> <span class="o">=</span> <span class="nx">lH2</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">W2</span><span class="p">.</span><span class="nx">transpose</span><span class="p">());</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">lH1</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">sigma</span><span class="p">.</span><span class="nx">rows</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">lH1</span><span class="p">.</span><span class="nx">push</span><span class="p">([]);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">sigma</span><span class="p">.</span><span class="nx">cols</span><span class="p">();</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">lH1</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">y</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">y</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Make sylvester matrix</span>
</span><span class='line'>    <span class="nx">lH1</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">(</span><span class="nx">lH1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// lW1 is the weight matrix from input layer to hidden layer</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">lW1</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">transpose</span><span class="p">().</span><span class="nx">x</span><span class="p">(</span><span class="nx">lH1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// lW2 is the weight matrix from hidden layer to output layer</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">lW2</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">transpose</span><span class="p">().</span><span class="nx">x</span><span class="p">(</span><span class="nx">lH2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Add gradient to weight matrix respectively</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">W1</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">W1</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">lW1</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">W2</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">W2</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">lW2</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// vBias is the input layer bias parameters</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">lH2</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// hBias is the hidden layer bias parameters</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">lH1</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trying.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">([</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.98</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.98</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.98</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">([</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">nn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NN</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">label</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 0.1 is learning rate</span>
</span><span class='line'>  <span class="nx">nn</span><span class="p">.</span><span class="nx">train</span><span class="p">(</span><span class="mf">0.1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">([</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nn</span><span class="p">.</span><span class="nx">predict</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>
</span><span class='line'><span class="c1">// [0.9999597224429988, 0.000040673558435336644]</span>
</span><span class='line'><span class="c1">// [0.0000455181928397141, 0.9999544455271699]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Activation function</h2>

<p>This prediction seems rather good, but the activation function was changed to sigmoid function, not softmax function in this case. In the multi class categorizing problem, soft max function usually used to predict. But I can get good result with sigmoid function rather than softmax function. With softmax function, the result is below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// [0.5242635012777253, 0.47573649872227464]</span>
</span><span class='line'><span class="c1">// [0.2690006890629063, 0.7309993109370937]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Further trying</h2>

<p>Umm, this is not the result I want to get. I can&rsquo;t grasp why the result is not correct sufficiently.
I want to keep tracking whether there are any problems in my program.
And with this network, I want to try kaggle mnist problem. Now n42 is run to train mnist data. It takes a lot of time.
If any good result is obtained through this process, I will introduce this blog. Welcome feedback, thank you!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restricted Boltzmann Machine in Node]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/05/restricted-boltzmann-machine-in-node/"/>
    <updated>2014-02-05T21:18:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/05/restricted-boltzmann-machine-in-node</id>
    <content type="html"><![CDATA[<p>n42 has restricted boltzmann machine. Restricted boltzmann machine is a kind of
autoencoder in order to extract charasteristics. In this article, I would leave out
the detail of restricted boltzmann machine. I want to introduce how the RBM is written
in node.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Restricted Boltzmann machine</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @module n42</span>
</span><span class='line'><span class="cm"> *  @class  RBM</span>
</span><span class='line'><span class="cm"> *  @author Kai Sasaki</span>
</span><span class='line'><span class="cm"> *  @since 2014/01/28</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Matrix</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sylvester&#39;</span><span class="p">).</span><span class="nx">Matrix</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Vector</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sylvester&#39;</span><span class="p">).</span><span class="nx">Vector</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">utils</span>  <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./utils.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">binomial</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;binomial-sampling&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;box-muller&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">RBM</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">nVisible</span><span class="p">,</span> <span class="nx">nHidden</span><span class="p">,</span> <span class="nx">W</span><span class="p">,</span> <span class="nx">hBias</span><span class="p">,</span> <span class="nx">vBias</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">input</span> <span class="o">=</span> <span class="nx">input</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">nVisible</span> <span class="o">=</span> <span class="nx">nVisible</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">nHidden</span>  <span class="o">=</span> <span class="nx">nHidden</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize weight parameter</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">W</span>     <span class="o">=</span> <span class="p">(</span><span class="nx">W</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">W</span> <span class="o">:</span> <span class="nx">Matrix</span><span class="p">.</span><span class="nx">Random</span><span class="p">(</span><span class="nx">nVisible</span><span class="p">,</span> <span class="nx">nHidden</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize hidden bias parameters</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span> <span class="o">=</span> <span class="p">(</span><span class="nx">hBias</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">hBias</span> <span class="o">:</span> <span class="nx">Vector</span><span class="p">.</span><span class="nx">Zero</span><span class="p">(</span><span class="nx">nHidden</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize visual bias parameters</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span> <span class="o">=</span> <span class="p">(</span><span class="nx">vBias</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">vBias</span> <span class="o">:</span> <span class="nx">Vector</span><span class="p">.</span><span class="nx">Zero</span><span class="p">(</span><span class="nx">nVisible</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RBM</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">contrastiveDivergence</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">lr</span><span class="p">,</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">input</span> <span class="o">=</span> <span class="p">(</span><span class="nx">input</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">input</span> <span class="o">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">input</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ph</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">sampleHGivenV</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Select phSample</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">chainStart</span> <span class="o">=</span> <span class="nx">ph</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// stepRet[0] v1Means</span>
</span><span class='line'>    <span class="c1">// stepRet[1] v1Samples</span>
</span><span class='line'>    <span class="c1">// stepRet[2] h1Means</span>
</span><span class='line'>    <span class="c1">// stepRet[3] h1Sample</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">step</span> <span class="o">&lt;</span> <span class="nx">k</span><span class="p">;</span> <span class="nx">step</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">stepRet</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">step</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">stepRet</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">gibbsHvh</span><span class="p">(</span><span class="nx">chainStart</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Select a nhSample</span>
</span><span class='line'>            <span class="nx">stepRet</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">gibbsHvh</span><span class="p">(</span><span class="nx">stepRet</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// W += lr * (W.T * phSample - nvSample.T * nhMeans)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">witem1</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">transpose</span><span class="p">().</span><span class="nx">x</span><span class="p">(</span><span class="nx">ph</span><span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">witem2</span> <span class="o">=</span> <span class="nx">stepRet</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">transpose</span><span class="p">().</span><span class="nx">x</span><span class="p">(</span><span class="nx">stepRet</span><span class="p">[</span><span class="mi">2</span><span class="p">]).</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">W</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">witem1</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="nx">witem2</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">vitem1</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">vitem2</span> <span class="o">=</span> <span class="nx">stepRet</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">vitem1</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="nx">vitem2</span><span class="p">),</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hitem1</span> <span class="o">=</span> <span class="nx">ph</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hitem2</span> <span class="o">=</span> <span class="nx">stepRet</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">hitem1</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="nx">hitem2</span><span class="p">),</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RBM</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sampleHGivenV</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v0Sample</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">h1Means</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">propup</span><span class="p">(</span><span class="nx">v0Sample</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">h1Sample</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">h1Means</span><span class="p">.</span><span class="nx">rows</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">h1Sample</span><span class="p">.</span><span class="nx">push</span><span class="p">([]);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">h1Means</span><span class="p">.</span><span class="nx">cols</span><span class="p">();</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">h1Sample</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">binomial</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">h1Means</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)));</span>
</span><span class='line'>            <span class="c1">//h1Sample[i].push(generator() + h1Means.e(i+1, j+1));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">h1Sample</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">(</span><span class="nx">h1Sample</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nx">h1Means</span><span class="p">,</span> <span class="nx">h1Sample</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RBM</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sampleVGivenH</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">h0Sample</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">v1Means</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">propdown</span><span class="p">(</span><span class="nx">h0Sample</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">v1Sample</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">v1Means</span><span class="p">.</span><span class="nx">rows</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">v1Sample</span><span class="p">.</span><span class="nx">push</span><span class="p">([]);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">v1Means</span><span class="p">.</span><span class="nx">cols</span><span class="p">();</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">v1Sample</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">binomial</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">v1Means</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)));</span>
</span><span class='line'>            <span class="c1">//v1Sample[i].push(generator()*0.01 + v1Means.e(i+1, j+1))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">v1Sample</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">(</span><span class="nx">v1Sample</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nx">v1Means</span><span class="p">,</span> <span class="nx">v1Sample</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RBM</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">gibbsHvh</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">h0Sample</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retV1</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">sampleVGivenH</span><span class="p">(</span><span class="nx">h0Sample</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Given h1Sample == retV1[1]</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retH1</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">sampleHGivenV</span><span class="p">(</span><span class="nx">retV1</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nx">retV1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">retV1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">retH1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">retH1</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RBM</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">propup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">preSigmoidActivation</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">plusBias</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">),</span> <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">sigmoid</span><span class="p">(</span><span class="nx">preSigmoidActivation</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RBM</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">propdown</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">preSigmoidActivation</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">plusBias</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">.</span><span class="nx">transpose</span><span class="p">()),</span> <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">sigmoid</span><span class="p">(</span><span class="nx">preSigmoidActivation</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RBM</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reconstruct</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">sigmoid</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">plusBias</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">),</span> <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span><span class="p">));</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reconstructedV</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">sigmoid</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">plusBias</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">.</span><span class="nx">transpose</span><span class="p">()),</span> <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">reconstructedV</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">RBM</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though I completed to write, this autoencoder has not yet enough accuracy to prediction in compared to
denoised autoencoder. So I have to pile up some improvements to use practically.
If you find any bugs, welcome patches!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stacked Denoised Autoencoder With Nodejs]]></title>
    <link href="http://lewuathe.github.io/blog/2014/01/29/stacked-denoised-autoencoder-with-nodejs/"/>
    <updated>2014-01-29T21:38:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/01/29/stacked-denoised-autoencoder-with-nodejs</id>
    <content type="html"><![CDATA[<p>I developed deep leanring module which enables you to use stacked denoised autoencoder in nodejs.
This is called n42. You can train with deep learning algorithm very easily.</p>

<p><a href="https://npmjs.org/package/n42">https://npmjs.org/package/n42</a></p>

<!-- more -->


<h2>How to use</h2>

<p>This is how to use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">n42</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;n42&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// input data</span>
</span><span class='line'><span class="c1">// This is made of sylvester matrix</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">([</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// label data</span>
</span><span class='line'><span class="c1">// This is made of sylvester matrix</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">([</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">sda</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">n42</span><span class="p">.</span><span class="nx">SdA</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">label</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Training all hidden layers</span>
</span><span class='line'><span class="nx">sda</span><span class="p">.</span><span class="nx">pretrain</span><span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Tuning output layer which is composed of logistics regression</span>
</span><span class='line'><span class="nx">sda</span><span class="p">.</span><span class="nx">finetune</span><span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Test data</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">([</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sda</span><span class="p">.</span><span class="nx">predict</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *   Predict answers</span>
</span><span class='line'><span class="cm"> *   [0.9999998973561728, 1.0264382721184357e-7] ~ [1.0, 0.0]</span>
</span><span class='line'><span class="cm"> *   [4.672230837774381e-28, 1]                  ~ [0.0, 1.0]  </span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to know what stacked denoised autoencoder is, look this <a href="http://deeplearning.net/tutorial/SdA.html">page</a>
Briefly, stacked denoised autoencoder is multi layer denoised autoencoder.</p>

<p>First you should train denoised autoencoder by
unsupervised learning. With this process, this network can extract characteristics of input data properly.</p>

<p>Second, you tune output logistics regression layer with gradient descent.</p>

<p>And Last, only predict! It&rsquo;s easy, isn&rsquo;t it?</p>

<p>Now the accuracy is depend on the parameters which you select considerably. Deep leanring algorithm might be the way it is,
however, I want to develop end implement more general algorithms. In the next step, I&rsquo;ll develop restricted boltzmann machine, and
deep boltzmann machine. Thouhgh these algorithms are somewhat less accurate than stacked denoised autoencoder, n42 must have this algorithm
for own diversity, and the number of options.</p>

<h2>Last&hellip;</h2>

<p>And the last but not least, if you find any bugs or any points to be fixed, patches are welcome!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoencoder With node.js]]></title>
    <link href="http://lewuathe.github.io/blog/2014/01/26/autoencoder-with-node-dot-js/"/>
    <updated>2014-01-26T21:14:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/01/26/autoencoder-with-node-dot-js</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Autoencoder">Auto encoder</a> is used for deep learning. Auto encoder extract characteristics of data through
unsupervised learning. This is a kind of newral network. By using an auto encoder, you don&rsquo;t have to
be in trouble with choicing extracting algorithm, or doing yourself. Therefore, in deepleanring field,
this algorithm is used very actively. There are many implementation such as Python or Java, which are
used in machine learning frequently, but I cannot find this in nodejs. So this weekend, I wrote autoencoder in nodejs.</p>

<!-- more -->


<p>When I started writing this code, I referred <a href="https://github.com/yusugomori/DeepLearning">@yusugomori/DeepLearning</a>.
I would like to take this opportunity to express my appreciation and gratitude to him for his great code.</p>

<p><a href="https://github.com/Lewuathe/n42/blob/master/lib/dA.js">GitHub source</a></p>

<p>The major linear algebra library is <a href="http://sylvester.jcoglan.com/">sylvelster</a> in JavaScript. This is simple and user friendly
library. So if you cannot decide which library you should use in JavaScript, I recommend sylvester.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Matrix</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sylvester&#39;</span><span class="p">).</span><span class="nx">Matrix</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Vector</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sylvester&#39;</span><span class="p">).</span><span class="nx">Vector</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">utils</span>  <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./utils.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;assert&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;box-muller&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">dA</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">nVisible</span><span class="p">,</span> <span class="nx">nHidden</span><span class="p">,</span> <span class="nx">W</span><span class="p">,</span> <span class="nx">hBias</span><span class="p">,</span> <span class="nx">vBias</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">input</span>    <span class="o">=</span> <span class="nx">input</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">nVisible</span> <span class="o">=</span> <span class="nx">nVisible</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">nHidden</span>  <span class="o">=</span> <span class="nx">nHidden</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Initialize weight parameter</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">W</span>     <span class="o">=</span> <span class="p">(</span><span class="nx">W</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">W</span> <span class="o">:</span> <span class="nx">Matrix</span><span class="p">.</span><span class="nx">Random</span><span class="p">(</span><span class="nx">nVisible</span><span class="p">,</span> <span class="nx">nHidden</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize hidden bias parameters</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span> <span class="o">=</span> <span class="p">(</span><span class="nx">hBias</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">hBias</span> <span class="o">:</span> <span class="nx">Vector</span><span class="p">.</span><span class="nx">Zero</span><span class="p">(</span><span class="nx">nHidden</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize visual bias parameters</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span> <span class="o">=</span> <span class="p">(</span><span class="nx">vBias</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">vBias</span> <span class="o">:</span> <span class="nx">Vector</span><span class="p">.</span><span class="nx">Zero</span><span class="p">(</span><span class="nx">nVisible</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">wPrime</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">.</span><span class="nx">transpose</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dA</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getCorruptedInput</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">corruptionLevel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Return noised data</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">isTrue</span><span class="p">(</span><span class="nx">corruptionLevel</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">noised</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">input</span><span class="p">.</span><span class="nx">rows</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">noised</span><span class="p">.</span><span class="nx">push</span><span class="p">([]);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">input</span><span class="p">.</span><span class="nx">cols</span><span class="p">();</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// generator returns sampling value according to regular gaussian distribution</span>
</span><span class='line'>            <span class="nx">noised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">((</span><span class="nx">generator</span><span class="p">()</span> <span class="o">*</span> <span class="nx">corruptionLevel</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">*</span> <span class="nx">input</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">));;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$M</span><span class="p">(</span><span class="nx">noised</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dA</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getHiddenValues</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Calculate plus weight</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">rowValues</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">sigmoid</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">plusBias</span><span class="p">(</span><span class="nx">rowValues</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dA</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getReconstructedInput</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">hidden</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">rowValues</span> <span class="o">=</span> <span class="nx">hidden</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">.</span><span class="nx">transpose</span><span class="p">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">sigmoid</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">plusBias</span><span class="p">(</span><span class="nx">rowValues</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dA</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">train</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">lr</span><span class="p">,</span> <span class="nx">corruptionLevel</span><span class="p">,</span> <span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="p">(</span><span class="nx">input</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span><span class="o">?</span> <span class="nx">input</span> <span class="o">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">input</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Noised data</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tildeX</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getCorruptedInput</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">corruptionLevel</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getHiddenValues</span><span class="p">(</span><span class="nx">tildeX</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getReconstructedInput</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Below this line, backpropagation algorithm is used</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">lH2</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sigma</span> <span class="o">=</span> <span class="nx">lH2</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">lH1</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">sigma</span><span class="p">.</span><span class="nx">rows</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">lH1</span><span class="p">.</span><span class="nx">push</span><span class="p">([]);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">sigma</span><span class="p">.</span><span class="nx">cols</span><span class="p">();</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">lH1</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">sigma</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">y</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">y</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">lH1</span> <span class="o">=</span> <span class="nx">$M</span><span class="p">(</span><span class="nx">lH1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">lW</span> <span class="o">=</span> <span class="nx">tildeX</span><span class="p">.</span><span class="nx">transpose</span><span class="p">().</span><span class="nx">x</span><span class="p">(</span><span class="nx">lH1</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">lH2</span><span class="p">.</span><span class="nx">transpose</span><span class="p">().</span><span class="nx">x</span><span class="p">(</span><span class="nx">y</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">W</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">W</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">lW</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">vBias</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">lH2</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">hBias</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">lH1</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><span class="nx">x</span><span class="p">(</span><span class="nx">lr</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">dA</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reconstruct</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getHiddenValues</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getReconstructedInput</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">z</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Traning and result</h2>

<p>Try auto encoder!!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>            <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>            <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>            <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>            <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>            <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
</span><span class='line'>            <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'>            <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">da</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">dA</span><span class="p">(</span><span class="nx">$M</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 0.1 is learning rate which is used gradient decent</span>
</span><span class='line'>    <span class="c1">// 0.02 is standard deviation which is used for add noise to original data</span>
</span><span class='line'>    <span class="nx">da</span><span class="p">.</span><span class="nx">train</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">da</span><span class="p">.</span><span class="nx">reconstruct</span><span class="p">(</span><span class="nx">$M</span><span class="p">([[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">]]));</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*   </span>
</span><span class='line'><span class="cm"> *   Returns </span>
</span><span class='line'><span class="cm"> *   [0.5055820272991076, 0.9979837957439818, 0.007330556962859083]   </span>
</span><span class='line'><span class="cm"> *   [0.5042481334395964, 0.006342602394604374, 0.9970156469919944]</span>
</span><span class='line'><span class="cm"> *   [0.5055017563352926, 0.9979783271177022, 0.007473069891271281]</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p>In general, this auto encoder looks like working properly. I think the error of difference between original data
and reconstructed data was induced by below two points.</p>

<ul>
<li>Lack of divergence of training data</li>
<li>Parameter tuning</li>
</ul>


<p>I didn&rsquo;t write many training examples. So in spite of many decent times, the parameters
cannot be updated properly. And I skipped parameter tuning completly :)</p>

<h2>Deep learning module</h2>

<p>I will make a deep learning module which uses this auto encoder. Please keep follow <a href="https://github.com/Lewuathe/n42">n42</a>!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idiomatic Python ~I Will Write With This Style~]]></title>
    <link href="http://lewuathe.github.io/blog/2014/01/21/idiomatic-mython/"/>
    <updated>2014-01-21T13:18:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/01/21/idiomatic-mython</id>
    <content type="html"><![CDATA[<p>I read a book, <em><a href="http://www.amazon.co.jp/Writing-Idiomatic-Python-2-7-3-Knupp-ebook/dp/B00B5KG0F8">Writing Idiomatic Python</a></em>
Although I usually write python codes, I have not paid attension to the style of these codes. By reading this book, I have noticed
that there are pythonic style in python codes. And I think it was good mind to write python code. There were many <em>Halmful</em>, <em>Idiomaric</em>
phrases about python code. So I&rsquo;d like to introduce some of them which I&rsquo;ll write in my own code.</p>

<!-- more -->


<p>And of course, all python developers should read this book!!</p>

<h2>Enumerate</h2>

<p>Usually, I write loop code like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&quot;Takeshi&quot;</span><span class="p">,</span> <span class="s">&quot;Nobita&quot;</span><span class="p">,</span> <span class="s">&quot;Masao&quot;</span><span class="p">]:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;{}:{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">))</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it is harmful according to this book. Correctly, you should write like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">conteiner</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Takeshi&quot;</span><span class="p">,</span> <span class="s">&quot;Nobita&quot;</span><span class="p">,</span> <span class="s">&quot;Masao&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">conteiner</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;{}:{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Arbitrary arguments</h2>

<p>In python, you can write arbitrary arguments with <code>*args</code> or <code>**kwargs</code>. Arbutrary arguments are useful when you
want to implement some types of API which is different by package versions. You can write like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">make_api_call</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">c</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">args</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">kwargs</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">make_api_call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Takeshi&quot;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">23</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># --console--</span>
</span><span class='line'><span class="c"># 1</span>
</span><span class='line'><span class="c"># 2</span>
</span><span class='line'><span class="c"># 3</span>
</span><span class='line'><span class="c"># (4, 5, 6)</span>
</span><span class='line'><span class="c"># {&#39;age&#39;: 23, &#39;name&#39;: &#39;Takeshi&#39;}</span>
</span><span class='line'><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avoid <em>Swallowing</em> useful exceptions</h2>

<p>In python, <code>exception</code> is common phrases used in <code>for</code> loop or etc. In addition to this,
<code>exception</code> gives you a useful information for debugging. So you should not <em>swallow</em> these exceptions
by writing bare <code>except</code> clause. If you don&rsquo;t have any idea about what type exceptions are raised from
third-party library, you should raise it again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_json_response</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avoid using a temporary variables with swapping</h2>

<p>Use tuple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="s">&quot;FOO&quot;</span>
</span><span class='line'><span class="n">bar</span> <span class="o">=</span> <span class="s">&quot;BAR&quot;</span>
</span><span class='line'><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">bar</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">foo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use <code>join</code> method. It&rsquo;s more faster</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">result_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Takeshi&quot;</span><span class="p">,</span> <span class="s">&quot;Nobita&quot;</span><span class="p">,</span> <span class="s">&quot;Masuo&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">reesult_string</span> <span class="o">=</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">result_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use format function to make a formatted string</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># user is a dictionary</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_formatted_user_info</span><span class="p">(</span><span class="n">user</span><span class="p">):</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="s">&#39;Nama: {user.name}, Age: {user.age}, Sex: {user.sex}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Prefer <code>xrange</code> to <code>range</code></h2>

<p>Use <code>xrange</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;index: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Default value got from dicionary</h2>

<p>If there are <code>name</code> field in user, <code>get</code> returns <code>'Unknown'</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">username</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;Unknown&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dictionary complehension</h2>

<p>The list complehension is well known about python context. But dictionary complehension is as important as this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">user_email</span> <span class="o">=</span> <span class="p">{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users_list</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set complehension</h2>

<p>In set syntax, you can use complehension expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">users_first_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">user</span><span class="o">.</span><span class="n">first_name</span> <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ignore unnecessary row in tuple</h2>

<p>If there are any data which is not necessary for you in tuple, ignore it with <code>_</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_user_info</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">:</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="s">&#39;{name} can drink!&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Generator</h2>

<p>Python list comprehension is very useful, however, processing very large list will run out of memory.
In this case you should use <code>generator</code> which is iterative expression, but doesn&rsquo;t use memory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Nobita&quot;</span><span class="p">,</span> <span class="s">&quot;Takeshi&quot;</span><span class="p">,</span> <span class="s">&quot;Masuo&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span> <span class="k">if</span> <span class="n">user</span> <span class="o">!=</span> <span class="s">&quot;Takeshi&quot;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># NOBITA</span>
</span><span class='line'><span class="c"># MASUO</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Refer PEP8</h2>

<p>Python has standard set of formatting rule officially. It is called <strong>PEP8</strong>.
You should install this plugin your editor.</p>

<h2>Write as PEP252</h2>

<p>PEP257 is the set of rules of document formattings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">calculate_statistics</span><span class="p">(</span><span class="n">value_list</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return a tuple containing the mean, median and the mode of a list of integers</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Arguments:</span>
</span><span class='line'><span class="sd">    value_list -- a list of integer values</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Last but not least</h1>

<p>I am a pythonia. With reading this book, I am able to write more pythonic code at my work scene.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrum Gathering Tokyo 2014]]></title>
    <link href="http://lewuathe.github.io/blog/2014/01/19/scrum-gathering-tokyo-2014-1/"/>
    <updated>2014-01-19T21:08:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/01/19/scrum-gathering-tokyo-2014-1</id>
    <content type="html"><![CDATA[<p>On January 14-15, I participated <strong><a href="http://scrumgatheringtokyo.org/2014/">Scrum Gathering Tokyo 2014</a></strong>.
Though this conference cost me a little more than I can afford it,
it was great time to me as scrum master in my project. I want to arrange
the contents of these sessions, but as there were many sessions it is hard to me.
So in this entry, I cite one scrum example after another which I heard in these sessions.</p>

<!-- more -->


<h1>Enterprise Scrum: the future management (Mike Beedle)</h1>

<h2>Rapid change in Business environment</h2>

<ul>
<li>Being and Becoming</li>
<li>The main incomes are from new products

<ul>
<li>About 70%</li>
</ul>
</li>
<li>Winner innovate faster</li>
<li>New product developemnt efficiency differences can be huge 1200%

<ul>
<li>That&rsquo;s why agile is needed in many companies</li>
</ul>
</li>
<li>The origin of scrum is TOYOTA production system</li>
<li>Scrum is applicable to business, generic and scaled techinics.</li>
</ul>


<h1>Leading the Lean</h1>

<ul>
<li>SAFe Roots

<ul>
<li><a href="http://www.scaledagileframework.com/">Scaled Agile framwwork</a></li>
</ul>
</li>
<li>In scrum class, any code cannot be written

<ul>
<li>The process which can be used in real scene should be progressed in code level.</li>
</ul>
</li>
</ul>


<h1>Padawan scrum master</h1>

<h2>First of all, let&rsquo;s study</h2>

<ul>
<li>Read <a href="http://www.amazon.co.jp/Estimating-Planning-Robert-Martin-Series/dp/0131479415%3FSubscriptionId%3DAKIAJCKXRISJS6UE36NQ%26tag%3Dkakutani-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0131479415">Agile Estimating and Planning</a></li>
<li>Read <a href="http://www.amazon.co.jp/The-Agile-Samurai-Pragmatic-Programmers/dp/1934356581/ref=sr_1_1?s=english-books&amp;ie=UTF8&amp;qid=1390134825&amp;sr=1-1&amp;keywords=Agile+Samurai">Agile Samurai</a></li>
<li>In the past, XP is the main stream in SIer.

<ul>
<li>XP is the idealistic thought. So it is not fit the real scene.</li>
<li>On the halfway, the members are bored with the process.</li>
<li>In the team which is composed of about 70 members, the standard process or documents should be arranged precisely.</li>
</ul>
</li>
</ul>


<h2>And hearing clients about necessary conditions</h2>

<ul>
<li>Thinging of what to do</li>
<li>It might be difficult to do scrum in enterprise enviroment</li>
</ul>


<h2>How to estimate</h2>

<ul>
<li>Very roughtly.</li>
<li>Hour unit, 3 days unit.</li>
<li>From the beginning, chart is not burned down. Add tasks every day</li>
</ul>


<h2>How to do contractually</h2>

<ul>
<li>Introduce <a href="http://www.amazon.co.jp/%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%81%AE%E5%AE%9F%E8%B7%B5-%E8%8B%B1-%E7%B9%81%E9%9B%84/dp/4897979358">Hybrid scrum</a></li>
<li>It is seemed like waterfall from outside.

<ul>
<li>The process which need approvals shoule be done waterfall process</li>
</ul>
</li>
</ul>


<h2>In the case that there are anyone who is negative to agile scrum</h2>

<ul>
<li>Remove that member</li>
</ul>


<h2>How to cope with the change order</h2>

<ul>
<li>Require clients to line tasks by order, not attach the priority

<ul>
<li>If tasks are arranged one line, the order of task is explicit.</li>
</ul>
</li>
</ul>


<h2>Last but not least</h2>

<ul>
<li>Scrum should be changed to fit your own team</li>
<li>Some projects should be facilitated forcibly, like waterfall process</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack Tessel!]]></title>
    <link href="http://lewuathe.github.io/blog/2014/01/09/hack-tessel/"/>
    <updated>2014-01-09T21:25:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/01/09/hack-tessel</id>
    <content type="html"><![CDATA[<p><meta property=”og:image” content=”http://lewuathe.com/images/posts/2014-01-09-tessel-first/bootstrap_tessel.jpg” /></p>

<p>Yesterday, I got a <a href="http://tessel.io/">tessel</a>. With twists and turns, I overcome some obstacles for hacking this tiny but not little possibility board. So writing this post.</p>

<p>First and unfortunately, these client modules are only used for beta testers now.
So these are not opend yet. Please be understanding of this point.</p>

<!-- more -->


<h2>Environment</h2>

<ul>
<li>MacOSX 10.9.1</li>
<li>git 1.8.3.4 (Apple Git-47)</li>
<li>java 1.7.0_45</li>
<li>node v0.10.16 (with nvm)</li>
</ul>


<h2>Install drivers for OSX</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install libusb
</span><span class='line'>$ brew install pkg-config</span></code></pre></td></tr></table></div></figure>


<p>In order to connect tessel with USB, these drivers are needed.
After installing the drivers, you can use <code>tessel</code> command. This command is used for
connecting tessel server or pushing your codes, etc. So your development cycle of tessel
will be work around this command. It&rsquo;s very important.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tessel
</span><span class='line'>Tessel CLI
</span><span class='line'>Usage:
</span><span class='line'>   tessel &lt;filename&gt;
</span><span class='line'>   tessel list
</span><span class='line'>   tessel logs
</span><span class='line'>   tessel push &lt;filename&gt; [-r &lt;ip[:port&gt;]] [-s] [-b &lt;file&gt;] [-a [options]]
</span><span class='line'>          -r wireless pushing of code (inactive at the moment)
</span><span class='line'>          -s saves the file that is getting passed to Tessel as builtin.tar.gz
</span><span class='line'>          -b pushes a binary
</span><span class='line'>          -a passes arguments to tessel scripts
</span><span class='line'>   tessel wifi &lt;ssid&gt; &lt;pass&gt; &lt;security (wep/wap/wap2, wap2 by default)&gt;
</span><span class='line'>   tessel wifi &lt;ssid&gt;
</span><span class='line'>          connects to a wifi network without a password
</span><span class='line'>   tessel wifi
</span><span class='line'>          see current wifi status
</span><span class='line'>   tessel stop
</span><span class='line'>   tessel dfu-restore &lt;firmware.bin&gt;
</span><span class='line'>          upload new firmware when in DFU mode
</span></code></pre></td></tr></table></div></figure>


<h2>Connecting</h2>

<p>After installing these prerequisites, you can connect tessel to your PC with USB cable.
For confirming the connection between tessel and my MAC, <code>verbose</code> subcommand is useful.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tessel verbose
</span><span class='line'>TESSEL? No Tessel found, waiting...</span></code></pre></td></tr></table></div></figure>


<p>Umm?. I cannot connect. No matter how long I wait, there are no sign of connecting.
So here is answer.</p>

<p><img src="http://lewuathe.github.io/images/posts/2014-01-09-tessel-first/bootstrap_tessel.jpg" alt="Boostrap" /></p>

<p>I have to wait for the LED lamps off. I cannot understand why these waiting is necessary now, but anyway after the LEDs are off, I can connect to the tessel board. Great!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tessel verbose
</span><span class='line'>TESSEL! Connected to /dev/cu.usbmodem1421.
</span><span class='line'>H { date: 'Jan  3 2014', time: '17:50:43' }
</span><span class='line'>l Tessel, by Technical Machine &lt;http://technical.io&gt;
</span><span class='line'>l Firmware version: e1b13fc
</span><span class='line'>l Runtime version: 7d86665
</span><span class='line'>l Build time: Jan  3 2014 17:50:43
</span><span class='line'>l Board version: 2
</span><span class='line'>l Board serial: 428-0-4026571312-1578983944
</span><span class='line'>d
</span><span class='line'>l Run 'tessel push &lt;path to code&gt;' from the command line to push code.
</span><span class='line'>w Connecting to last available network...
</span><span class='line'>w CC3000 firmware version: 1.24
</span><span class='line'>W { cc3000firmware: '1.24' }
</span><span class='line'>w CC3000 firmware version: 1.24
</span><span class='line'>W { cc3000firmware: '1.24' }
</span><span class='line'>w Couldn't connect to saved network.
</span><span class='line'>w
</span><span class='line'>W { connected: 0, ip: null }
</span><span class='line'>L 1
</span><span class='line'>d Ready.</span></code></pre></td></tr></table></div></figure>


<h2>Demo</h2>

<p>Tessel has LED lamps as default. So I run sample code which can blink these LED.
It&rsquo;s below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var tessel = require('tessel');
</span><span class='line'>
</span><span class='line'>// high means flashing
</span><span class='line'>var led1 = tessel.led(1).output().high();
</span><span class='line'>// low means going off
</span><span class='line'>var led2 = tessel.led(2).output().low();
</span><span class='line'>
</span><span class='line'>var i = 0;
</span><span class='line'>setInterval(function () {
</span><span class='line'>  console.log(i++);
</span><span class='line'>  // Switching on and off this function
</span><span class='line'>  led1.toggle();
</span><span class='line'>  led2.toggle();
</span><span class='line'>}, 100);</span></code></pre></td></tr></table></div></figure>


<p>And pushing it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tessel push index.js</span></code></pre></td></tr></table></div></figure>




<iframe width="420" height="315" src="http://lewuathe.github.io//www.youtube.com/embed/aKLGnU9wsTo" frameborder="0" allowfullscreen></iframe>


<p><strong>BLINK!!!</strong></p>

<h2>More module</h2>

<p>There are many <a href="http://tessel.io/modules">modules</a> with tessel. For humidity, SDCard, Wifi, GPS, Serve etc.
So I want to try these modules more, and expand the possibility of embedded JavaScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference Configuration Library in Nodejs]]></title>
    <link href="http://lewuathe.github.io/blog/2013/12/30/reference-configuration-library-in-nodejs/"/>
    <updated>2013-12-30T20:24:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/12/30/reference-configuration-library-in-nodejs</id>
    <content type="html"><![CDATA[<p>I made npm module at the end of this year, <em>readonly</em>.</p>

<p><a href="https://github.com/Lewuathe/readonly">lewuathe/readonly @GitHub</a></p>

<p><a href="https://npmjs.org/package/readonly">readonly @npm</a></p>

<p>readonly is a simple reference restriction library between custom modules in node object.
When you want to configure access control of specific object from respective modules, this is good option.
For example, you made two modules, both use the same object.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// obj is uses from moduleA and moduleB</span>
</span><span class='line'><span class="c1">// You want moduleA to read and update obj, but moduleB to read obj only.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;A&#39;</span><span class="o">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;B&#39;</span><span class="o">:</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;C&#39;</span><span class="o">:</span><span class="s1">&#39;c&#39;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Embedded in moduleA</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moduleA</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">moduleA</span><span class="p">.</span><span class="nx">obj</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Readonly restriction of `obj` from moduleB</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moduleB</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">moduleB</span><span class="p">.</span><span class="nx">obj</span> <span class="o">=</span> <span class="nx">readonly</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You can update `obj` from moduleA</span>
</span><span class='line'><span class="nx">moduleA</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">A</span> <span class="o">=</span> <span class="s2">&quot;d&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// But you cannot update `obj` from moduleB</span>
</span><span class='line'><span class="nx">moduleA</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">B</span> <span class="o">=</span> <span class="s2">&quot;e&quot;</span><span class="p">;</span>  <span class="c1">// Error</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this situation, you can use <strong>readonly</strong>.</p>

<h2>Install</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">readonly</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">readonly</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;readonly&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;A&#39;</span><span class="o">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;B&#39;</span><span class="o">:</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;C&#39;</span><span class="o">:</span><span class="s1">&#39;c&#39;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Normal ACL. You can use `obj` through moduleA as you like</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moduleA</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">moduleA</span><span class="p">.</span><span class="nx">obj</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Readonly restriction of `obj` in moduleB</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moduleB</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">moduleB</span><span class="p">.</span><span class="nx">obj</span> <span class="o">=</span> <span class="nx">readonly</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You can update `obj` from moduleA</span>
</span><span class='line'><span class="nx">moduleA</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">A</span> <span class="o">=</span> <span class="s2">&quot;d&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// This updates can be seen from moduleB</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moduleB</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">A</span><span class="p">);</span> <span class="c1">// --&gt; &quot;d&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// But if you update `obj` through moduleB, it will throws `UnableRewriteException`</span>
</span><span class='line'><span class="nx">moduleA</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">B</span> <span class="o">=</span> <span class="s2">&quot;e&quot;</span><span class="p">;</span>  <span class="c1">// --&gt; UnableRewriteException: original cannot be rewrite</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this library, you can access current property from restricted modules if original object is updates.
In above example, <code>moduleB.obj.A</code> returns <code>"d"</code>. Try it.
If you find any bugs, please inform me with <a href="https://github.com/Lewuathe/readonly/issues">GitHub</a></p>

<p>Enjoy <strong>readonly</strong> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start KrakenJS]]></title>
    <link href="http://lewuathe.github.io/blog/2013/12/23/how-to-start-krakenjs/"/>
    <updated>2013-12-23T11:55:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/12/23/how-to-start-krakenjs</id>
    <content type="html"><![CDATA[<p>In this november, Paypal released KrakenJS which is web application framework based on Connect, Express.</p>

<p><a href="http://krakenjs.com/">http://krakenjs.com/</a></p>

<p>I had a chance to using this framework at the ending of this year. So I want to inform the facility of this framwork.</p>

<!-- more -->


<p><strong>This article was written for <a href="http://www.adventar.org/calendars/56">Node.js advent calendar</a> 24th day.</strong> Please read previous articles.</p>

<h2>Getting started</h2>

<h3>Install generator</h3>

<p>Kraken uses <a href="http://yeoman.io/">Yeoman</a> for building the bootstrap of application. So first, you need to install generator.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo npm install -g generator-kraken</span></code></pre></td></tr></table></div></figure>


<h3>Create skelton</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ yo kraken
</span><span class='line'>
</span><span class='line'>     ,'""`.
</span><span class='line'>    / _  _ \
</span><span class='line'>    |(@)(@)|   Release the Kraken!
</span><span class='line'>    )  __  (
</span><span class='line'>   /,'))((`.\
</span><span class='line'>  (( ((  )) ))
</span><span class='line'>   `\ `)(' /'
</span><span class='line'>
</span><span class='line'>[?] Application name: MyTestApp
</span><span class='line'>[?] Description: My first kraken application
</span><span class='line'>[?] Author: Kai Sasaki
</span><span class='line'>[?] Use RequireJS? (Y/n) n</span></code></pre></td></tr></table></div></figure>


<p>Write down simple configurations of your application. <a href="http://requirejs.org/">RequireJS</a> is a JavaScript file and module loader.
If you want to optimize loading of module scripts, this is good option. This command installs dependencies automatically.
So you don&rsquo;t need to type <code>npm install</code> again. After only these commands, you can start your application server.</p>

<h3>Start your server</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd MyTestApp
</span><span class='line'>$ npm start
</span><span class='line'>npm WARN package.json mytestapp@0.0.1 No repository field.
</span><span class='line'>
</span><span class='line'>&gt; mytestapp@0.0.1 start /Users/sasakiumi/MyTestApp
</span><span class='line'>&gt; node index.js
</span><span class='line'>
</span><span class='line'>Multipart body parsing will be disabled by default in future versions. To enable, use `middleware:multipart` configuration.
</span><span class='line'>connect.multipart() will be removed in connect 3.0
</span><span class='line'>visit https://github.com/senchalabs/connect/wiki/Connect-3.0 for alternatives
</span><span class='line'>connect.limit() will be removed in connect 3.0
</span><span class='line'>Listening on 8000</span></code></pre></td></tr></table></div></figure>


<p>Congratulations!! You can see your application through web browser.</p>

<p><img src="http://lewuathe.github.io/images/posts/2013-12-23-kraken/startpage.png" alt="start page" /></p>

<h2>Structure</h2>

<p>Directory structure is very simple. It is based on MVC framework which you might used to be.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/config
</span><span class='line'>Application and middleware configuration
</span><span class='line'>
</span><span class='line'>/controllers
</span><span class='line'>Routes and logic
</span><span class='line'>
</span><span class='line'>/lib
</span><span class='line'>Custom developer libraries and other code
</span><span class='line'>
</span><span class='line'>/locales
</span><span class='line'>Language specific content bundles
</span><span class='line'>
</span><span class='line'>/models
</span><span class='line'>Models
</span><span class='line'>
</span><span class='line'>/public
</span><span class='line'>Web resources that are publicly available
</span><span class='line'>
</span><span class='line'>/public/templates
</span><span class='line'>Server and browser-side templates
</span><span class='line'>
</span><span class='line'>/tests
</span><span class='line'>Unit and functional test cases
</span><span class='line'>
</span><span class='line'>index.js
</span><span class='line'>Application entry point </span></code></pre></td></tr></table></div></figure>


<p>For a characteristic, locale settings are prepared as default. You can make your app international easily.
Because KrakenJS is based on Express, you can develop your own Connect stack as you did before.
In the <code>index.js</code> file, some functions which are prepared for each request statuses. These description is easier to understand
than original connect framework. For example, <code>requestBeforeRout</code> means that this function will be called after request before rouring logic.
It&rsquo;s simple, isn&rsquo;t it?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'> 
</span><span class='line'>var kraken = require('kraken-js'),
</span><span class='line'>    app = {};
</span><span class='line'> 
</span><span class='line'>// Fired when an app configures itself
</span><span class='line'>app.configure = function (nconf, next) {
</span><span class='line'>    next(null);
</span><span class='line'>};
</span><span class='line'> 
</span><span class='line'>// Fired at the beginning of an incoming request
</span><span class='line'>app.requestStart = function (server) { };
</span><span class='line'> 
</span><span class='line'>// Fired before routing occurs
</span><span class='line'>app.requestBeforeRoute = function (server) { };
</span><span class='line'> 
</span><span class='line'>// Fired after routing occurs
</span><span class='line'>app.requestAfterRoute = function requestAfterRoute(server) { };
</span><span class='line'> 
</span><span class='line'>kraken.create(app).listen(function (err) {
</span><span class='line'>    if (err) { console.error(err); }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Modules</h2>

<p>KrankenJS can include other utility modules for enterprise use. These are also made by Paypal.</p>

<ul>
<li><a href="https://github.com/paypal/lusca">Lusca</a>: Application security for express apps.</li>
<li><a href="https://github.com/paypal/makara">Makara</a>: An i18n module for Dust.js.</li>
<li><a href="https://github.com/paypal/adaro">Dust</a>: A Dust.js view renderer for express</li>
<li><a href="https://github.com/paypal/kappa">Kappa</a>: A hierarchical npm-registry proxy</li>
</ul>


<p>In this article, I won&rsquo;t write the detail of these modules. But these might be made for enterprise applications.
Lusca and Kappa is necessary for secure and private development environment.</p>

<h2>Examples</h2>

<ul>
<li><a href="https://github.com/lmarkus/Kraken_Example_Shopping_Cart">Kraken Shopping Cart</a></li>
<li><a href="https://github.com/lensam69/Kraken_Example_Localization">Localization</a></li>
<li><a href="https://github.com/lmarkus/Kraken_Example_Configuration">Custom Configuration</a></li>
<li><a href="https://github.com/lensam69/Kraken_Example_Custom_Middleware">Middle ware</a></li>
</ul>


<p>In this one month, the number of examples are increasing. Would you like to add your example to this list?</p>

<h2>Try it!</h2>

<p>KrakenJS is on the way of development, if anything, is only on the first stage of a thing.
I could develop an application by using KrakenJS in 2 weeks. It&rsquo;s easy to use, user friendly, and
it has nice libraries. I&rsquo;ll bet this framework can accelerate your speed of development.</p>

<p>Let&rsquo;s try it!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Custom Segue]]></title>
    <link href="http://lewuathe.github.io/blog/2013/12/17/making-custom-segue/"/>
    <updated>2013-12-17T23:21:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/12/17/making-custom-segue</id>
    <content type="html"><![CDATA[<p>In developing iOS application, have you wanted to make your own cutomized segue? UIKit provides bare segues such as
<code>push</code>, <code>modal</code>, <code>popover</code> and <code>replace</code>. These are useful in any situations. But sometimes I want to make my own transition.
So, I wrote down some tips for making your own custom animation used by segue.</p>

<h2>Make custom segue class</h2>

<p>In Xcode, add new files. The name of this class, anything is OK. But you have to set super class <code>UIStoryboardSegue</code>. Otherwise storyboard
cannot find this custom class subsequently.</p>

<p><img src="http://lewuathe.github.io/images/posts/2013-12-17-customsegue/create-segue.png" alt="create" /></p>

<p>In this case, I named <code>FlipSegue</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">FlipSegue</span> : <span class="nc">UIStoryboardSegue</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And write animations like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;FlipSegue.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">FlipSegue</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">perform</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIViewController</span> <span class="o">*</span><span class="n">sourceController</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIViewController</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">sourceViewController</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UIViewController</span> <span class="o">*</span><span class="n">destinationController</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIViewController</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CATransition</span> <span class="o">*</span><span class="n">transition</span> <span class="o">=</span> <span class="p">[</span><span class="n">CATransition</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>    <span class="n">transition</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">0.4</span><span class="p">;</span>
</span><span class='line'>    <span class="n">transition</span><span class="p">.</span><span class="n">timingFunction</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionEaseInEaseOut</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set transition animation type</span>
</span><span class='line'>    <span class="n">transition</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">kCATransitionFade</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Set transition animation subtype</span>
</span><span class='line'>    <span class="n">transition</span><span class="p">.</span><span class="n">subtype</span> <span class="o">=</span> <span class="n">kCATransitionFromTop</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Change animation</span>
</span><span class='line'>    <span class="p">[</span><span class="n">sourceController</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation:</span><span class="n">transition</span> <span class="nl">forKey:</span><span class="s">@&quot;mytransition&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Transition </span>
</span><span class='line'>    <span class="p">[</span><span class="n">sourceController</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">destinationController</span> <span class="nl">animated:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this segue is called, these animation settings are executed automatically. If you want to change animation, <code>type</code> and <code>subtype</code> is the core
of how the animation moves. These presets are documented in <a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CATransition_Class/Introduction/Introduction.html">here</a>
Please see official document for detail. And then we&rsquo;ll use this segue on storyboard.</p>

<h2>Make segue with story board</h2>

<p>You need to draw your custom segue on storyboard.</p>

<p><img src="http://lewuathe.github.io/images/posts/2013-12-17-customsegue/storyboard-segue.png" alt="storyboard" /></p>

<p>You can see <code>flip</code>, when you drag the arrow of segue on storyboard. This is your custom <code>FlipSegue</code>.
So choose this segue. And run!! Pusing source button of flip segue, your will see your custom animated transition.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Jenkins Widget Plugin]]></title>
    <link href="http://lewuathe.github.io/blog/2013/12/13/making-widget-plugin/"/>
    <updated>2013-12-13T21:14:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/12/13/making-widget-plugin</id>
    <content type="html"><![CDATA[<p>This article was written for <a href="http://qiita.com/advent-calendar/2013/jenkinsci">Jenkins Advent Calendar</a> 14th day.</p>

<h2>Making Jenkins plugin</h2>

<p>Have you ever made Jenkins plugin? This is about my experience developing Jenkins plugin.
I have not written Java ever, and of course didn&rsquo;t know how to make maven projects. So while writing plugin codes,
I went this way and that, googling and trying code snippets. Then I felt that there were not enough documents for
first Jenkins plugin developers. This post however I only made widget plugin, I would be glad that this article will be useful
to the same developers as me.</p>

<h2>Getting started</h2>

<p>First, it is needed to download skelton of Jenkins plugin by using maven plugin. I used maven-3.0.5, and OSX machine.
Write below xml in <code>~/.m2/settings.xml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;settings&gt;
</span><span class='line'>  &lt;pluginGroups&gt;
</span><span class='line'>    &lt;pluginGroup&gt;org.jenkins-ci.tools&lt;/pluginGroup&gt;
</span><span class='line'>  &lt;/pluginGroups&gt;
</span><span class='line'>
</span><span class='line'>  &lt;profiles&gt;
</span><span class='line'>    &lt;!-- Give access to Jenkins plugins --&gt;
</span><span class='line'>    &lt;profile&gt;
</span><span class='line'>      &lt;id&gt;jenkins&lt;/id&gt;
</span><span class='line'>      &lt;activation&gt;
</span><span class='line'>        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;!-- change this to false, if you don't like to have it on per default --&gt;
</span><span class='line'>      &lt;/activation&gt;
</span><span class='line'>      &lt;repositories&gt;
</span><span class='line'>        &lt;repository&gt;
</span><span class='line'>          &lt;id&gt;repo.jenkins-ci.org&lt;/id&gt;
</span><span class='line'>          &lt;url&gt;http://repo.jenkins-ci.org/public/&lt;/url&gt;
</span><span class='line'>        &lt;/repository&gt;
</span><span class='line'>      &lt;/repositories&gt;
</span><span class='line'>      &lt;pluginRepositories&gt;
</span><span class='line'>        &lt;pluginRepository&gt;
</span><span class='line'>          &lt;id&gt;repo.jenkins-ci.org&lt;/id&gt;
</span><span class='line'>          &lt;url&gt;http://repo.jenkins-ci.org/public/&lt;/url&gt;
</span><span class='line'>        &lt;/pluginRepository&gt;
</span><span class='line'>      &lt;/pluginRepositories&gt;
</span><span class='line'>    &lt;/profile&gt;
</span><span class='line'>  &lt;/profiles&gt;
</span><span class='line'>  &lt;mirrors&gt;
</span><span class='line'>    &lt;mirror&gt;
</span><span class='line'>      &lt;id&gt;repo.jenkins-ci.org&lt;/id&gt;
</span><span class='line'>      &lt;url&gt;http://repo.jenkins-ci.org/public/&lt;/url&gt;
</span><span class='line'>      &lt;mirrorOf&gt;m.g.o-public&lt;/mirrorOf&gt;
</span><span class='line'>    &lt;/mirror&gt;
</span><span class='line'>  &lt;/mirrors&gt;
</span><span class='line'>&lt;/settings&gt;</span></code></pre></td></tr></table></div></figure>


<p>Create skelton.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mvn hpi:create</span></code></pre></td></tr></table></div></figure>


<p>Project name and artifactId will be asked as below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[INFO] Scanning for projects...
</span><span class='line'>[INFO]
</span><span class='line'>[INFO] ------------------------------------------------------------------------
</span><span class='line'>[INFO] Building Maven Stub Project (No POM) 1
</span><span class='line'>[INFO] ------------------------------------------------------------------------
</span><span class='line'>[INFO]
</span><span class='line'>[INFO] --- maven-hpi-plugin:1.106:create (default-cli) @ standalone-pom ---
</span><span class='line'>Enter the groupId of your plugin [org.jenkins-ci.plugins]: com.lewuathe.plugins
</span><span class='line'>Enter the artifactId of your plugin (normally without '-plugin' suffix): mytest</span></code></pre></td></tr></table></div></figure>


<p>Then under current directory, <code>mytest</code> project might be made. The directory tree looks like.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tree mytest
</span><span class='line'>mytest
</span><span class='line'>├── pom.xml
</span><span class='line'>└── src
</span><span class='line'>    └── main
</span><span class='line'>        ├── java
</span><span class='line'>        │   └── com
</span><span class='line'>        │       └── lewuathe
</span><span class='line'>        │           └── plugins
</span><span class='line'>        │               └── mytest
</span><span class='line'>        │                   └── HelloWorldBuilder.java
</span><span class='line'>        └── resources
</span><span class='line'>            ├── com
</span><span class='line'>            │   └── lewuathe
</span><span class='line'>            │       └── plugins
</span><span class='line'>            │           └── mytest
</span><span class='line'>            │               └── HelloWorldBuilder
</span><span class='line'>            │                   ├── config.jelly
</span><span class='line'>            │                   ├── global.jelly
</span><span class='line'>            │                   ├── help-name.html
</span><span class='line'>            │                   └── help-useFrench.html
</span><span class='line'>            └── index.jelly
</span><span class='line'>
</span><span class='line'>13 directories, 7 files</span></code></pre></td></tr></table></div></figure>


<p>This sample project uses Builder extension point of Jenkins plugin. <a href="https://wiki.jenkins-ci.org/display/JENKINS/Extension+points#Extensionpoints-hudson.tasks.Builder">Builder extension</a> point is executed inside of the build process. If you have any process run on the way of building, you have to write the class which extends Builder. But in this article, I introduce Widget plugin. If you want to know what kind of extension points exist, please search on <a href="https://wiki.jenkins-ci.org/display/JENKINS/Extension+points">this page</a></p>

<p>Before explaining about Widget plugin, let me say how to run this plugins.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mvn hpi:run</span></code></pre></td></tr></table></div></figure>


<p>With above command, maven can download packages on which this plugin project depends and run Jenkins test server on 8080 port.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Access below host!
</span><span class='line'>http://localhost:8080/jenkins/</span></code></pre></td></tr></table></div></figure>


<p>You can look at Jenkins server! There is all you have to do before developing your own Jenkins plugin. Let&rsquo;s get started.</p>

<h2>Write Widget plugin</h2>

<p>My Jenkins plugin is put on <a href="https://github.com/jenkinsci/hckrnews-plugin">this repository</a>. With this plugin you can see hacker news top time-line on Jenkins dashboard.
From <a href="https://wiki.jenkins-ci.org/display/JENKINS/Hckrnews+Plugin">there</a>, it can be downloaded.
Screen shot was taken as below.</p>

<p><img src="http://lewuathe.github.io/images/posts/2013-12-13-jenkins-widget-plugin/hckrnews-screenshot.png" alt="screenshot" /></p>

<p>By examing this plugin&rsquo;s source code, I want to list up the points I had trouble in completing this plugin.</p>

<h2>Correspondence of Jelly file and Java class</h2>

<p>In Jenkins, <a href="http://stapler.kohsuke.org/what-is.html">Stapler</a> is used in order to map URL and Java objects.</p>

<blockquote><p>Stapler is a library that &ldquo;staples&rdquo; your application objects to URLs, making it easier to write web applications. The core idea of Stapler is to automatically assign URLs for your objects, creating an intuitive URL hierarchy.</p></blockquote>

<p>At first, I cannot grasp what that means and practically which objects are mapped to jelly files. In conclusion, this is the correspond directory files.
Please look at <code>src/main/java</code> and <code>src/main/resources</code> directory of your project. It looks the same structure, doesn&rsquo;t it? So, in these directory, the correnspondence between Java class and jelly filesis made.
For example on hckrnews-plugin source tree, <code>java/com/lewuathe/plugins/hckrnews/HckrnewsWidget.java</code> corresponds to <code>com/lewuathe/plugins/hckrnews/HckrnewsWidget/</code>.
The former is what model or controller, and the latter is view in the context of MVC.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── java
</span><span class='line'>│   └── com
</span><span class='line'>│       └── lewuathe
</span><span class='line'>│           └── plugins
</span><span class='line'>│               └── hckrnews
</span><span class='line'>│                   └── HckrnewsWidget.java  // &lt;-- This is controller
</span><span class='line'>└── resources
</span><span class='line'>    ├── com
</span><span class='line'>    │   └── lewuathe
</span><span class='line'>    │       └── plugins
</span><span class='line'>    │           └── hckrnews
</span><span class='line'>    │               └── HckrnewsWidget
</span><span class='line'>    │                   └── index.jelly     // &lt;-- This is view which corresponds to above controller, HckrnewsWidget.java
</span><span class='line'>    └── index.jelly</span></code></pre></td></tr></table></div></figure>


<h2>Calling view method</h2>

<p>In <code>HckrnewsWidget.java</code>, news static class in child class of Widget extension points is written.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Extension</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HckrnewsWidget</span> <span class="kd">extends</span> <span class="n">Widget</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// ....</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">News</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">points</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">postedBy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUrl</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">url</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPoints</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">points</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPostedBy</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">postedBy</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="c1">// ....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ordinary getter of News object. So it comes to index.jelly file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="nl">j:</span><span class="n">jelly</span> <span class="nl">xmlns:</span><span class="n">j</span><span class="o">=</span><span class="s">&quot;jelly:core&quot;</span> <span class="nl">xmlns:</span><span class="n">st</span><span class="o">=</span><span class="s">&quot;jelly:stapler&quot;</span> <span class="nl">xmlns:</span><span class="n">d</span><span class="o">=</span><span class="s">&quot;jelly:define&quot;</span> <span class="nl">xmlns:</span><span class="n">l</span><span class="o">=</span><span class="s">&quot;/lib/layout&quot;</span> <span class="nl">xmlns:</span><span class="n">t</span><span class="o">=</span><span class="s">&quot;/lib/hudson&quot;</span> <span class="nl">xmlns:</span><span class="n">f</span><span class="o">=</span><span class="s">&quot;/lib/form&quot;</span> <span class="nl">xmlns:</span><span class="n">i</span><span class="o">=</span><span class="s">&quot;jelly:fmt&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nl">l:</span><span class="n">pane</span> <span class="n">width</span><span class="o">=</span><span class="s">&quot;3&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;Hacker News Top&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">th</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;pane&quot;</span><span class="o">&gt;</span><span class="n">Title</span><span class="o">&lt;/</span><span class="n">th</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">th</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;pane&quot;</span><span class="o">&gt;</span><span class="n">Points</span><span class="o">&lt;/</span><span class="n">th</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">th</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;pane&quot;</span><span class="o">&gt;</span><span class="n">Posted</span> <span class="n">by</span><span class="o">&lt;/</span><span class="n">th</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nl">j:</span><span class="n">forEach</span> <span class="n">var</span><span class="o">=</span><span class="s">&quot;news&quot;</span> <span class="n">items</span><span class="o">=</span><span class="s">&quot;${it.newslist}&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">td</span> <span class="n">align</span><span class="o">=</span><span class="s">&quot;left&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;pane&quot;</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;width:10px;&quot;</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;${news.url}&quot;</span><span class="o">&gt;</span><span class="n">$</span><span class="o">{</span><span class="n">news</span><span class="o">.</span><span class="na">title</span><span class="o">}&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">td</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;pane&quot;</span> <span class="n">align</span><span class="o">=</span><span class="s">&quot;right&quot;</span><span class="o">&gt;</span><span class="n">$</span><span class="o">{</span><span class="n">news</span><span class="o">.</span><span class="na">points</span><span class="o">}&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">td</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;pane&quot;</span> <span class="n">align</span><span class="o">=</span><span class="s">&quot;right&quot;</span><span class="o">&gt;</span><span class="n">$</span><span class="o">{</span><span class="n">news</span><span class="o">.</span><span class="na">postedBy</span><span class="o">}&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nl">j:</span><span class="n">forEach</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nl">l:</span><span class="n">pane</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Last</span> <span class="nl">Updated:</span> <span class="n">$</span><span class="o">{</span><span class="n">it</span><span class="o">.</span><span class="na">lastupdatedstr</span><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nl">j:</span><span class="n">jelly</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The detail of Jelly syntax is not explained in this time. In this template file, <code>it</code> refers to the correspondence object in logic of stapler,
in other words that&rsquo;s <code>HckrnewsWidget.java</code>. So when you writes as <code>it.newslist</code>, this calls</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Extension</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HckrnewsWidget</span> <span class="kd">extends</span> <span class="n">Widget</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">News</span><span class="o">&gt;</span> <span class="nf">getNewslist</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">newsList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then <code>index.jelly</code> can get newslist. But you should take care of the casing of method name. If you write <code>getNewsList</code>, it can be called. Types are below.</p>

<ul>
<li>getNewslist : it.newslist is called</li>
<li>getNewsList : it.newList is called</li>
<li>getNewslist : it.newsList is <em>not</em> called</li>
</ul>


<p>So it looks like auto casting to a captal letter is only applied to the first letter. It is necessary to arrange the type of posteror letters.</p>

<h2>Making Wiki</h2>

<p>It might be rare case which only I experienced. Jenkins wiki page can not be created automatically.
Of course, it is taken for granted that writing down your wiki url on pom.xml.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">project</span> <span class="n">xmlns</span><span class="o">=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="nl">xmlns:</span><span class="n">xsi</span><span class="o">=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="nl">xsi:</span><span class="n">schemaLocation</span><span class="o">=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">url</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//wiki.jenkins-ci.org/display/JENKINS/Hckrnews+Plugin&lt;/url&gt;</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">project</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this is not the trigger of creating Jenkins wiki page :( You have to make your own page yourself.
I misunderstood about making wiki pages on this point. After you make your own wiki page, let&rsquo;s add a tag.</p>

<p><img src="http://lewuathe.github.io/images/posts/2013-12-13-jenkins-widget-plugin/add-tag.png" alt="add-tag" /></p>

<p>After you add tag, your wiki page will be listed on <a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugins">this page</a>. It will be easier to search for users.</p>

<h1>After all</h1>

<p>This experience taught me many things about plugin development, Jenkins extension points and of course <strong>Java</strong> !!
Conversly if you have no experience of Java, you can also make your own Jenkins plugin about two weeks.
And I want to keep making Jenkins plugins when idea comes to me.</p>

<p>Last but not least, write your test codes in your plugin. With maven, you can run JUnit very easily.
If there are no test codes in the plugin of continuous integration tool, Jenkins, it sounds like mistaking the means for the end, doesn&rsquo;t it?</p>

<p>Viva great continuous integration! Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Samurai Basecamp in Tokyo <2>]]></title>
    <link href="http://lewuathe.github.io/blog/2013/12/09/agile-samurai-basecamp-in-tokyo/"/>
    <updated>2013-12-09T20:16:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/12/09/agile-samurai-basecamp-in-tokyo</id>
    <content type="html"><![CDATA[<p>This entry follows previous post.
The practical methods about TDD are explained in this section.</p>

<p>And also, it is written as an article of <a href="http://qiita.com/advent-calendar/2013/tddadventjp">TDD advent calendar on 10th day</a>.</p>

<h2>How to start TDD? Takuto Wada(twada)</h2>

<p>The left wing of agile is what about team environment, management, scrum, iteration and standup meeting. On the other hand, the right wing of agile is not perceived enough to ordinary people.
It&rsquo;s CI/CD and automation. These are also as important as the formers. There is apparent difference between making software and keeping making software. Agile programming always requires refactoring.
In TDD process, refactoring is the core process. You cannot say that you achieve TDD without refactoring your program.</p>

<h3>Write running code, and then write clean code</h3>

<p>Making Good design previously is difficult task. Besides we don&rsquo;t know what is good design on the system undefined yet. Software and program are too complex for us to understand perfectly.
So we cannot avoid progressing development with positivism notion. In other words, write code first! However we cannot solve all problems yet. The codes once confirmed as what runs with no bugs
are not willing to be refactored. We are afraid of changing running code. TDD enables us to pass over these fears. The concrete cycle of TDD is below.</p>

<h3>TDD cycle</h3>

<ol>
<li>Make TODO list</li>
<li>Write test code first</li>
<li>Running test and fail (<em>Red phase</em>)</li>
<li>Write product code</li>
<li>Running test and success (<em>Green phase</em>)</li>
<li>Refactoring product code with keeping Green</li>
<li>Repeat 1~6 process</li>
</ol>


<p>The most important process in these 7 phases is refactoring. If you result in failure of TDD, the main reason is to neglect refactoring your product code. It needs more power of the will.
So it is better to insert refactoring into TDD process. You don&rsquo;t do refactoring as an addition, but do as necessary process.</p>

<p><img src="http://lewuathe.github.io/images/posts/2013-12-10-samurai-2/golden_cycle.jpg" alt="Golden Cycle" /></p>

<h3>The secrets of TDD</h3>

<p>To achive TDD, you should know how to start TDD at your daily work.</p>

<h3><em>Small start one by one</em></h3>

<p>You should make small TODO list as possible. It is good to reduce each task within the span which you can complete red, green and refactoring cycle in 15~30minutes.
The more fast you can complete, the better your TODO list is.</p>

<h3><em>Tackle one enemy in one time</em></h3>

<p>However, if you can reduce each task in small unit, starting all tasks at one time is not good work. As Samurai(Musashi Miyamoto) did, you have to also complete tasks one by one.
You can concentrate the essentials of each task,</p>

<h3><em>You are the first user</em></h3>

<p>When you write test code, you should take care of the usability. The interface of your product code is determined when you write your test code.
So before write your test code and while writing your test code, your should try and make the interface better bacause you are the first user of your product.
The only way to know how user friendly your product is using it yourself. In other words, let&rsquo;s test it.</p>

<h3><em>Test your uncertain</em></h3>

<p>The purpose of TDD is not mainly to guarantee software quality, but to take your ease in order to sleep peacefully. If there are no automatic test codes, it is horror.
The every time you release your products, you are to end up with praying for the success of the release. Or in order to assure that there are no bugs in your software,
you might have to many overtime work. That&rsquo;s too bad :(. To avoid this situation, test codes are selected and written under the criteria of how this test makes you peaceful.</p>

<h3><em>Knit a lifeline</em></h3>

<p>This is relevant to previous item. Compiled a lot of test codes will help you when you are in danger or crisis. This test codes become a lifeline knitted over many layers
It will support you in any situation strongly.</p>

<h3><em>The essencial goal of TDD</em></h3>

<p>The best goal of TDD is keeping your health. This means your code health, your team health and of course your code health. Bacause of TDD, all developers can go home early,
take a meal with your family and friends, make your product with peaceful mind. This is the essential goal of TDD for all software engineers. Conquering your anxiety and keeping you healthy.</p>

<h1>After session</h1>

<p>This goal made me realize why I am a software engineer again. Programming, writing code should always be fun. It should always be what makes me happy.
If you are unhappy with writing code as work, it mistakes the means for the end, doesn&rsquo;t it? TDD is the one way of making my life as software engineer more joyful.
That mind must not be forgot whenever I type my test code.</p>

<p>The each line of your test codes makes you happy, I believe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Samurai Basecamp in Tokyo <1>]]></title>
    <link href="http://lewuathe.github.io/blog/2013/12/08/whatt-going-on-at-agile-samurai-basecamp/"/>
    <updated>2013-12-08T19:29:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/12/08/whatt-going-on-at-agile-samurai-basecamp</id>
    <content type="html"><![CDATA[<p>At work, I am a scrum padawan, not yet master :&ndash;)</p>

<p>Through developing with agile team, I was taught what scrum is, product backlog is, sprint is.</p>

<p>In order to accelerate this growth as an agile programmer, I took part in TDD section of <a href="http://www.agilesamuraibasecamp.org/">Agile Samurai Basecamp</a>.
TDD(Test Driven Development) is the most interesting method in my mind. So I wanted to know how to progress TDD in my daily work.
This article includes TDD core process which I study in basecamp and what I thought for the future career as a programmer.</p>

<h2>Keynote : Shintarou Kakutani</h2>

<p>He is the translator of <em><a href="http://pragprog.com/book/jtrap/the-agile-samurai">The Agile Samurai</a></em> .
He answered the questions  who is agile samurai, what agile teams are for.</p>

<h3>Who is agile samurai?</h3>

<p><img src="http://lewuathe.github.io/images/posts/2013-12-08-samurai-1/samurai.jpg" alt="samurai" /></p>

<p>Agile team must keep to delivering valuable software every week. It doesn&rsquo;t mean just delivering lecture or lesson,
but codes which run as what you and your customer expects. To achieve this, it is very important to tackle problems as <em>&ldquo;whole one team&rdquo;</em>  which includes
your customers. Customers decide what you make, then your decide how you make. Delivering values to customer and tackling problems as whole one team is the
core concept of <em><a href="http://pragprog.com/book/jtrap/the-agile-samurai">The Agile Samurai</a></em> .</p>

<h3>Why did you write more Agile book?</h3>

<p>There were already many agile books in stores. Why another agile book is needed at that time?
In the past, there were no books which compiled main below 7 books which explains agile practice for detail.</p>

<ul>
<li><a href="http://www.amazon.co.jp/XP%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%BB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80%E2%80%95%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E7%A9%B6%E6%A5%B5%E3%81%AE%E6%89%8B%E6%B3%95-%E3%82%B1%E3%83%B3%E3%83%88-%E3%83%99%E3%83%83%E3%82%AF/dp/489471275X">Extream programming explained</a></li>
<li><a href="http://www.amazon.co.jp/Refactoring-Improving-Existing-Addison-Wesley-Technology/dp/0201485672/ref=sr_1_1?s=english-books&amp;ie=UTF8&amp;qid=1386502275&amp;sr=1-1&amp;keywords=refactoring">Refactoring</a></li>
<li><a href="http://www.amazon.co.jp/XP%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%BB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%AE%9F%E8%A1%8C%E8%A8%88%E7%94%BB-The-Series-%E3%82%B1%E3%83%B3%E3%83%88-%E3%83%99%E3%83%83%E3%82%AF/dp/4894713411/ref=sr_1_cc_1?s=aps&amp;ie=UTF8&amp;qid=1386502308&amp;sr=1-1-catcorr&amp;keywords=%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%80%80%E5%AE%9F%E8%A1%8C%E8%A8%88%E7%94%BB">Extream programming planning</a></li>
<li><a href="http://www.amazon.co.jp/XP%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%BB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%B0%8E%E5%85%A5%E7%B7%A8-XP%E5%AE%9F%E8%B7%B5%E3%81%AE%E6%89%8B%E5%BC%95%E3%81%8D-The-XP-Series/dp/4894714914/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1386502350&amp;sr=1-1&amp;keywords=%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%80%80%E5%B0%8E%E5%85%A5%E7%B7%A8">Extream programming installed</a></li>
<li><a href="http://www.amazon.co.jp/%E3%83%86%E3%82%B9%E3%83%88%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80-%E3%82%B1%E3%83%B3%E3%83%88-%E3%83%99%E3%83%83%E3%82%AF/dp/4894717115/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1386502385&amp;sr=1-2&amp;keywords=Test+Driven+Development+by+example">Test Driven Development by example</a></li>
<li><a href="http://www.amazon.co.jp/User-Stories-Applied-Software-Development-ebook/dp/B0054KOL74/ref=sr_1_cc_1?s=aps&amp;ie=UTF8&amp;qid=1386502435&amp;sr=1-1-catcorr&amp;keywords=User+Stories+applied">User stories applied</a></li>
<li><a href="http://www.amazon.co.jp/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%81%AA%E8%A6%8B%E7%A9%8D%E3%82%8A%E3%81%A8%E8%A8%88%E7%94%BB%E3%81%A5%E3%81%8F%E3%82%8A-~%E4%BE%A1%E5%80%A4%E3%81%82%E3%82%8B%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%92%E8%82%B2%E3%81%A6%E3%82%8B%E6%A6%82%E5%BF%B5%E3%81%A8%E6%8A%80%E6%B3%95~-Mike-Cohn/dp/4839924023/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1386502473&amp;sr=1-1&amp;keywords=%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%81%AA%E8%A6%8B%E7%A9%8D%E3%82%82%E3%82%8A%E3%81%A8%E8%A8%88%E7%94%BB%E4%BD%9C%E3%82%8A">Agile Estimating and Planning</a></li>
</ul>


<p><em><a href="http://pragprog.com/book/jtrap/the-agile-samurai">The Agile Samurai</a></em> collects the essences of these books. In addition to these concepts, this book add new stuff.
So it&rsquo;s inception deck. If you want to know about inception deck, read this book. And the session of inception deck was also held at this bootcamp. This is important concept of agile practice.</p>

<h3>Why a hero in this book is called &ldquo;Samurai&rdquo;?</h3>

<p>The author, Jonathan Rasmusson likes <em>&ldquo;<a href="http://www.amazon.com/Way-Peaceful-Warrior-Changes-Lives/dp/0915811898">Peaceful Warrior</a>&rdquo;</em> . Initial title of &ldquo;Agile samurai&rdquo; was &ldquo;Agile peaceful warrior&rdquo; after this novel title. But it was not grasped by other people who have not read this book. So collaborators recommended him the word, &ldquo;Samurai&rdquo; which means same notion as peaceful warrior. &ldquo;Samurai&rdquo; is more perspicuous than &ldquo;peaceful warrior&rdquo; to the people of all over the world. Master sensei is also only the notion, not real samurai characters who lived in Japan.</p>

<h3>What is the agile practice?</h3>

<p>Agile development means the way of keeping feedback under the cooperative environment. To achieve team&rsquo;s goal, taking action requires cooperative environment of your team. All members must have the sense of ownership of their products. This thought makes good mood and necessary environment. But this practice can be accomplished only by your learning with on-the-job training. There is no secret ingredient. It&rsquo;s just you.</p>

<h3>Last but not least</h3>

<ol>
<li>Sharing what you learn with others</li>
<li>Keep searching the better answers</li>
<li>Enjoy!</li>
</ol>


<p>Enjoy your agile life!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closure With Async.js]]></title>
    <link href="http://lewuathe.github.io/blog/2013/12/05/closure-with-async-dot-js/"/>
    <updated>2013-12-05T20:29:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/12/05/closure-with-async-dot-js</id>
    <content type="html"><![CDATA[<p>You may use <a href="https://npmjs.org/package/async">Async.js</a> at least one time when you develop with nodejs.</p>

<blockquote><p>Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript.</p></blockquote>

<p>So if you want to write asynchronous code with JavaScript, I recommend you to use it. It&rsquo;s easy to use, simple syntax.
However I had trouble with using Async.js in the context of giving dynamic task array. In this article, I want to share
how to write dynamic task array given to Async.js module.</p>

<h2>Problem</h2>

<p>I wrote like a below code with nodejs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">async</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Total task is 10 which is executed in parallel</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TASK_NUM</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// All task functions are put in taskList</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">taskList</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">TASK_NUM</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">taskList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">(</span><span class="nx">taskList</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you run this code, I obtained below output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="p">[</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This didn&rsquo;t fit my expectation. I thought all tasks should get i-th argument. So each task&rsquo;s output
is i-th number, if i-th task runs. However in this case, all task&rsquo;s output is 10. Why closure in function(In JavaScript, <code>function</code> makes variable scope, called closure) might not be effective?</p>

<h2>Answer</h2>

<p>There is answer in <a href="http://stackoverflow.com/questions/12472448/async-parallel-with-functions-dynamic-array">StackOverflow</a>.</p>

<blockquote><p>A closure doesn&rsquo;t &ldquo;trap&rdquo; the value that an outer variable had at the time it was created; it &ldquo;traps&rdquo; a reference to whatever value the outer variable has at the time it&rsquo;s executed (which in this case won&rsquo;t be until well after your for loop has finished.</p></blockquote>

<p>So in this case, closure does not make scope when it is <strong>declared</strong>, but <strong>executed</strong>. The variable <code>i</code> resulted in 10 after <code>for</code> loop in this code. And then each tasks will be executed under the condition that variable <code>i</code> is 10. I understood why these odd phenomenon was occured.</p>

<h2>How to write</h2>

<p>How should I write in order to execute this code as I expected in advance. Same page showed me the answer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">deleteFunction</span> <span class="o">=</span> <span class="nx">makeDeleteFunction</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Writing wrapper function which wraps my original tasks makes scope under given argument <code>i</code>. When you declare task, you should not make task function directly, but should give parameters which trapped in declaration context to the wrapper function. Here is my sample that is corresponds to above code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">async</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Wrapper function</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">makeTask</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Total task is 10 which is executed in parallel</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TASK_NUM</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// All task functions are put in taskList</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">taskList</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">TASK_NUM</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">taskList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">makeTask</span><span class="p">(</span><span class="nx">i</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">(</span><span class="nx">taskList</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then output is given as I expected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="mi">8</span>
</span><span class='line'><span class="mi">9</span>
</span><span class='line'><span class="p">[</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you write dynamic task function with Async.js, notice these fact.</p>
]]></content>
  </entry>
  
</feed>
