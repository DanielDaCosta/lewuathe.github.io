<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Actor | The first cry of Atom]]></title>
  <link href="http://lewuathe.github.io/blog/categories/actor/atom.xml" rel="self"/>
  <link href="http://lewuathe.github.io/"/>
  <updated>2014-03-18T23:18:31+09:00</updated>
  <id>http://lewuathe.github.io/</id>
  <author>
    <name><![CDATA[Kai Sasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Actor Model With Node Cluster]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/01/actor-model-with-node-cluster/"/>
    <updated>2014-03-01T02:19:34+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/01/actor-model-with-node-cluster</id>
    <content type="html"><![CDATA[<p>If you want to implement asynchronous parallel system with nodejs, the best and easiest way might be using <a href="http://nodejs.org/api/cluster.html">cluster</a>.
Cluster module is easy to use and provides you faster implementation. I wrote somewhat Actor like code that uses cluster module.</p>

<!-- more -->


<p>```js
var cluster = require(&lsquo;cluster&rsquo;);
var http = require(&lsquo;http&rsquo;);</p>

<p>// Get the number of core of your CPU
var numCPUs = require(&lsquo;os&rsquo;).cpus().length;</p>

<p>if (cluster.isWorker) {</p>

<pre><code>// Starting worker process
console.log("I am worker " + process.pid);

// Send master process a message
process.send({ chat: "I am + " + process.pid });

// Event handler that is called when this worker get a message
process.on('message', function(msg) {
    console.log('Thank you receiving: ' + msg.chat);
});
</code></pre>

<p>}</p>

<p>if (cluster.isMaster) {</p>

<pre><code>// Starting master process
for (var i = 0; i&lt; numCPUs; i++ ){

    // Create worker process
    var worker = cluster.fork();
    console.log("worker forked: pid=" + worker.process.pid);

    // Catch the timing of worker death
    worker.on('death', function(worker) {
        console.log('worker ' + worker.process.pid + ' died');
    });

    // Event hander that is called when the master get a message
    worker.on('message', function(msg) {
        console.log('master received: ' + msg.chat);
        worker.send({chat: 'Hi, I received: ' + msg.chat});
    });
}
</code></pre>

<p>}</p>

<p>// In order to kill all process, you shouldn' forget below part
process.on(&lsquo;SIGINT&rsquo;, function() {</p>

<pre><code>if (cluster.isMaster) {
    console.log('master is killed: pid=' + process.pid);
} else {
    console.log('worker is killed pid=' + process.pid);
}
process.exit(0);
</code></pre>

<p>});
```</p>

<p>With cluster, there are two types of actors. One is master process, and the others are worker processes.
You can let master process and worker process send message respectively. To sending worker a message from master,
use <code>worker.send({text:"From master to worker"})</code>. On the other hand to sending master a message from worker process,
use <code>process.send({text:"From worker to master"})</code>.</p>

<p>This asynchronous model looks like Actor and message model. In this model, it is not necessary to implement exclusive control
because all processes acts harmoniously with only messages. If I can take this model nicely into nodejs, <a href="https://github.com/Lewuathe/n42">n42</a>
will get better running performance. I&rsquo;ll try it.</p>

<p>Thank you</p>
]]></content>
  </entry>
  
</feed>
