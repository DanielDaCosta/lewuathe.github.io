<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | The first cry of Atom]]></title>
  <link href="http://lewuathe.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://lewuathe.github.io/"/>
  <updated>2014-03-25T22:41:48+09:00</updated>
  <id>http://lewuathe.github.io/</id>
  <author>
    <name><![CDATA[Kai Sasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Next Tile on Tempai]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/19/next-tile-on-tempai/"/>
    <updated>2014-03-19T22:57:59+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/19/next-tile-on-tempai</id>
    <content type="html"><![CDATA[<p>I tried <a href="http://www.itmedia.co.jp/enterprise/articles/1004/03/news002_2.html">this problem</a>.</p>

<p>Your program receives the hand of mahjong. Returns the &ldquo;Waiting style&rdquo; of this hand.
But there are some conditions as below.</p>

<ul>
<li>There are no <em>Jihai</em>, only <em>Manzu</em></li>
<li>Make <em>Juntsu</em>, <em>Kohtsu</em> and <em>Head</em></li>
<li>Regard different order waiting as the same</li>
<li>If there are no waiting, no output</li>
</ul>


<!-- more -->


<p>My source code are pushed <a href="https://github.com/Lewuathe/java-GoF/blob/master/AtCoder/MahjongWait/src/Main.java">this repository</a></p>

<p>```java
import java.util.Scanner;</p>

<p>/<em>*
 * Created by Kai Sasaki on 3/19/14.
 </em>/
public class Main {</p>

<pre><code>public static void search(int tiles[], boolean isHead, String ans, int order) {
    for (int i = 0; i &lt; 9; i++) {
        if (tiles[i] &gt;= 3) {
            // In order to remove practical same hands,
            // this operation should be done before bigger values
            if (i + 1 &lt; order) {
                return;
            }

            // In order to remove practical same hands,
            // this operation should be done before finding head
            if (isHead) {
                return;
            }

            // Find *Kohtsu*
            int tmp[] = tiles.clone();
            tmp[i] -= 3;
                                                                                                                                                                                             String tmpAns = ans + String.format("(%d%d%d)", i + 1, i + 1, i + 1);
            search(tmp, isHead, tmpAns, i + 1);
        }
    }

    for (int i = 0; i &lt; 7; i++) {
        if (tiles[i] &gt;= 1 &amp;&amp; tiles[i + 1] &gt;= 1 &amp;&amp; tiles[i + 2] &gt;= 1) {
            // In order to remove practical same hands,
            // this operation should be done before bigger values
            if (i + 1 &lt; order) {
                return;
            }

            // In order to remove practical same hands,
            // this operation should be done before finding head
            if (isHead) {
                return;
            }

            // Find *Juntsu*
            int tmp[] = tiles.clone();
            tmp[i] -= 1;
            tmp[i + 1] -= 1;
            tmp[i + 2] -= 1;
            String tmpAns = ans + String.format("(%d%d%d)", i + 1, i + 2, i + 3);
            search(tmp, isHead, tmpAns, i + 1);
        }
    }

    for (int i = 0; i &lt; 9; i++) {
        if (tiles[i] &gt;= 2 &amp;&amp; !isHead) {
            if (i + 1 &lt; order) {
                return;
            }

            // Find head
            int tmp[] = tiles.clone();
            tmp[i] -= 2;
            String tmpAns = ans + String.format("(%d%d)", i + 1, i + 1);
            search(tmp, true, tmpAns, i + 1);
        }
    }

    // No more mentsu
    int oneCount = 0;
    int twoCount = 0;
    int sum = 0;
    for (int i = 0; i &lt; 9; i++) {
       sum += tiles[i];
       if (tiles[i] == 1) {
           oneCount += 1;
       } else if (tiles[i] == 2) {
           twoCount += 1;
       }
    }

    // 000100000
    if (oneCount == 1 &amp;&amp; sum == 1) {
        for (int i = 0; i &lt; 9; i++) {
            if (tiles[i] == 1) {
                ans += String.format("[%d]", i + 1);
                System.out.println(ans);
                return;
            }
        }
    }

    // 000001100
    if (oneCount == 2 &amp;&amp; sum == 2) {
        for (int i = 0; i &lt; 8; i++) {
            if (tiles[0] == 1 &amp;&amp; tiles[1] == 1) {
                ans += "[12]";
                System.out.println(ans);
                return;
            } else if (tiles[7] == 1 &amp;&amp; tiles[8] == 1) {
                ans += "[89]";
                System.out.println(ans);
                return;
            } else if (tiles[i] == 1 &amp;&amp; tiles[i + 1] == 1) {
                ans += String.format("[%d%d]", i + 1, i + 2);
                System.out.println(ans);
                return;
            }
       }
    }

    if (twoCount == 1 &amp;&amp; sum == 2) {
        for (int i = 0; i &lt; 9; i++) {
            if (tiles[i] == 2) {
                ans += String.format("[%d%d]", i + 1, i + 1);
                System.out.println(ans);
                return;
            }
        }
    }
    return;
}

public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    // Receive string that represents hand values
    String hand = sc.next();

    int tiles[] = new int[9];

    // Initialization
    for (int i = 0; i &lt; 9; i++) {
        tiles[i] = 0;
    }

    // Setting tiles array
    for (int i = 0; i &lt; 13; i++) {
        Integer tile = Integer.parseInt("" + hand.charAt(i));
        tiles[tile - 1] += 1;
    }

    search(tiles, false, "", 1);
}
</code></pre>

<p>}
```</p>

<p>This is the simple depth first search algorithm. Ths main point of this code is in the
main method. I expressed the data structure that represents <em>Hand</em> as the interger array.
Each integer corresponds to the count of each tile. So in order to calculate the waiting tile,
in this case, all you have to know is the count of each tile. With this data structure, you don&rsquo;t
need to retain complex structure. And also the operation such as finding <em>Juntsu</em> and so on is easy
to execute bacause only increment or decrement of each value of this array.</p>

<p>It took me a long time but thanks to this training, a search algorithm such as <a href="http://en.wikipedia.org/wiki/Depth-first_search">DFS</a>
is no more alien to me. It&rsquo;s friend!</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memento Pattern in Java]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/08/memento-pattern-in-java/"/>
    <updated>2014-03-08T00:02:29+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/08/memento-pattern-in-java</id>
    <content type="html"><![CDATA[<p>Recently, I implemented some design patterns following <a href="http://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797327030">this book</a>. This book introduces 23 design patterns that all programmers should know when you write according to OOP instructions. So now I want to write this article about some of these patterns and explain these. All codes that used in this article are put <a href="https://github.com/Lewuathe/java-GoF/tree/master/Memento">here</a></p>

<!-- more -->


<h2>What is Memento pattern?</h2>

<p>Memento pattern is used for recording past statuses and for recovering susequently. For example when you use text editor such as vim or emacs, do you use <code>undo</code>?
Why do you think this <code>undo</code> command can perform? As one way, all statuses(sometimes not all) are recorded as a type of object. Then you can recover this object
to use this recovered data in your application. Let&rsquo;s picking up game example, examine the structure of memento pattern.</p>

<h2>Main</h2>

<p>```java
import game.Gamer;
import game.Memento;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] args) {
Gamer gamer = new Gamer(100);
Memento memento = gamer.createMemento();
    for (int i = 0; i &lt; 100; i++) {
        System.out.println("=== " + i);
        System.out.println("Current: " + gamer);
        gamer.bet();
        System.out.println("Money: Â¥" + gamer.getMoney());

        if (gamer.getMoney() &gt; memento.getMoney()) {
            System.out.println("Save current state");
            memento = gamer.createMemento();
        } else if (gamer.getMoney() &lt; memento.getMoney() / 2) {
            System.out.println("Restore previous state");
            gamer.restoreMemento(memento);
        }

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {

        }
        System.out.println("");
    }
}
</code></pre>

<p>}
```</p>

<p>On every turn, a gamer bets and gets money or some fruits. If you get more money at the last of game you win. It&rsquo;s very simple.
Please pay attention to line 7. Mement pattern is used there. This memento object is used when gamer can get more money or reduce
his money to half of previous one. For saving, call <code>gamer.createMemento()</code> and for restoring, call <code>gamer.restoreMemento()</code>.
All concepts that are included in memento pattern are these. It is easy to understand this pattern. Do you think you can write this pattern
in your production code tomorrow? Please try it.</p>

<p>As a reference, memento class is also placed here. But it is not core concept of memento pattern. You can arrange this concrete logic for your use
if you could only save and restore statuses.</p>

<p>```java
package game;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>public class Memento {</p>

<pre><code>int money;
ArrayList fruits;

public int getMoney() {
        return money;
}

public Memento(int money) {
    this.money = money;
    this.fruits = new ArrayList();
}

void addFruit(String fruit) {
    fruits.add(fruit);
}

public List getFruits() {
    return (List)fruits.clone();
}
</code></pre>

<p>}
```</p>

<p>Is there any unclear stuff? Please look into <a href="https://github.com/Lewuathe/java-GoF/tree/master/Memento">this codes</a>.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Is HashMap Written in Java]]></title>
    <link href="http://lewuathe.github.io/blog/2014/03/06/how-is-hashtable-written-in-java/"/>
    <updated>2014-03-06T22:22:04+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/03/06/how-is-hashtable-written-in-java</id>
    <content type="html"><![CDATA[<p>Here recently, I have a chance to read Java core API, expecially <em>HashMap</em>.
Usually, I use HashMap paying no attention to, but this code reading brought many things to me.
I can understand that how HashMap is written in Java and more this is very simple than I expected.
So in this post, I&rsquo;d like to introduce some ideas and code used in <code>java.util.HashMap</code>.</p>

<!-- more -->


<h2>Constructor</h2>

<p>```java
public class HashMap&lt;K,V> extends AbstractMap&lt;K,V></p>

<pre><code>    implements Map&lt;K,V&gt;, Cloneable, Serializable {

public HashMap() {
    // DEFAULT_INITIAL_CAPACITY is 16
    // DEFAULT_LOAD_FACTOR is 0.75f
    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);
}
</code></pre>

<p>}
```</p>

<p>This is <code>HashMap</code> constructor. <code>DEFAULT_INITIAL_CAPACITY</code> is the default size of array. This value is set as below.
<code>DEFAULT_LOAD_FACTOR</code> is the ratio of the number of put items to maximum capacity of hash table. Default value is 0.75f.</p>

<p><code>java
static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16
</code></p>

<p>Only 16 items can be retained in HashMap. What happen if this size become insufficient for your use?
In every code of adding item, this line was added.</p>

<p>```java
if ((size >= threshold) &amp;&amp; (null != table[bucketIndex])) {</p>

<pre><code>resize(2 * table.length);
hash = (null != key) ? hash(key) : 0;
bucketIndex = indexFor(hash, table.length);
</code></pre>

<p>}
```</p>

<p>Threshold means the next size to which this table will resized. So if there are more items than an array can keep,
array is resized by <code>resize</code> and hash value is calculated based on the new table size. <code>resize</code> is defined as below.</p>

<p>```java
void resize(int newCapacity) {</p>

<pre><code>Entry[] oldTable = table;
int oldCapacity = oldTable.length;
if (oldCapacity == MAXIMUM_CAPACITY) {
    // Setting next size to max
    threshold = Integer.MAX_VALUE;
    return;
}

Entry[] newTable = new Entry[newCapacity];
// move all items to new hash table
transfer(newTable, initHashSeedAsNeeded(newCapacity));
table = newTable;
threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);
</code></pre>

<p>}
```</p>

<p>Create new table, and transfer all items to new table. It is simple, isn&rsquo;t it?
So keep going to <code>put</code>. the core algorithm of this method is hashing key.</p>

<h2>Put</h2>

<p>Put code is written as below.</p>

<p>```java
public V put(K key, V value) {</p>

<pre><code>if (table == EMPTY_TABLE) {
    inflateTable(threshold);
}
if (key == null)
   return putForNullKey(value);
// Get hash value of this key object
int hash = hash(key);
// Get index in the hash table, so called bucket
int i = indexFor(hash, table.length);
for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) {
   // Search the item that has same key object
   Object k;
   if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) {
      V oldValue = e.value;
      e.value = value;
      e.recordAccess(this);
      return oldValue;
   }
}

// If there no item that match the given key, create new entry.
modCount++;
addEntry(hash, key, value, i);
return null;
</code></pre>

<p>}
```</p>

<p>If table is not created yet, make it by using <code>inflateTable</code>. Then hasing with <code>hash</code>. <code>hash</code> is defined as below.</p>

<p>```java
final int hash(Object k) {</p>

<pre><code>int h = hashSeed;
if (0 != h &amp;&amp; k instanceof String) {
   return sun.misc.Hashing.stringHash32((String) k);
}

h ^= k.hashCode();

// This function ensures that hashCodes that differ only by
// constant multiples at each bit position have a bounded
// number of collisions (approximately 8 at default load factor).
h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);
return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);
</code></pre>

<p>}
```</p>

<p>If the key object is <code>String</code>, <code>sum.misc.Hashing.stringHash32</code> is used as hashing algorithm. In the other case, make use of <code>Object.hashCode()</code>.
This method is declared in <code>Object</code> class. So all objects in Java should implements this method or defined already super classes.
In both cases, <code>k.hashCode()</code> can be called safely. In order to make sure that hash value is unique in hash table, some bit calculations
are operated on <code>h</code>. So now, you can get hash value correspond to key object.</p>

<p>Please pay attention to the data structure used for storing items. This is implemented as chaining pattern.
Back to <code>put</code> method.</p>

<p>```java
int hash = hash(key);
int i = indexFor(hash, table.length);
for (Entry&lt;K,V> e = table[i]; e != null; e = e.next) {</p>

<pre><code>Object k;
if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) {
   V oldValue = e.value;
   e.value = value;
   e.recordAccess(this);
   return oldValue;
}
</code></pre>

<p>}</p>

<p>modCount++;
addEntry(hash, key, value, i);
return null;
```</p>

<p>After getting index for hash value with <code>indexFor(hash, table.length)</code>, take a chain from correspond bucket item.
<code>table[i]</code> is the first item of this linked list. In the case of existing the value which has same key, update value.
If there are overlapped items in this table, linked list has multiple items. To reduce calculation cost, new item is prepend to this list in <code>addEntry</code></p>

<p>```java
void addEntry(int hash, K key, V value, int bucketIndex) {</p>

<pre><code>if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) {
    resize(2 * table.length);
    hash = (null != key) ? hash(key) : 0;
    bucketIndex = indexFor(hash, table.length);
}
createEntry(hash, key, value, bucketIndex);
</code></pre>

<p>}
```</p>

<p><code>createEntry</code> prepends this put value.</p>

<p>```java
void createEntry(int hash, K key, V value, int bucketIndex) {</p>

<pre><code>Entry&lt;K,V&gt; e = table[bucketIndex];
// hash: hash value that belongs to new entry
// key: key object that belongs to new entry
// value: content value that belongs to new entry
// e: next node that is append to new entry item
table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);
size++;
</code></pre>

<p>}
```</p>

<p><code>Entry</code> constructor receives its hash value, key value, content value and next node for linked list.
So in this line, new object which is put on the hash table is prepend to the line of linked list.
It will be the first object of the list.</p>

<h2>Get</h2>

<p>When you want to get target item that is correspond to your key, how is it works?</p>

<p>Now, <code>getEntry</code> is called.</p>

<p>```java
final Entry&lt;K,V> getEntry(Object key) {</p>

<pre><code>if (size == 0) {
   return null;
}

int hash = (key == null) ? 0 : hash(key);
for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];
    // Search through linked list
    e != null; e = e.next) {
    Object k;
    if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
        return e;
}
return null;
</code></pre>

<p>}
```</p>

<p>Under given key, this code do linear search through linear list in the bucket item. Inside the list,
returns the item which matches a given key object. This is simpler than I expected, but thanks to this code
I can understand how <code>HashMap</code> works in Java programming language.</p>

<p>This code reading is so fun to me that I want to keep this activity as possible.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Shortcuts for IntelliJ IDEA]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/18/useful-shortcuts-for-intellij-idea/"/>
    <updated>2014-02-18T21:21:10+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/18/useful-shortcuts-for-intellij-idea</id>
    <content type="html"><![CDATA[<p>In this week, I am attending a lecture for developing mobile application on android.
Of course I had no experience writing android applications, I have not written Java code in my life.
Through this lecture, I was so impressed by the functionality of <a href="https://www.eclipse.org/">Eclipse</a>.</p>

<p>In my life, I hate using IDE because these tools always hide a mechanism for building application.
This is why I always used emacs or vim. But today, I changed my mind. IDE is the next step for me in order to acquire new skills.
So just now I installed <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> which is in fashion nowadays.</p>

<!-- more -->


<p>In this post, I&rsquo;d like to introduce some shortcuts for my kickstarting IntelliJ IDEA. If you know any other tips, please let me know.</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Short Cut </th>
<th align="left"> Function </th>
<th align="left"> Notes </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Ctrl + Space  </td>
<td align="left"> Basic Code completion </td>
<td align="left"> With IntelliJ IDEA, however code completion is run automatically </td>
</tr>
<tr>
<td></td>
<td align="left"> Alt + Enter   </td>
<td align="left"> Show intention actions and quick-fixes </td>
<td align="left"> IntelliJ IDEA gives me any suggestions in each situations </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + L </td>
<td align="left"> Reformat code </td>
<td align="left"> Rearrange for readable format </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + O </td>
<td align="left"> Optimize imports </td>
<td align="left"> Remove unnecessary imports </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Q </td>
<td align="left"> Quick documentation </td>
<td align="left"> Simple reference to javadoc </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + O </td>
<td align="left"> Override methods </td>
<td align="left"> Implements override methods of current class </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + / </td>
<td align="left"> Comment out/in a line </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + W </td>
<td align="left"> Select successively increasing code blocks </td>
<td align="left"> You can select a meaningful code blocks </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Y </td>
<td align="left"> Delete line at caret </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> Shift + Enter </td>
<td align="left"> Start new line </td>
<td align="left"> Wherever line you are, insert new line</td>
</tr>
<tr>
<td></td>
<td align="left"> Shift + F10 </td>
<td align="left"> Run </td>
<td align="left"> </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + V </td>
<td align="left"> Introduce variables </td>
<td align="left"> Make variables name automatically </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + J </td>
<td align="left"> Insert live templates </td>
<td align="left"> A lot of type of templates are preinstalled </td>
</tr>
</tbody>
</table>


<p>How do you think that? Of course, there are so many shortcuts and functions that I cannot introduce all of these.
The only way to know how useful IntelliJ IDEA is using it throughly! From today, I&rsquo;ll switch default editor to IntelliJ IDEA.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Jenkins Plugin]]></title>
    <link href="http://lewuathe.github.io/blog/2013/11/28/my-first-jenkins-plugin/"/>
    <updated>2013-11-28T21:15:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/11/28/my-first-jenkins-plugin</id>
    <content type="html"><![CDATA[<p>Released my first Jenkins plugin</p>

<p><a href="https://github.com/jenkinsci/hckrnews-plugin">https://github.com/jenkinsci/hckrnews-plugin</a></p>

<p><img src="/images/posts/2013-11-28-hckrnews-plugin/screen-shot.png" alt="Screen shot" /></p>

<p>With this plugin, you can read hacker news top time line sitting in front of CI server.
So you can read top topics about technology and so on at the same time building your project. Does it sound good?</p>

<h2>How to publish Jenkins plugin?</h2>

<h3>Make GitHub repository</h3>

<p>Normal Maven project needs only src/ and pom.xml. Jenkins plugin project is not exception.
Write right .gitignore, and ignore target/ and work/ directory. These are not necessary.</p>

<h3>Create new jenkins-ci account</h3>

<p>Visit <a href="https://jenkins-ci.org/account/">here</a>. Create your new account.</p>

<h3>Write settings.xml your account information</h3>

<p>Your account name, and password got from above process should be written in <code>~/.m2/settings.xml</code> like below.</p>

<p>```
<settings>
 ã»ã»ã»
  <servers></p>

<pre><code>&lt;server&gt;
  &lt;id&gt;maven.jenkins-ci.org&lt;/id&gt;
  &lt;username&gt;XXXXXX&lt;/username&gt;
  &lt;password&gt;XXXXXX&lt;/password&gt;
&lt;/server&gt;
</code></pre>

<p>  </servers>
  ã»ã»ã»
</settings>
```</p>

<h3>Application for forking repository</h3>

<p>Send an email to community <a href="https://groups.google.com/forum/#!forum/jenkinsci-ja">mailing list</a> in Japan. If you want to send other community, search <a href="http://jenkins-ci.org/content/mailing-lists">here</a>
Soon your repository is forked to original jenkinsci organization.</p>

<h3>Modify pom.xml</h3>

<p>Add some line. SCM repository url should be written in your project <code>pom.xml</code></p>

<p>```
<scm></p>

<pre><code>&lt;connection&gt;scm:git:ssh://github.com/jenkinsci/XXXXXXXX.git&lt;/connection&gt;
&lt;developerConnection&gt;scm:git:ssh://git@github.com/jenkinsci/XXXXXXXX.git&lt;/developerConnection&gt;
&lt;url&gt;https://github.com/jenkinsci/XXXXXXXX.git&lt;/url&gt;
</code></pre>

<p></scm>
```</p>

<h3>Release!</h3>

<p>Type below command.</p>

<p><code>
$ mvn release:prepare release:perform
</code></p>

<p>One this your should pay attention to is not to add <code>-Dusername</code> and <code>-Dpassword</code> options. These are not used for GitHub but jenkinsci.org
Congratulations!!</p>

<h3>Future</h3>

<p>In fact, I make this plugin with no experience of writing Java, of course maven.
Therefore I have to study these tool and Java grammar. In addition to this, I learned how to write some design patterns with coding in accordance with OO programming.</p>

<p>I also wrote some test codes with JUnit in maven. TDD is the method with which I want to develop. In this time, first I wrote unit test code and second logic code. This is fun for me because my code&rsquo;s quality seems to be kept easily. I want to keep writing test code first. This is the best practice for my developing.</p>

<p>This plugin has only simple functions, however, this experience is sufficient value as software engineer.
In the future, I will seize the moment and make more my own plugins.</p>

<p>Ultimately, please use this plugin. It brings to you a new continuous integration life.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
</feed>
