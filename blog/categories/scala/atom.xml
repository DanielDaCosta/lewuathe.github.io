<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | The first cry of Atom]]></title>
  <link href="http://lewuathe.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://lewuathe.github.io/"/>
  <updated>2014-03-10T23:30:36+09:00</updated>
  <id>http://lewuathe.github.io/</id>
  <author>
    <name><![CDATA[Kai Sasaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Useful Shortcuts for IntelliJ IDEA]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/18/useful-shortcuts-for-intellij-idea/"/>
    <updated>2014-02-18T21:21:10+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/18/useful-shortcuts-for-intellij-idea</id>
    <content type="html"><![CDATA[<p>In this week, I am attending a lecture for developing mobile application on android.
Of course I had no experience writing android applications, I have not written Java code in my life.
Through this lecture, I was so impressed by the functionality of <a href="https://www.eclipse.org/">Eclipse</a>.</p>

<p>In my life, I hate using IDE because these tools always hide a mechanism for building application.
This is why I always used emacs or vim. But today, I changed my mind. IDE is the next step for me in order to acquire new skills.
So just now I installed <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> which is in fashion nowadays.</p>

<!-- more -->


<p>In this post, I&rsquo;d like to introduce some shortcuts for my kickstarting IntelliJ IDEA. If you know any other tips, please let me know.</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Short Cut </th>
<th align="left"> Function </th>
<th align="left"> Notes </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Ctrl + Space  </td>
<td align="left"> Basic Code completion </td>
<td align="left"> With IntelliJ IDEA, however code completion is run automatically </td>
</tr>
<tr>
<td></td>
<td align="left"> Alt + Enter   </td>
<td align="left"> Show intention actions and quick-fixes </td>
<td align="left"> IntelliJ IDEA gives me any suggestions in each situations </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + L </td>
<td align="left"> Reformat code </td>
<td align="left"> Rearrange for readable format </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + O </td>
<td align="left"> Optimize imports </td>
<td align="left"> Remove unnecessary imports </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Q </td>
<td align="left"> Quick documentation </td>
<td align="left"> Simple reference to javadoc </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + O </td>
<td align="left"> Override methods </td>
<td align="left"> Implements override methods of current class </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + / </td>
<td align="left"> Comment out/in a line </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + W </td>
<td align="left"> Select successively increasing code blocks </td>
<td align="left"> You can select a meaningful code blocks </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Y </td>
<td align="left"> Delete line at caret </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> Shift + Enter </td>
<td align="left"> Start new line </td>
<td align="left"> Wherever line you are, insert new line</td>
</tr>
<tr>
<td></td>
<td align="left"> Shift + F10 </td>
<td align="left"> Run </td>
<td align="left"> </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + Alt + V </td>
<td align="left"> Introduce variables </td>
<td align="left"> Make variables name automatically </td>
</tr>
<tr>
<td></td>
<td align="left"> Ctrl + J </td>
<td align="left"> Insert live templates </td>
<td align="left"> A lot of type of templates are preinstalled </td>
</tr>
</tbody>
</table>


<p>How do you think that? Of course, there are so many shortcuts and functions that I cannot introduce all of these.
The only way to know how useful IntelliJ IDEA is using it throughly! From today, I&rsquo;ll switch default editor to IntelliJ IDEA.</p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go and Scala, Which Should I Use?]]></title>
    <link href="http://lewuathe.github.io/blog/2014/02/17/go-and-scala-which-should-i-use/"/>
    <updated>2014-02-17T22:37:59+09:00</updated>
    <id>http://lewuathe.github.io/blog/2014/02/17/go-and-scala-which-should-i-use</id>
    <content type="html"><![CDATA[<p>Today, <a href="http://www.google.com/trends/explore#q=golang%2C%20clojure&amp;cmpt=q">Go and Clojure compete with each other</a>. <a href="http://golang.org/">Go</a> will be one of the
hottest programming language in this year. This is the compiler language which can be seen as the successor C++.</p>

<p>On the other hand, <a href="http://www.scala-lang.org/">Scala</a> is the successor of Java which succeeded blending two programming paradigms, object-oriented programming and
functional programming.</p>

<!-- more -->


<p>These two languages are very similar to me. In developing deep learning module for myself, which language should I use?
Or if I can ask more general question, which language will be the major static language in the field in which tough performance
and maintainability are required. If you have any good idea or criteria for selecting these two languages, please send good advice to <a href="https://twitter.com/Lewuathe">@Lewuathe</a></p>

<p>Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalaを使うことに]]></title>
    <link href="http://lewuathe.github.io/blog/2013/09/07/scalawoshi-ukotoni/"/>
    <updated>2013-09-07T23:22:00+09:00</updated>
    <id>http://lewuathe.github.io/blog/2013/09/07/scalawoshi-ukotoni</id>
    <content type="html"><![CDATA[<p>汎用人工知能の開発をするにあたって使う言語とかを考えていた。汎用人工知能（まだそれが何を意味するのか明瞭にはわかってない)で必要なスペックは次のものなのではないかなとあげてみた。</p>

<ul>
<li>高速</li>
<li>並列処理に向いている</li>
<li>関数型（少なくとも副作用を前提としないプログラム）</li>
</ul>


<p>ここであげた条件には自分の好み、向き不向きが含まれているけれど漠然とした現状を考えるとこれが妥当なのではないかな。
高速であることはいうまでもない。多分CとかC++が一番よい。でもC、C++はメモリ管理とか大変そうで個人的にはデカイものを書くときには向いてない気がする。
並列処理に向いているというのは機械学習を行わせたいので今流行のMahoutもJubatusも並列で計算をおこなっているのでそれが向いているものがいい。ErlangとかScalaがいいらしい。特にScalaのActorアーキテクチャはデッドロックや並列計算での問題が解消されやすいみたい。</p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1209/06/news134.html">http://www.atmarkit.co.jp/ait/articles/1209/06/news134.html</a></p>

<p>あと関数型。副作用を前提とした言語だとプログラムを書いていてバグを埋め込みやすいのでできれば関数型言語を使いたい。Haskellなんかは純粋関数型言語で今流行だけど、ライブラリの数とかでは叶わない。あとはちょっとこてこてなのでSchemeとかかな。</p>

<p>というわけで選んだのは<strong>Scala</strong>です。一番バランスがよかったのでこの言語で作っていこうと思います。今はこちらでScalaの勉強中。</p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1202/10/news122.html">http://www.atmarkit.co.jp/ait/articles/1202/10/news122.html</a></p>
]]></content>
  </entry>
  
</feed>
